// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

/// from: java.util.function.Consumer
class Consumer<$T extends jni.JObject> extends jni.JObject {
  @override
  late final jni.JObjType<Consumer<$T>> $type = type(T);

  final jni.JObjType<$T> T;

  Consumer.fromReference(
    this.T,
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"java/util/function/Consumer");

  /// The type which includes information such as the signature of this class.
  static $ConsumerType<$T> type<$T extends jni.JObject>(
    jni.JObjType<$T> T,
  ) {
    return $ConsumerType(
      T,
    );
  }

  static final _id_accept = _class.instanceMethodId(
    r"accept",
    r"(Ljava/lang/Object;)V",
  );

  /// from: public abstract void accept(T object)
  void accept(
    $T object,
  ) {
    _id_accept(this, const jni.jvoidType(), [object.reference.pointer]);
  }

  static final _id_andThen = _class.instanceMethodId(
    r"andThen",
    r"(Ljava/util/function/Consumer;)Ljava/util/function/Consumer;",
  );

  /// from: public java.util.function.Consumer andThen(java.util.function.Consumer consumer)
  /// The returned object must be released after use, by calling the [release] method.
  Consumer<$T> andThen(
    Consumer<$T> consumer,
  ) {
    return _id_andThen(this, $ConsumerType(T), [consumer.reference.pointer]);
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $ConsumerImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"accept(Ljava/lang/Object;)V") {
        _$impls[$p]!.accept(
          $a[0].castTo(_$impls[$p]!.T, releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d ==
          r"andThen(Ljava/util/function/Consumer;)Ljava/util/function/Consumer;") {
        final $r = _$impls[$p]!.andThen(
          $a[0].castTo($ConsumerType(_$impls[$p]!.T), releaseOriginal: true),
        );
        return ($r as jni.JObject)
            .castTo(const jni.JObjectType())
            .reference
            .toPointer();
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory Consumer.implement(
    $ConsumerImpl<$T> $impl,
  ) {
    final $p = ReceivePort();
    final $x = Consumer.fromReference(
      $impl.T,
      ProtectedJniExtensions.newPortProxy(
        r"java.util.function.Consumer",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $ConsumerImpl<$T extends jni.JObject> {
  factory $ConsumerImpl({
    required jni.JObjType<$T> T,
    required void Function($T object) accept,
    required Consumer<$T> Function(Consumer<$T> consumer) andThen,
  }) = _$ConsumerImpl;

  jni.JObjType<$T> get T;

  void accept($T object);
  Consumer<$T> andThen(Consumer<$T> consumer);
}

class _$ConsumerImpl<$T extends jni.JObject> implements $ConsumerImpl<$T> {
  _$ConsumerImpl({
    required this.T,
    required void Function($T object) accept,
    required Consumer<$T> Function(Consumer<$T> consumer) andThen,
  })  : _accept = accept,
        _andThen = andThen;

  @override
  final jni.JObjType<$T> T;

  final void Function($T object) _accept;
  final Consumer<$T> Function(Consumer<$T> consumer) _andThen;

  void accept($T object) {
    return _accept(object);
  }

  Consumer<$T> andThen(Consumer<$T> consumer) {
    return _andThen(consumer);
  }
}

final class $ConsumerType<$T extends jni.JObject>
    extends jni.JObjType<Consumer<$T>> {
  final jni.JObjType<$T> T;

  const $ConsumerType(
    this.T,
  );

  @override
  String get signature => r"Ljava/util/function/Consumer;";

  @override
  Consumer<$T> fromReference(jni.JReference reference) =>
      Consumer.fromReference(T, reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($ConsumerType, T);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ConsumerType<$T>) &&
        other is $ConsumerType<$T> &&
        T == other.T;
  }
}

/// from: android.webkit.WebView$FindListener
class WebView_FindListener extends jni.JObject {
  @override
  late final jni.JObjType<WebView_FindListener> $type = type;

  WebView_FindListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/webkit/WebView$FindListener");

  /// The type which includes information such as the signature of this class.
  static const type = $WebView_FindListenerType();
  static final _id_onFindResultReceived = _class.instanceMethodId(
    r"onFindResultReceived",
    r"(IIZ)V",
  );

  /// from: public abstract void onFindResultReceived(int i, int i1, boolean z)
  void onFindResultReceived(
    int i,
    int i1,
    bool z,
  ) {
    _id_onFindResultReceived(this, const jni.jvoidType(),
        [jni.JValueInt(i), jni.JValueInt(i1), z ? 1 : 0]);
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $WebView_FindListenerImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"onFindResultReceived(IIZ)V") {
        _$impls[$p]!.onFindResultReceived(
          $a[0]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[1]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[2]
              .castTo(const jni.JBooleanType(), releaseOriginal: true)
              .booleanValue(releaseOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory WebView_FindListener.implement(
    $WebView_FindListenerImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = WebView_FindListener.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"android.webkit.WebView$FindListener",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $WebView_FindListenerImpl {
  factory $WebView_FindListenerImpl({
    required void Function(int i, int i1, bool z) onFindResultReceived,
  }) = _$WebView_FindListenerImpl;

  void onFindResultReceived(int i, int i1, bool z);
}

class _$WebView_FindListenerImpl implements $WebView_FindListenerImpl {
  _$WebView_FindListenerImpl({
    required void Function(int i, int i1, bool z) onFindResultReceived,
  }) : _onFindResultReceived = onFindResultReceived;

  final void Function(int i, int i1, bool z) _onFindResultReceived;

  void onFindResultReceived(int i, int i1, bool z) {
    return _onFindResultReceived(i, i1, z);
  }
}

final class $WebView_FindListenerType
    extends jni.JObjType<WebView_FindListener> {
  const $WebView_FindListenerType();

  @override
  String get signature => r"Landroid/webkit/WebView$FindListener;";

  @override
  WebView_FindListener fromReference(jni.JReference reference) =>
      WebView_FindListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($WebView_FindListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebView_FindListenerType) &&
        other is $WebView_FindListenerType;
  }
}

/// from: android.webkit.WebView$HitTestResult
class WebView_HitTestResult extends jni.JObject {
  @override
  late final jni.JObjType<WebView_HitTestResult> $type = type;

  WebView_HitTestResult.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/webkit/WebView$HitTestResult");

  /// The type which includes information such as the signature of this class.
  static const type = $WebView_HitTestResultType();

  /// from: static public final int ANCHOR_TYPE
  static const ANCHOR_TYPE = 1;

  /// from: static public final int EDIT_TEXT_TYPE
  static const EDIT_TEXT_TYPE = 9;

  /// from: static public final int EMAIL_TYPE
  static const EMAIL_TYPE = 4;

  /// from: static public final int GEO_TYPE
  static const GEO_TYPE = 3;

  /// from: static public final int IMAGE_ANCHOR_TYPE
  static const IMAGE_ANCHOR_TYPE = 6;

  /// from: static public final int IMAGE_TYPE
  static const IMAGE_TYPE = 5;

  /// from: static public final int PHONE_TYPE
  static const PHONE_TYPE = 2;

  /// from: static public final int SRC_ANCHOR_TYPE
  static const SRC_ANCHOR_TYPE = 7;

  /// from: static public final int SRC_IMAGE_ANCHOR_TYPE
  static const SRC_IMAGE_ANCHOR_TYPE = 8;

  /// from: static public final int UNKNOWN_TYPE
  static const UNKNOWN_TYPE = 0;
  static final _id_getType = _class.instanceMethodId(
    r"getType",
    r"()I",
  );

  /// from: public int getType()
  int getType() {
    return _id_getType(this, const jni.jintType(), []);
  }

  static final _id_getExtra = _class.instanceMethodId(
    r"getExtra",
    r"()Ljava/lang/String;",
  );

  /// from: public java.lang.String getExtra()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getExtra() {
    return _id_getExtra(this, const jni.JStringType(), []);
  }
}

final class $WebView_HitTestResultType
    extends jni.JObjType<WebView_HitTestResult> {
  const $WebView_HitTestResultType();

  @override
  String get signature => r"Landroid/webkit/WebView$HitTestResult;";

  @override
  WebView_HitTestResult fromReference(jni.JReference reference) =>
      WebView_HitTestResult.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($WebView_HitTestResultType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebView_HitTestResultType) &&
        other is $WebView_HitTestResultType;
  }
}

/// from: android.webkit.WebView$PictureListener
class WebView_PictureListener extends jni.JObject {
  @override
  late final jni.JObjType<WebView_PictureListener> $type = type;

  WebView_PictureListener.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/webkit/WebView$PictureListener");

  /// The type which includes information such as the signature of this class.
  static const type = $WebView_PictureListenerType();
  static final _id_onNewPicture = _class.instanceMethodId(
    r"onNewPicture",
    r"(Landroid/webkit/WebView;Landroid/graphics/Picture;)V",
  );

  /// from: public abstract void onNewPicture(android.webkit.WebView webView, android.graphics.Picture picture)
  void onNewPicture(
    WebView webView,
    jni.JObject picture,
  ) {
    _id_onNewPicture(this, const jni.jvoidType(),
        [webView.reference.pointer, picture.reference.pointer]);
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $WebView_PictureListenerImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r"onNewPicture(Landroid/webkit/WebView;Landroid/graphics/Picture;)V") {
        _$impls[$p]!.onNewPicture(
          $a[0].castTo(const $WebViewType(), releaseOriginal: true),
          $a[1].castTo(const jni.JObjectType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory WebView_PictureListener.implement(
    $WebView_PictureListenerImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = WebView_PictureListener.fromReference(
      ProtectedJniExtensions.newPortProxy(
        r"android.webkit.WebView$PictureListener",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m as List<dynamic>);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract interface class $WebView_PictureListenerImpl {
  factory $WebView_PictureListenerImpl({
    required void Function(WebView webView, jni.JObject picture) onNewPicture,
  }) = _$WebView_PictureListenerImpl;

  void onNewPicture(WebView webView, jni.JObject picture);
}

class _$WebView_PictureListenerImpl implements $WebView_PictureListenerImpl {
  _$WebView_PictureListenerImpl({
    required void Function(WebView webView, jni.JObject picture) onNewPicture,
  }) : _onNewPicture = onNewPicture;

  final void Function(WebView webView, jni.JObject picture) _onNewPicture;

  void onNewPicture(WebView webView, jni.JObject picture) {
    return _onNewPicture(webView, picture);
  }
}

final class $WebView_PictureListenerType
    extends jni.JObjType<WebView_PictureListener> {
  const $WebView_PictureListenerType();

  @override
  String get signature => r"Landroid/webkit/WebView$PictureListener;";

  @override
  WebView_PictureListener fromReference(jni.JReference reference) =>
      WebView_PictureListener.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($WebView_PictureListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebView_PictureListenerType) &&
        other is $WebView_PictureListenerType;
  }
}

/// from: android.webkit.WebView$VisualStateCallback
class WebView_VisualStateCallback extends jni.JObject {
  @override
  late final jni.JObjType<WebView_VisualStateCallback> $type = type;

  WebView_VisualStateCallback.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/webkit/WebView$VisualStateCallback");

  /// The type which includes information such as the signature of this class.
  static const type = $WebView_VisualStateCallbackType();
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory WebView_VisualStateCallback() {
    return WebView_VisualStateCallback.fromReference(
        _id_new0(_class, referenceType, []));
  }

  static final _id_onComplete = _class.instanceMethodId(
    r"onComplete",
    r"(J)V",
  );

  /// from: public abstract void onComplete(long j)
  void onComplete(
    int j,
  ) {
    _id_onComplete(this, const jni.jvoidType(), [j]);
  }
}

final class $WebView_VisualStateCallbackType
    extends jni.JObjType<WebView_VisualStateCallback> {
  const $WebView_VisualStateCallbackType();

  @override
  String get signature => r"Landroid/webkit/WebView$VisualStateCallback;";

  @override
  WebView_VisualStateCallback fromReference(jni.JReference reference) =>
      WebView_VisualStateCallback.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($WebView_VisualStateCallbackType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebView_VisualStateCallbackType) &&
        other is $WebView_VisualStateCallbackType;
  }
}

/// from: android.webkit.WebView$WebViewTransport
class WebView_WebViewTransport extends jni.JObject {
  @override
  late final jni.JObjType<WebView_WebViewTransport> $type = type;

  WebView_WebViewTransport.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/webkit/WebView$WebViewTransport");

  /// The type which includes information such as the signature of this class.
  static const type = $WebView_WebViewTransportType();
  static final _id_new0 = _class.constructorId(
    r"(Landroid/webkit/WebView;)V",
  );

  /// from: public void <init>(android.webkit.WebView webView)
  /// The returned object must be released after use, by calling the [release] method.
  factory WebView_WebViewTransport(
    WebView webView,
  ) {
    return WebView_WebViewTransport.fromReference(
        _id_new0(_class, referenceType, [webView.reference.pointer]));
  }

  static final _id_setWebView = _class.instanceMethodId(
    r"setWebView",
    r"(Landroid/webkit/WebView;)V",
  );

  /// from: public void setWebView(android.webkit.WebView webView)
  void setWebView(
    WebView webView,
  ) {
    _id_setWebView(this, const jni.jvoidType(), [webView.reference.pointer]);
  }

  static final _id_getWebView = _class.instanceMethodId(
    r"getWebView",
    r"()Landroid/webkit/WebView;",
  );

  /// from: public android.webkit.WebView getWebView()
  /// The returned object must be released after use, by calling the [release] method.
  WebView getWebView() {
    return _id_getWebView(this, const $WebViewType(), []);
  }
}

final class $WebView_WebViewTransportType
    extends jni.JObjType<WebView_WebViewTransport> {
  const $WebView_WebViewTransportType();

  @override
  String get signature => r"Landroid/webkit/WebView$WebViewTransport;";

  @override
  WebView_WebViewTransport fromReference(jni.JReference reference) =>
      WebView_WebViewTransport.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($WebView_WebViewTransportType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebView_WebViewTransportType) &&
        other is $WebView_WebViewTransportType;
  }
}

/// from: android.webkit.WebView
class WebView extends jni.JObject {
  @override
  late final jni.JObjType<WebView> $type = type;

  WebView.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"android/webkit/WebView");

  /// The type which includes information such as the signature of this class.
  static const type = $WebViewType();

  /// from: static public final int RENDERER_PRIORITY_BOUND
  static const RENDERER_PRIORITY_BOUND = 1;

  /// from: static public final int RENDERER_PRIORITY_IMPORTANT
  static const RENDERER_PRIORITY_IMPORTANT = 2;

  /// from: static public final int RENDERER_PRIORITY_WAIVED
  static const RENDERER_PRIORITY_WAIVED = 0;
  static final _id_SCHEME_GEO = _class.staticFieldId(
    r"SCHEME_GEO",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String SCHEME_GEO
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SCHEME_GEO =>
      _id_SCHEME_GEO.get(_class, const jni.JStringType());

  static final _id_SCHEME_MAILTO = _class.staticFieldId(
    r"SCHEME_MAILTO",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String SCHEME_MAILTO
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SCHEME_MAILTO =>
      _id_SCHEME_MAILTO.get(_class, const jni.JStringType());

  static final _id_SCHEME_TEL = _class.staticFieldId(
    r"SCHEME_TEL",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String SCHEME_TEL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SCHEME_TEL =>
      _id_SCHEME_TEL.get(_class, const jni.JStringType());

  static final _id_new0 = _class.constructorId(
    r"(Landroid/content/Context;)V",
  );

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  factory WebView(
    jni.JObject context,
  ) {
    return WebView.fromReference(
        _id_new0(_class, referenceType, [context.reference.pointer]));
  }

  static final _id_new1 = _class.constructorId(
    r"(Landroid/content/Context;Landroid/util/AttributeSet;)V",
  );

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attributeSet)
  /// The returned object must be released after use, by calling the [release] method.
  factory WebView.new1(
    jni.JObject context,
    jni.JObject attributeSet,
  ) {
    return WebView.fromReference(_id_new1(_class, referenceType,
        [context.reference.pointer, attributeSet.reference.pointer]));
  }

  static final _id_new2 = _class.constructorId(
    r"(Landroid/content/Context;Landroid/util/AttributeSet;I)V",
  );

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attributeSet, int i)
  /// The returned object must be released after use, by calling the [release] method.
  factory WebView.new2(
    jni.JObject context,
    jni.JObject attributeSet,
    int i,
  ) {
    return WebView.fromReference(_id_new2(_class, referenceType, [
      context.reference.pointer,
      attributeSet.reference.pointer,
      jni.JValueInt(i)
    ]));
  }

  static final _id_new3 = _class.constructorId(
    r"(Landroid/content/Context;Landroid/util/AttributeSet;II)V",
  );

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attributeSet, int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  factory WebView.new3(
    jni.JObject context,
    jni.JObject attributeSet,
    int i,
    int i1,
  ) {
    return WebView.fromReference(_id_new3(_class, referenceType, [
      context.reference.pointer,
      attributeSet.reference.pointer,
      jni.JValueInt(i),
      jni.JValueInt(i1)
    ]));
  }

  static final _id_new4 = _class.constructorId(
    r"(Landroid/content/Context;Landroid/util/AttributeSet;IZ)V",
  );

  /// from: public void <init>(android.content.Context context, android.util.AttributeSet attributeSet, int i, boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  factory WebView.new4(
    jni.JObject context,
    jni.JObject attributeSet,
    int i,
    bool z,
  ) {
    return WebView.fromReference(_id_new4(_class, referenceType, [
      context.reference.pointer,
      attributeSet.reference.pointer,
      jni.JValueInt(i),
      z ? 1 : 0
    ]));
  }

  static final _id_setHorizontalScrollbarOverlay = _class.instanceMethodId(
    r"setHorizontalScrollbarOverlay",
    r"(Z)V",
  );

  /// from: public void setHorizontalScrollbarOverlay(boolean z)
  void setHorizontalScrollbarOverlay(
    bool z,
  ) {
    _id_setHorizontalScrollbarOverlay(this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_setVerticalScrollbarOverlay = _class.instanceMethodId(
    r"setVerticalScrollbarOverlay",
    r"(Z)V",
  );

  /// from: public void setVerticalScrollbarOverlay(boolean z)
  void setVerticalScrollbarOverlay(
    bool z,
  ) {
    _id_setVerticalScrollbarOverlay(this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_overlayHorizontalScrollbar = _class.instanceMethodId(
    r"overlayHorizontalScrollbar",
    r"()Z",
  );

  /// from: public boolean overlayHorizontalScrollbar()
  bool overlayHorizontalScrollbar() {
    return _id_overlayHorizontalScrollbar(this, const jni.jbooleanType(), []);
  }

  static final _id_overlayVerticalScrollbar = _class.instanceMethodId(
    r"overlayVerticalScrollbar",
    r"()Z",
  );

  /// from: public boolean overlayVerticalScrollbar()
  bool overlayVerticalScrollbar() {
    return _id_overlayVerticalScrollbar(this, const jni.jbooleanType(), []);
  }

  static final _id_getCertificate = _class.instanceMethodId(
    r"getCertificate",
    r"()Landroid/net/http/SslCertificate;",
  );

  /// from: public android.net.http.SslCertificate getCertificate()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCertificate() {
    return _id_getCertificate(this, const jni.JObjectType(), []);
  }

  static final _id_setCertificate = _class.instanceMethodId(
    r"setCertificate",
    r"(Landroid/net/http/SslCertificate;)V",
  );

  /// from: public void setCertificate(android.net.http.SslCertificate sslCertificate)
  void setCertificate(
    jni.JObject sslCertificate,
  ) {
    _id_setCertificate(
        this, const jni.jvoidType(), [sslCertificate.reference.pointer]);
  }

  static final _id_savePassword = _class.instanceMethodId(
    r"savePassword",
    r"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V",
  );

  /// from: public void savePassword(java.lang.String string, java.lang.String string1, java.lang.String string2)
  void savePassword(
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
  ) {
    _id_savePassword(this, const jni.jvoidType(), [
      string.reference.pointer,
      string1.reference.pointer,
      string2.reference.pointer
    ]);
  }

  static final _id_setHttpAuthUsernamePassword = _class.instanceMethodId(
    r"setHttpAuthUsernamePassword",
    r"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V",
  );

  /// from: public void setHttpAuthUsernamePassword(java.lang.String string, java.lang.String string1, java.lang.String string2, java.lang.String string3)
  void setHttpAuthUsernamePassword(
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
    jni.JString string3,
  ) {
    _id_setHttpAuthUsernamePassword(this, const jni.jvoidType(), [
      string.reference.pointer,
      string1.reference.pointer,
      string2.reference.pointer,
      string3.reference.pointer
    ]);
  }

  static final _id_getHttpAuthUsernamePassword = _class.instanceMethodId(
    r"getHttpAuthUsernamePassword",
    r"(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;",
  );

  /// from: public java.lang.String[] getHttpAuthUsernamePassword(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> getHttpAuthUsernamePassword(
    jni.JString string,
    jni.JString string1,
  ) {
    return _id_getHttpAuthUsernamePassword(
        this,
        const jni.JArrayType(jni.JStringType()),
        [string.reference.pointer, string1.reference.pointer]);
  }

  static final _id_destroy = _class.instanceMethodId(
    r"destroy",
    r"()V",
  );

  /// from: public void destroy()
  void destroy() {
    _id_destroy(this, const jni.jvoidType(), []);
  }

  static final _id_setNetworkAvailable = _class.instanceMethodId(
    r"setNetworkAvailable",
    r"(Z)V",
  );

  /// from: public void setNetworkAvailable(boolean z)
  void setNetworkAvailable(
    bool z,
  ) {
    _id_setNetworkAvailable(this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_saveState = _class.instanceMethodId(
    r"saveState",
    r"(Landroid/os/Bundle;)Landroid/webkit/WebBackForwardList;",
  );

  /// from: public android.webkit.WebBackForwardList saveState(android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject saveState(
    jni.JObject bundle,
  ) {
    return _id_saveState(
        this, const jni.JObjectType(), [bundle.reference.pointer]);
  }

  static final _id_restoreState = _class.instanceMethodId(
    r"restoreState",
    r"(Landroid/os/Bundle;)Landroid/webkit/WebBackForwardList;",
  );

  /// from: public android.webkit.WebBackForwardList restoreState(android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject restoreState(
    jni.JObject bundle,
  ) {
    return _id_restoreState(
        this, const jni.JObjectType(), [bundle.reference.pointer]);
  }

  static final _id_loadUrl = _class.instanceMethodId(
    r"loadUrl",
    r"(Ljava/lang/String;Ljava/util/Map;)V",
  );

  /// from: public void loadUrl(java.lang.String string, java.util.Map map)
  void loadUrl(
    jni.JString string,
    jni.JMap<jni.JString, jni.JString> map,
  ) {
    _id_loadUrl(this, const jni.jvoidType(),
        [string.reference.pointer, map.reference.pointer]);
  }

  static final _id_loadUrl1 = _class.instanceMethodId(
    r"loadUrl",
    r"(Ljava/lang/String;)V",
  );

  /// from: public void loadUrl(java.lang.String string)
  void loadUrl1(
    jni.JString string,
  ) {
    _id_loadUrl1(this, const jni.jvoidType(), [string.reference.pointer]);
  }

  static final _id_postUrl = _class.instanceMethodId(
    r"postUrl",
    r"(Ljava/lang/String;[B)V",
  );

  /// from: public void postUrl(java.lang.String string, byte[] bs)
  void postUrl(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
  ) {
    _id_postUrl(this, const jni.jvoidType(),
        [string.reference.pointer, bs.reference.pointer]);
  }

  static final _id_loadData = _class.instanceMethodId(
    r"loadData",
    r"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V",
  );

  /// from: public void loadData(java.lang.String string, java.lang.String string1, java.lang.String string2)
  void loadData(
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
  ) {
    _id_loadData(this, const jni.jvoidType(), [
      string.reference.pointer,
      string1.reference.pointer,
      string2.reference.pointer
    ]);
  }

  static final _id_loadDataWithBaseURL = _class.instanceMethodId(
    r"loadDataWithBaseURL",
    r"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V",
  );

  /// from: public void loadDataWithBaseURL(java.lang.String string, java.lang.String string1, java.lang.String string2, java.lang.String string3, java.lang.String string4)
  void loadDataWithBaseURL(
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
    jni.JString string3,
    jni.JString string4,
  ) {
    _id_loadDataWithBaseURL(this, const jni.jvoidType(), [
      string.reference.pointer,
      string1.reference.pointer,
      string2.reference.pointer,
      string3.reference.pointer,
      string4.reference.pointer
    ]);
  }

  static final _id_evaluateJavascript = _class.instanceMethodId(
    r"evaluateJavascript",
    r"(Ljava/lang/String;Landroid/webkit/ValueCallback;)V",
  );

  /// from: public void evaluateJavascript(java.lang.String string, android.webkit.ValueCallback valueCallback)
  void evaluateJavascript(
    jni.JString string,
    jni.JObject valueCallback,
  ) {
    _id_evaluateJavascript(this, const jni.jvoidType(),
        [string.reference.pointer, valueCallback.reference.pointer]);
  }

  static final _id_saveWebArchive = _class.instanceMethodId(
    r"saveWebArchive",
    r"(Ljava/lang/String;)V",
  );

  /// from: public void saveWebArchive(java.lang.String string)
  void saveWebArchive(
    jni.JString string,
  ) {
    _id_saveWebArchive(this, const jni.jvoidType(), [string.reference.pointer]);
  }

  static final _id_saveWebArchive1 = _class.instanceMethodId(
    r"saveWebArchive",
    r"(Ljava/lang/String;ZLandroid/webkit/ValueCallback;)V",
  );

  /// from: public void saveWebArchive(java.lang.String string, boolean z, android.webkit.ValueCallback valueCallback)
  void saveWebArchive1(
    jni.JString string,
    bool z,
    jni.JObject valueCallback,
  ) {
    _id_saveWebArchive1(this, const jni.jvoidType(),
        [string.reference.pointer, z ? 1 : 0, valueCallback.reference.pointer]);
  }

  static final _id_stopLoading = _class.instanceMethodId(
    r"stopLoading",
    r"()V",
  );

  /// from: public void stopLoading()
  void stopLoading() {
    _id_stopLoading(this, const jni.jvoidType(), []);
  }

  static final _id_reload = _class.instanceMethodId(
    r"reload",
    r"()V",
  );

  /// from: public void reload()
  void reload() {
    _id_reload(this, const jni.jvoidType(), []);
  }

  static final _id_canGoBack = _class.instanceMethodId(
    r"canGoBack",
    r"()Z",
  );

  /// from: public boolean canGoBack()
  bool canGoBack() {
    return _id_canGoBack(this, const jni.jbooleanType(), []);
  }

  static final _id_goBack = _class.instanceMethodId(
    r"goBack",
    r"()V",
  );

  /// from: public void goBack()
  void goBack() {
    _id_goBack(this, const jni.jvoidType(), []);
  }

  static final _id_canGoForward = _class.instanceMethodId(
    r"canGoForward",
    r"()Z",
  );

  /// from: public boolean canGoForward()
  bool canGoForward() {
    return _id_canGoForward(this, const jni.jbooleanType(), []);
  }

  static final _id_goForward = _class.instanceMethodId(
    r"goForward",
    r"()V",
  );

  /// from: public void goForward()
  void goForward() {
    _id_goForward(this, const jni.jvoidType(), []);
  }

  static final _id_canGoBackOrForward = _class.instanceMethodId(
    r"canGoBackOrForward",
    r"(I)Z",
  );

  /// from: public boolean canGoBackOrForward(int i)
  bool canGoBackOrForward(
    int i,
  ) {
    return _id_canGoBackOrForward(
        this, const jni.jbooleanType(), [jni.JValueInt(i)]);
  }

  static final _id_goBackOrForward = _class.instanceMethodId(
    r"goBackOrForward",
    r"(I)V",
  );

  /// from: public void goBackOrForward(int i)
  void goBackOrForward(
    int i,
  ) {
    _id_goBackOrForward(this, const jni.jvoidType(), [jni.JValueInt(i)]);
  }

  static final _id_isPrivateBrowsingEnabled = _class.instanceMethodId(
    r"isPrivateBrowsingEnabled",
    r"()Z",
  );

  /// from: public boolean isPrivateBrowsingEnabled()
  bool isPrivateBrowsingEnabled() {
    return _id_isPrivateBrowsingEnabled(this, const jni.jbooleanType(), []);
  }

  static final _id_pageUp = _class.instanceMethodId(
    r"pageUp",
    r"(Z)Z",
  );

  /// from: public boolean pageUp(boolean z)
  bool pageUp(
    bool z,
  ) {
    return _id_pageUp(this, const jni.jbooleanType(), [z ? 1 : 0]);
  }

  static final _id_pageDown = _class.instanceMethodId(
    r"pageDown",
    r"(Z)Z",
  );

  /// from: public boolean pageDown(boolean z)
  bool pageDown(
    bool z,
  ) {
    return _id_pageDown(this, const jni.jbooleanType(), [z ? 1 : 0]);
  }

  static final _id_postVisualStateCallback = _class.instanceMethodId(
    r"postVisualStateCallback",
    r"(JLandroid/webkit/WebView$VisualStateCallback;)V",
  );

  /// from: public void postVisualStateCallback(long j, android.webkit.WebView$VisualStateCallback visualStateCallback)
  void postVisualStateCallback(
    int j,
    WebView_VisualStateCallback visualStateCallback,
  ) {
    _id_postVisualStateCallback(this, const jni.jvoidType(),
        [j, visualStateCallback.reference.pointer]);
  }

  static final _id_clearView = _class.instanceMethodId(
    r"clearView",
    r"()V",
  );

  /// from: public void clearView()
  void clearView() {
    _id_clearView(this, const jni.jvoidType(), []);
  }

  static final _id_capturePicture = _class.instanceMethodId(
    r"capturePicture",
    r"()Landroid/graphics/Picture;",
  );

  /// from: public android.graphics.Picture capturePicture()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject capturePicture() {
    return _id_capturePicture(this, const jni.JObjectType(), []);
  }

  static final _id_createPrintDocumentAdapter = _class.instanceMethodId(
    r"createPrintDocumentAdapter",
    r"()Landroid/print/PrintDocumentAdapter;",
  );

  /// from: public android.print.PrintDocumentAdapter createPrintDocumentAdapter()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject createPrintDocumentAdapter() {
    return _id_createPrintDocumentAdapter(this, const jni.JObjectType(), []);
  }

  static final _id_createPrintDocumentAdapter1 = _class.instanceMethodId(
    r"createPrintDocumentAdapter",
    r"(Ljava/lang/String;)Landroid/print/PrintDocumentAdapter;",
  );

  /// from: public android.print.PrintDocumentAdapter createPrintDocumentAdapter(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject createPrintDocumentAdapter1(
    jni.JString string,
  ) {
    return _id_createPrintDocumentAdapter1(
        this, const jni.JObjectType(), [string.reference.pointer]);
  }

  static final _id_getScale = _class.instanceMethodId(
    r"getScale",
    r"()F",
  );

  /// from: public float getScale()
  double getScale() {
    return _id_getScale(this, const jni.jfloatType(), []);
  }

  static final _id_setInitialScale = _class.instanceMethodId(
    r"setInitialScale",
    r"(I)V",
  );

  /// from: public void setInitialScale(int i)
  void setInitialScale(
    int i,
  ) {
    _id_setInitialScale(this, const jni.jvoidType(), [jni.JValueInt(i)]);
  }

  static final _id_invokeZoomPicker = _class.instanceMethodId(
    r"invokeZoomPicker",
    r"()V",
  );

  /// from: public void invokeZoomPicker()
  void invokeZoomPicker() {
    _id_invokeZoomPicker(this, const jni.jvoidType(), []);
  }

  static final _id_getHitTestResult = _class.instanceMethodId(
    r"getHitTestResult",
    r"()Landroid/webkit/WebView$HitTestResult;",
  );

  /// from: public android.webkit.WebView$HitTestResult getHitTestResult()
  /// The returned object must be released after use, by calling the [release] method.
  WebView_HitTestResult getHitTestResult() {
    return _id_getHitTestResult(this, const $WebView_HitTestResultType(), []);
  }

  static final _id_requestFocusNodeHref = _class.instanceMethodId(
    r"requestFocusNodeHref",
    r"(Landroid/os/Message;)V",
  );

  /// from: public void requestFocusNodeHref(android.os.Message message)
  void requestFocusNodeHref(
    jni.JObject message,
  ) {
    _id_requestFocusNodeHref(
        this, const jni.jvoidType(), [message.reference.pointer]);
  }

  static final _id_requestImageRef = _class.instanceMethodId(
    r"requestImageRef",
    r"(Landroid/os/Message;)V",
  );

  /// from: public void requestImageRef(android.os.Message message)
  void requestImageRef(
    jni.JObject message,
  ) {
    _id_requestImageRef(
        this, const jni.jvoidType(), [message.reference.pointer]);
  }

  static final _id_getUrl = _class.instanceMethodId(
    r"getUrl",
    r"()Ljava/lang/String;",
  );

  /// from: public java.lang.String getUrl()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getUrl() {
    return _id_getUrl(this, const jni.JStringType(), []);
  }

  static final _id_getOriginalUrl = _class.instanceMethodId(
    r"getOriginalUrl",
    r"()Ljava/lang/String;",
  );

  /// from: public java.lang.String getOriginalUrl()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getOriginalUrl() {
    return _id_getOriginalUrl(this, const jni.JStringType(), []);
  }

  static final _id_getTitle = _class.instanceMethodId(
    r"getTitle",
    r"()Ljava/lang/String;",
  );

  /// from: public java.lang.String getTitle()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getTitle() {
    return _id_getTitle(this, const jni.JStringType(), []);
  }

  static final _id_getFavicon = _class.instanceMethodId(
    r"getFavicon",
    r"()Landroid/graphics/Bitmap;",
  );

  /// from: public android.graphics.Bitmap getFavicon()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getFavicon() {
    return _id_getFavicon(this, const jni.JObjectType(), []);
  }

  static final _id_getProgress = _class.instanceMethodId(
    r"getProgress",
    r"()I",
  );

  /// from: public int getProgress()
  int getProgress() {
    return _id_getProgress(this, const jni.jintType(), []);
  }

  static final _id_getContentHeight = _class.instanceMethodId(
    r"getContentHeight",
    r"()I",
  );

  /// from: public int getContentHeight()
  int getContentHeight() {
    return _id_getContentHeight(this, const jni.jintType(), []);
  }

  static final _id_pauseTimers = _class.instanceMethodId(
    r"pauseTimers",
    r"()V",
  );

  /// from: public void pauseTimers()
  void pauseTimers() {
    _id_pauseTimers(this, const jni.jvoidType(), []);
  }

  static final _id_resumeTimers = _class.instanceMethodId(
    r"resumeTimers",
    r"()V",
  );

  /// from: public void resumeTimers()
  void resumeTimers() {
    _id_resumeTimers(this, const jni.jvoidType(), []);
  }

  static final _id_onPause = _class.instanceMethodId(
    r"onPause",
    r"()V",
  );

  /// from: public void onPause()
  void onPause() {
    _id_onPause(this, const jni.jvoidType(), []);
  }

  static final _id_onResume = _class.instanceMethodId(
    r"onResume",
    r"()V",
  );

  /// from: public void onResume()
  void onResume() {
    _id_onResume(this, const jni.jvoidType(), []);
  }

  static final _id_freeMemory = _class.instanceMethodId(
    r"freeMemory",
    r"()V",
  );

  /// from: public void freeMemory()
  void freeMemory() {
    _id_freeMemory(this, const jni.jvoidType(), []);
  }

  static final _id_clearCache = _class.instanceMethodId(
    r"clearCache",
    r"(Z)V",
  );

  /// from: public void clearCache(boolean z)
  void clearCache(
    bool z,
  ) {
    _id_clearCache(this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_clearFormData = _class.instanceMethodId(
    r"clearFormData",
    r"()V",
  );

  /// from: public void clearFormData()
  void clearFormData() {
    _id_clearFormData(this, const jni.jvoidType(), []);
  }

  static final _id_clearHistory = _class.instanceMethodId(
    r"clearHistory",
    r"()V",
  );

  /// from: public void clearHistory()
  void clearHistory() {
    _id_clearHistory(this, const jni.jvoidType(), []);
  }

  static final _id_clearSslPreferences = _class.instanceMethodId(
    r"clearSslPreferences",
    r"()V",
  );

  /// from: public void clearSslPreferences()
  void clearSslPreferences() {
    _id_clearSslPreferences(this, const jni.jvoidType(), []);
  }

  static final _id_clearClientCertPreferences = _class.staticMethodId(
    r"clearClientCertPreferences",
    r"(Ljava/lang/Runnable;)V",
  );

  /// from: static public void clearClientCertPreferences(java.lang.Runnable runnable)
  static void clearClientCertPreferences(
    jni.JObject runnable,
  ) {
    _id_clearClientCertPreferences(
        _class, const jni.jvoidType(), [runnable.reference.pointer]);
  }

  static final _id_startSafeBrowsing = _class.staticMethodId(
    r"startSafeBrowsing",
    r"(Landroid/content/Context;Landroid/webkit/ValueCallback;)V",
  );

  /// from: static public void startSafeBrowsing(android.content.Context context, android.webkit.ValueCallback valueCallback)
  static void startSafeBrowsing(
    jni.JObject context,
    jni.JObject valueCallback,
  ) {
    _id_startSafeBrowsing(_class, const jni.jvoidType(),
        [context.reference.pointer, valueCallback.reference.pointer]);
  }

  static final _id_setSafeBrowsingWhitelist = _class.staticMethodId(
    r"setSafeBrowsingWhitelist",
    r"(Ljava/util/List;Landroid/webkit/ValueCallback;)V",
  );

  /// from: static public void setSafeBrowsingWhitelist(java.util.List list, android.webkit.ValueCallback valueCallback)
  static void setSafeBrowsingWhitelist(
    jni.JList<jni.JString> list,
    jni.JObject valueCallback,
  ) {
    _id_setSafeBrowsingWhitelist(_class, const jni.jvoidType(),
        [list.reference.pointer, valueCallback.reference.pointer]);
  }

  static final _id_getSafeBrowsingPrivacyPolicyUrl = _class.staticMethodId(
    r"getSafeBrowsingPrivacyPolicyUrl",
    r"()Landroid/net/Uri;",
  );

  /// from: static public android.net.Uri getSafeBrowsingPrivacyPolicyUrl()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getSafeBrowsingPrivacyPolicyUrl() {
    return _id_getSafeBrowsingPrivacyPolicyUrl(
        _class, const jni.JObjectType(), []);
  }

  static final _id_copyBackForwardList = _class.instanceMethodId(
    r"copyBackForwardList",
    r"()Landroid/webkit/WebBackForwardList;",
  );

  /// from: public android.webkit.WebBackForwardList copyBackForwardList()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject copyBackForwardList() {
    return _id_copyBackForwardList(this, const jni.JObjectType(), []);
  }

  static final _id_setFindListener = _class.instanceMethodId(
    r"setFindListener",
    r"(Landroid/webkit/WebView$FindListener;)V",
  );

  /// from: public void setFindListener(android.webkit.WebView$FindListener findListener)
  void setFindListener(
    WebView_FindListener findListener,
  ) {
    _id_setFindListener(
        this, const jni.jvoidType(), [findListener.reference.pointer]);
  }

  static final _id_findNext = _class.instanceMethodId(
    r"findNext",
    r"(Z)V",
  );

  /// from: public void findNext(boolean z)
  void findNext(
    bool z,
  ) {
    _id_findNext(this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_findAll = _class.instanceMethodId(
    r"findAll",
    r"(Ljava/lang/String;)I",
  );

  /// from: public int findAll(java.lang.String string)
  int findAll(
    jni.JString string,
  ) {
    return _id_findAll(this, const jni.jintType(), [string.reference.pointer]);
  }

  static final _id_findAllAsync = _class.instanceMethodId(
    r"findAllAsync",
    r"(Ljava/lang/String;)V",
  );

  /// from: public void findAllAsync(java.lang.String string)
  void findAllAsync(
    jni.JString string,
  ) {
    _id_findAllAsync(this, const jni.jvoidType(), [string.reference.pointer]);
  }

  static final _id_showFindDialog = _class.instanceMethodId(
    r"showFindDialog",
    r"(Ljava/lang/String;Z)Z",
  );

  /// from: public boolean showFindDialog(java.lang.String string, boolean z)
  bool showFindDialog(
    jni.JString string,
    bool z,
  ) {
    return _id_showFindDialog(
        this, const jni.jbooleanType(), [string.reference.pointer, z ? 1 : 0]);
  }

  static final _id_findAddress = _class.staticMethodId(
    r"findAddress",
    r"(Ljava/lang/String;)Ljava/lang/String;",
  );

  /// from: static public java.lang.String findAddress(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString findAddress(
    jni.JString string,
  ) {
    return _id_findAddress(
        _class, const jni.JStringType(), [string.reference.pointer]);
  }

  static final _id_enableSlowWholeDocumentDraw = _class.staticMethodId(
    r"enableSlowWholeDocumentDraw",
    r"()V",
  );

  /// from: static public void enableSlowWholeDocumentDraw()
  static void enableSlowWholeDocumentDraw() {
    _id_enableSlowWholeDocumentDraw(_class, const jni.jvoidType(), []);
  }

  static final _id_clearMatches = _class.instanceMethodId(
    r"clearMatches",
    r"()V",
  );

  /// from: public void clearMatches()
  void clearMatches() {
    _id_clearMatches(this, const jni.jvoidType(), []);
  }

  static final _id_documentHasImages = _class.instanceMethodId(
    r"documentHasImages",
    r"(Landroid/os/Message;)V",
  );

  /// from: public void documentHasImages(android.os.Message message)
  void documentHasImages(
    jni.JObject message,
  ) {
    _id_documentHasImages(
        this, const jni.jvoidType(), [message.reference.pointer]);
  }

  static final _id_setWebViewClient = _class.instanceMethodId(
    r"setWebViewClient",
    r"(Landroid/webkit/WebViewClient;)V",
  );

  /// from: public void setWebViewClient(android.webkit.WebViewClient webViewClient)
  void setWebViewClient(
    jni.JObject webViewClient,
  ) {
    _id_setWebViewClient(
        this, const jni.jvoidType(), [webViewClient.reference.pointer]);
  }

  static final _id_getWebViewClient = _class.instanceMethodId(
    r"getWebViewClient",
    r"()Landroid/webkit/WebViewClient;",
  );

  /// from: public android.webkit.WebViewClient getWebViewClient()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getWebViewClient() {
    return _id_getWebViewClient(this, const jni.JObjectType(), []);
  }

  static final _id_getWebViewRenderProcess = _class.instanceMethodId(
    r"getWebViewRenderProcess",
    r"()Landroid/webkit/WebViewRenderProcess;",
  );

  /// from: public android.webkit.WebViewRenderProcess getWebViewRenderProcess()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getWebViewRenderProcess() {
    return _id_getWebViewRenderProcess(this, const jni.JObjectType(), []);
  }

  static final _id_setWebViewRenderProcessClient = _class.instanceMethodId(
    r"setWebViewRenderProcessClient",
    r"(Ljava/util/concurrent/Executor;Landroid/webkit/WebViewRenderProcessClient;)V",
  );

  /// from: public void setWebViewRenderProcessClient(java.util.concurrent.Executor executor, android.webkit.WebViewRenderProcessClient webViewRenderProcessClient)
  void setWebViewRenderProcessClient(
    jni.JObject executor,
    jni.JObject webViewRenderProcessClient,
  ) {
    _id_setWebViewRenderProcessClient(this, const jni.jvoidType(), [
      executor.reference.pointer,
      webViewRenderProcessClient.reference.pointer
    ]);
  }

  static final _id_setWebViewRenderProcessClient1 = _class.instanceMethodId(
    r"setWebViewRenderProcessClient",
    r"(Landroid/webkit/WebViewRenderProcessClient;)V",
  );

  /// from: public void setWebViewRenderProcessClient(android.webkit.WebViewRenderProcessClient webViewRenderProcessClient)
  void setWebViewRenderProcessClient1(
    jni.JObject webViewRenderProcessClient,
  ) {
    _id_setWebViewRenderProcessClient1(this, const jni.jvoidType(),
        [webViewRenderProcessClient.reference.pointer]);
  }

  static final _id_getWebViewRenderProcessClient = _class.instanceMethodId(
    r"getWebViewRenderProcessClient",
    r"()Landroid/webkit/WebViewRenderProcessClient;",
  );

  /// from: public android.webkit.WebViewRenderProcessClient getWebViewRenderProcessClient()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getWebViewRenderProcessClient() {
    return _id_getWebViewRenderProcessClient(this, const jni.JObjectType(), []);
  }

  static final _id_setDownloadListener = _class.instanceMethodId(
    r"setDownloadListener",
    r"(Landroid/webkit/DownloadListener;)V",
  );

  /// from: public void setDownloadListener(android.webkit.DownloadListener downloadListener)
  void setDownloadListener(
    jni.JObject downloadListener,
  ) {
    _id_setDownloadListener(
        this, const jni.jvoidType(), [downloadListener.reference.pointer]);
  }

  static final _id_setWebChromeClient = _class.instanceMethodId(
    r"setWebChromeClient",
    r"(Landroid/webkit/WebChromeClient;)V",
  );

  /// from: public void setWebChromeClient(android.webkit.WebChromeClient webChromeClient)
  void setWebChromeClient(
    jni.JObject webChromeClient,
  ) {
    _id_setWebChromeClient(
        this, const jni.jvoidType(), [webChromeClient.reference.pointer]);
  }

  static final _id_getWebChromeClient = _class.instanceMethodId(
    r"getWebChromeClient",
    r"()Landroid/webkit/WebChromeClient;",
  );

  /// from: public android.webkit.WebChromeClient getWebChromeClient()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getWebChromeClient() {
    return _id_getWebChromeClient(this, const jni.JObjectType(), []);
  }

  static final _id_setPictureListener = _class.instanceMethodId(
    r"setPictureListener",
    r"(Landroid/webkit/WebView$PictureListener;)V",
  );

  /// from: public void setPictureListener(android.webkit.WebView$PictureListener pictureListener)
  void setPictureListener(
    WebView_PictureListener pictureListener,
  ) {
    _id_setPictureListener(
        this, const jni.jvoidType(), [pictureListener.reference.pointer]);
  }

  static final _id_addJavascriptInterface = _class.instanceMethodId(
    r"addJavascriptInterface",
    r"(Ljava/lang/Object;Ljava/lang/String;)V",
  );

  /// from: public void addJavascriptInterface(java.lang.Object object, java.lang.String string)
  void addJavascriptInterface(
    jni.JObject object,
    jni.JString string,
  ) {
    _id_addJavascriptInterface(this, const jni.jvoidType(),
        [object.reference.pointer, string.reference.pointer]);
  }

  static final _id_removeJavascriptInterface = _class.instanceMethodId(
    r"removeJavascriptInterface",
    r"(Ljava/lang/String;)V",
  );

  /// from: public void removeJavascriptInterface(java.lang.String string)
  void removeJavascriptInterface(
    jni.JString string,
  ) {
    _id_removeJavascriptInterface(
        this, const jni.jvoidType(), [string.reference.pointer]);
  }

  static final _id_createWebMessageChannel = _class.instanceMethodId(
    r"createWebMessageChannel",
    r"()[Landroid/webkit/WebMessagePort;",
  );

  /// from: public android.webkit.WebMessagePort[] createWebMessageChannel()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> createWebMessageChannel() {
    return _id_createWebMessageChannel(
        this, const jni.JArrayType(jni.JObjectType()), []);
  }

  static final _id_postWebMessage = _class.instanceMethodId(
    r"postWebMessage",
    r"(Landroid/webkit/WebMessage;Landroid/net/Uri;)V",
  );

  /// from: public void postWebMessage(android.webkit.WebMessage webMessage, android.net.Uri uri)
  void postWebMessage(
    jni.JObject webMessage,
    jni.JObject uri,
  ) {
    _id_postWebMessage(this, const jni.jvoidType(),
        [webMessage.reference.pointer, uri.reference.pointer]);
  }

  static final _id_getSettings = _class.instanceMethodId(
    r"getSettings",
    r"()Landroid/webkit/WebSettings;",
  );

  /// from: public android.webkit.WebSettings getSettings()
  /// The returned object must be released after use, by calling the [release] method.
  WebSettings getSettings() {
    return _id_getSettings(this, const $WebSettingsType(), []);
  }

  static final _id_setWebContentsDebuggingEnabled = _class.staticMethodId(
    r"setWebContentsDebuggingEnabled",
    r"(Z)V",
  );

  /// from: static public void setWebContentsDebuggingEnabled(boolean z)
  static void setWebContentsDebuggingEnabled(
    bool z,
  ) {
    _id_setWebContentsDebuggingEnabled(
        _class, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_setDataDirectorySuffix = _class.staticMethodId(
    r"setDataDirectorySuffix",
    r"(Ljava/lang/String;)V",
  );

  /// from: static public void setDataDirectorySuffix(java.lang.String string)
  static void setDataDirectorySuffix(
    jni.JString string,
  ) {
    _id_setDataDirectorySuffix(
        _class, const jni.jvoidType(), [string.reference.pointer]);
  }

  static final _id_disableWebView = _class.staticMethodId(
    r"disableWebView",
    r"()V",
  );

  /// from: static public void disableWebView()
  static void disableWebView() {
    _id_disableWebView(_class, const jni.jvoidType(), []);
  }

  static final _id_onChildViewAdded = _class.instanceMethodId(
    r"onChildViewAdded",
    r"(Landroid/view/View;Landroid/view/View;)V",
  );

  /// from: public void onChildViewAdded(android.view.View view, android.view.View view1)
  void onChildViewAdded(
    jni.JObject view,
    jni.JObject view1,
  ) {
    _id_onChildViewAdded(this, const jni.jvoidType(),
        [view.reference.pointer, view1.reference.pointer]);
  }

  static final _id_onChildViewRemoved = _class.instanceMethodId(
    r"onChildViewRemoved",
    r"(Landroid/view/View;Landroid/view/View;)V",
  );

  /// from: public void onChildViewRemoved(android.view.View view, android.view.View view1)
  void onChildViewRemoved(
    jni.JObject view,
    jni.JObject view1,
  ) {
    _id_onChildViewRemoved(this, const jni.jvoidType(),
        [view.reference.pointer, view1.reference.pointer]);
  }

  static final _id_onGlobalFocusChanged = _class.instanceMethodId(
    r"onGlobalFocusChanged",
    r"(Landroid/view/View;Landroid/view/View;)V",
  );

  /// from: public void onGlobalFocusChanged(android.view.View view, android.view.View view1)
  void onGlobalFocusChanged(
    jni.JObject view,
    jni.JObject view1,
  ) {
    _id_onGlobalFocusChanged(this, const jni.jvoidType(),
        [view.reference.pointer, view1.reference.pointer]);
  }

  static final _id_setMapTrackballToArrowKeys = _class.instanceMethodId(
    r"setMapTrackballToArrowKeys",
    r"(Z)V",
  );

  /// from: public void setMapTrackballToArrowKeys(boolean z)
  void setMapTrackballToArrowKeys(
    bool z,
  ) {
    _id_setMapTrackballToArrowKeys(this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_flingScroll = _class.instanceMethodId(
    r"flingScroll",
    r"(II)V",
  );

  /// from: public void flingScroll(int i, int i1)
  void flingScroll(
    int i,
    int i1,
  ) {
    _id_flingScroll(
        this, const jni.jvoidType(), [jni.JValueInt(i), jni.JValueInt(i1)]);
  }

  static final _id_canZoomIn = _class.instanceMethodId(
    r"canZoomIn",
    r"()Z",
  );

  /// from: public boolean canZoomIn()
  bool canZoomIn() {
    return _id_canZoomIn(this, const jni.jbooleanType(), []);
  }

  static final _id_canZoomOut = _class.instanceMethodId(
    r"canZoomOut",
    r"()Z",
  );

  /// from: public boolean canZoomOut()
  bool canZoomOut() {
    return _id_canZoomOut(this, const jni.jbooleanType(), []);
  }

  static final _id_zoomBy = _class.instanceMethodId(
    r"zoomBy",
    r"(F)V",
  );

  /// from: public void zoomBy(float f)
  void zoomBy(
    double f,
  ) {
    _id_zoomBy(this, const jni.jvoidType(), [jni.JValueFloat(f)]);
  }

  static final _id_zoomIn = _class.instanceMethodId(
    r"zoomIn",
    r"()Z",
  );

  /// from: public boolean zoomIn()
  bool zoomIn() {
    return _id_zoomIn(this, const jni.jbooleanType(), []);
  }

  static final _id_zoomOut = _class.instanceMethodId(
    r"zoomOut",
    r"()Z",
  );

  /// from: public boolean zoomOut()
  bool zoomOut() {
    return _id_zoomOut(this, const jni.jbooleanType(), []);
  }

  static final _id_setRendererPriorityPolicy = _class.instanceMethodId(
    r"setRendererPriorityPolicy",
    r"(IZ)V",
  );

  /// from: public void setRendererPriorityPolicy(int i, boolean z)
  void setRendererPriorityPolicy(
    int i,
    bool z,
  ) {
    _id_setRendererPriorityPolicy(
        this, const jni.jvoidType(), [jni.JValueInt(i), z ? 1 : 0]);
  }

  static final _id_getRendererRequestedPriority = _class.instanceMethodId(
    r"getRendererRequestedPriority",
    r"()I",
  );

  /// from: public int getRendererRequestedPriority()
  int getRendererRequestedPriority() {
    return _id_getRendererRequestedPriority(this, const jni.jintType(), []);
  }

  static final _id_getRendererPriorityWaivedWhenNotVisible =
      _class.instanceMethodId(
    r"getRendererPriorityWaivedWhenNotVisible",
    r"()Z",
  );

  /// from: public boolean getRendererPriorityWaivedWhenNotVisible()
  bool getRendererPriorityWaivedWhenNotVisible() {
    return _id_getRendererPriorityWaivedWhenNotVisible(
        this, const jni.jbooleanType(), []);
  }

  static final _id_setTextClassifier = _class.instanceMethodId(
    r"setTextClassifier",
    r"(Landroid/view/textclassifier/TextClassifier;)V",
  );

  /// from: public void setTextClassifier(android.view.textclassifier.TextClassifier textClassifier)
  void setTextClassifier(
    jni.JObject textClassifier,
  ) {
    _id_setTextClassifier(
        this, const jni.jvoidType(), [textClassifier.reference.pointer]);
  }

  static final _id_getTextClassifier = _class.instanceMethodId(
    r"getTextClassifier",
    r"()Landroid/view/textclassifier/TextClassifier;",
  );

  /// from: public android.view.textclassifier.TextClassifier getTextClassifier()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getTextClassifier() {
    return _id_getTextClassifier(this, const jni.JObjectType(), []);
  }

  static final _id_getWebViewClassLoader = _class.staticMethodId(
    r"getWebViewClassLoader",
    r"()Ljava/lang/ClassLoader;",
  );

  /// from: static public java.lang.ClassLoader getWebViewClassLoader()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getWebViewClassLoader() {
    return _id_getWebViewClassLoader(_class, const jni.JObjectType(), []);
  }

  static final _id_getWebViewLooper = _class.instanceMethodId(
    r"getWebViewLooper",
    r"()Landroid/os/Looper;",
  );

  /// from: public android.os.Looper getWebViewLooper()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getWebViewLooper() {
    return _id_getWebViewLooper(this, const jni.JObjectType(), []);
  }

  static final _id_onAttachedToWindow = _class.instanceMethodId(
    r"onAttachedToWindow",
    r"()V",
  );

  /// from: protected void onAttachedToWindow()
  void onAttachedToWindow() {
    _id_onAttachedToWindow(this, const jni.jvoidType(), []);
  }

  static final _id_setLayoutParams = _class.instanceMethodId(
    r"setLayoutParams",
    r"(Landroid/view/ViewGroup$LayoutParams;)V",
  );

  /// from: public void setLayoutParams(android.view.ViewGroup$LayoutParams layoutParams)
  void setLayoutParams(
    jni.JObject layoutParams,
  ) {
    _id_setLayoutParams(
        this, const jni.jvoidType(), [layoutParams.reference.pointer]);
  }

  static final _id_setOverScrollMode = _class.instanceMethodId(
    r"setOverScrollMode",
    r"(I)V",
  );

  /// from: public void setOverScrollMode(int i)
  void setOverScrollMode(
    int i,
  ) {
    _id_setOverScrollMode(this, const jni.jvoidType(), [jni.JValueInt(i)]);
  }

  static final _id_setScrollBarStyle = _class.instanceMethodId(
    r"setScrollBarStyle",
    r"(I)V",
  );

  /// from: public void setScrollBarStyle(int i)
  void setScrollBarStyle(
    int i,
  ) {
    _id_setScrollBarStyle(this, const jni.jvoidType(), [jni.JValueInt(i)]);
  }

  static final _id_computeHorizontalScrollRange = _class.instanceMethodId(
    r"computeHorizontalScrollRange",
    r"()I",
  );

  /// from: protected int computeHorizontalScrollRange()
  int computeHorizontalScrollRange() {
    return _id_computeHorizontalScrollRange(this, const jni.jintType(), []);
  }

  static final _id_computeHorizontalScrollOffset = _class.instanceMethodId(
    r"computeHorizontalScrollOffset",
    r"()I",
  );

  /// from: protected int computeHorizontalScrollOffset()
  int computeHorizontalScrollOffset() {
    return _id_computeHorizontalScrollOffset(this, const jni.jintType(), []);
  }

  static final _id_computeVerticalScrollRange = _class.instanceMethodId(
    r"computeVerticalScrollRange",
    r"()I",
  );

  /// from: protected int computeVerticalScrollRange()
  int computeVerticalScrollRange() {
    return _id_computeVerticalScrollRange(this, const jni.jintType(), []);
  }

  static final _id_computeVerticalScrollOffset = _class.instanceMethodId(
    r"computeVerticalScrollOffset",
    r"()I",
  );

  /// from: protected int computeVerticalScrollOffset()
  int computeVerticalScrollOffset() {
    return _id_computeVerticalScrollOffset(this, const jni.jintType(), []);
  }

  static final _id_computeVerticalScrollExtent = _class.instanceMethodId(
    r"computeVerticalScrollExtent",
    r"()I",
  );

  /// from: protected int computeVerticalScrollExtent()
  int computeVerticalScrollExtent() {
    return _id_computeVerticalScrollExtent(this, const jni.jintType(), []);
  }

  static final _id_computeScroll = _class.instanceMethodId(
    r"computeScroll",
    r"()V",
  );

  /// from: public void computeScroll()
  void computeScroll() {
    _id_computeScroll(this, const jni.jvoidType(), []);
  }

  static final _id_onHoverEvent = _class.instanceMethodId(
    r"onHoverEvent",
    r"(Landroid/view/MotionEvent;)Z",
  );

  /// from: public boolean onHoverEvent(android.view.MotionEvent motionEvent)
  bool onHoverEvent(
    jni.JObject motionEvent,
  ) {
    return _id_onHoverEvent(
        this, const jni.jbooleanType(), [motionEvent.reference.pointer]);
  }

  static final _id_onTouchEvent = _class.instanceMethodId(
    r"onTouchEvent",
    r"(Landroid/view/MotionEvent;)Z",
  );

  /// from: public boolean onTouchEvent(android.view.MotionEvent motionEvent)
  bool onTouchEvent(
    jni.JObject motionEvent,
  ) {
    return _id_onTouchEvent(
        this, const jni.jbooleanType(), [motionEvent.reference.pointer]);
  }

  static final _id_onGenericMotionEvent = _class.instanceMethodId(
    r"onGenericMotionEvent",
    r"(Landroid/view/MotionEvent;)Z",
  );

  /// from: public boolean onGenericMotionEvent(android.view.MotionEvent motionEvent)
  bool onGenericMotionEvent(
    jni.JObject motionEvent,
  ) {
    return _id_onGenericMotionEvent(
        this, const jni.jbooleanType(), [motionEvent.reference.pointer]);
  }

  static final _id_onTrackballEvent = _class.instanceMethodId(
    r"onTrackballEvent",
    r"(Landroid/view/MotionEvent;)Z",
  );

  /// from: public boolean onTrackballEvent(android.view.MotionEvent motionEvent)
  bool onTrackballEvent(
    jni.JObject motionEvent,
  ) {
    return _id_onTrackballEvent(
        this, const jni.jbooleanType(), [motionEvent.reference.pointer]);
  }

  static final _id_onKeyDown = _class.instanceMethodId(
    r"onKeyDown",
    r"(ILandroid/view/KeyEvent;)Z",
  );

  /// from: public boolean onKeyDown(int i, android.view.KeyEvent keyEvent)
  bool onKeyDown(
    int i,
    jni.JObject keyEvent,
  ) {
    return _id_onKeyDown(this, const jni.jbooleanType(),
        [jni.JValueInt(i), keyEvent.reference.pointer]);
  }

  static final _id_onKeyUp = _class.instanceMethodId(
    r"onKeyUp",
    r"(ILandroid/view/KeyEvent;)Z",
  );

  /// from: public boolean onKeyUp(int i, android.view.KeyEvent keyEvent)
  bool onKeyUp(
    int i,
    jni.JObject keyEvent,
  ) {
    return _id_onKeyUp(this, const jni.jbooleanType(),
        [jni.JValueInt(i), keyEvent.reference.pointer]);
  }

  static final _id_onKeyMultiple = _class.instanceMethodId(
    r"onKeyMultiple",
    r"(IILandroid/view/KeyEvent;)Z",
  );

  /// from: public boolean onKeyMultiple(int i, int i1, android.view.KeyEvent keyEvent)
  bool onKeyMultiple(
    int i,
    int i1,
    jni.JObject keyEvent,
  ) {
    return _id_onKeyMultiple(this, const jni.jbooleanType(),
        [jni.JValueInt(i), jni.JValueInt(i1), keyEvent.reference.pointer]);
  }

  static final _id_getAccessibilityNodeProvider = _class.instanceMethodId(
    r"getAccessibilityNodeProvider",
    r"()Landroid/view/accessibility/AccessibilityNodeProvider;",
  );

  /// from: public android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getAccessibilityNodeProvider() {
    return _id_getAccessibilityNodeProvider(this, const jni.JObjectType(), []);
  }

  static final _id_shouldDelayChildPressedState = _class.instanceMethodId(
    r"shouldDelayChildPressedState",
    r"()Z",
  );

  /// from: public boolean shouldDelayChildPressedState()
  bool shouldDelayChildPressedState() {
    return _id_shouldDelayChildPressedState(this, const jni.jbooleanType(), []);
  }

  static final _id_getAccessibilityClassName = _class.instanceMethodId(
    r"getAccessibilityClassName",
    r"()Ljava/lang/CharSequence;",
  );

  /// from: public java.lang.CharSequence getAccessibilityClassName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getAccessibilityClassName() {
    return _id_getAccessibilityClassName(this, const jni.JObjectType(), []);
  }

  static final _id_onProvideVirtualStructure = _class.instanceMethodId(
    r"onProvideVirtualStructure",
    r"(Landroid/view/ViewStructure;)V",
  );

  /// from: public void onProvideVirtualStructure(android.view.ViewStructure viewStructure)
  void onProvideVirtualStructure(
    jni.JObject viewStructure,
  ) {
    _id_onProvideVirtualStructure(
        this, const jni.jvoidType(), [viewStructure.reference.pointer]);
  }

  static final _id_onProvideAutofillVirtualStructure = _class.instanceMethodId(
    r"onProvideAutofillVirtualStructure",
    r"(Landroid/view/ViewStructure;I)V",
  );

  /// from: public void onProvideAutofillVirtualStructure(android.view.ViewStructure viewStructure, int i)
  void onProvideAutofillVirtualStructure(
    jni.JObject viewStructure,
    int i,
  ) {
    _id_onProvideAutofillVirtualStructure(this, const jni.jvoidType(),
        [viewStructure.reference.pointer, jni.JValueInt(i)]);
  }

  static final _id_onProvideContentCaptureStructure = _class.instanceMethodId(
    r"onProvideContentCaptureStructure",
    r"(Landroid/view/ViewStructure;I)V",
  );

  /// from: public void onProvideContentCaptureStructure(android.view.ViewStructure viewStructure, int i)
  void onProvideContentCaptureStructure(
    jni.JObject viewStructure,
    int i,
  ) {
    _id_onProvideContentCaptureStructure(this, const jni.jvoidType(),
        [viewStructure.reference.pointer, jni.JValueInt(i)]);
  }

  static final _id_autofill = _class.instanceMethodId(
    r"autofill",
    r"(Landroid/util/SparseArray;)V",
  );

  /// from: public void autofill(android.util.SparseArray sparseArray)
  void autofill(
    jni.JObject sparseArray,
  ) {
    _id_autofill(this, const jni.jvoidType(), [sparseArray.reference.pointer]);
  }

  static final _id_isVisibleToUserForAutofill = _class.instanceMethodId(
    r"isVisibleToUserForAutofill",
    r"(I)Z",
  );

  /// from: public boolean isVisibleToUserForAutofill(int i)
  bool isVisibleToUserForAutofill(
    int i,
  ) {
    return _id_isVisibleToUserForAutofill(
        this, const jni.jbooleanType(), [jni.JValueInt(i)]);
  }

  static final _id_onCreateVirtualViewTranslationRequests =
      _class.instanceMethodId(
    r"onCreateVirtualViewTranslationRequests",
    r"([J[ILjava/util/function/Consumer;)V",
  );

  /// from: public void onCreateVirtualViewTranslationRequests(java.lang.Object[] js, java.lang.Object[] is, java.util.function.Consumer consumer)
  void onCreateVirtualViewTranslationRequests(
    jni.JArray<jni.jlong> js,
    jni.JArray<jni.jint> is0,
    Consumer<jni.JObject> consumer,
  ) {
    _id_onCreateVirtualViewTranslationRequests(this, const jni.jvoidType(), [
      js.reference.pointer,
      is0.reference.pointer,
      consumer.reference.pointer
    ]);
  }

  static final _id_dispatchCreateViewTranslationRequest =
      _class.instanceMethodId(
    r"dispatchCreateViewTranslationRequest",
    r"(Ljava/util/Map;[ILandroid/view/translation/TranslationCapability;Ljava/util/List;)V",
  );

  /// from: public void dispatchCreateViewTranslationRequest(java.util.Map map, java.lang.Object[] is, android.view.translation.TranslationCapability translationCapability, java.util.List list)
  void dispatchCreateViewTranslationRequest(
    jni.JMap<jni.JObject, jni.JArray<jni.jlong>> map,
    jni.JArray<jni.jint> is0,
    jni.JObject translationCapability,
    jni.JList<jni.JObject> list,
  ) {
    _id_dispatchCreateViewTranslationRequest(this, const jni.jvoidType(), [
      map.reference.pointer,
      is0.reference.pointer,
      translationCapability.reference.pointer,
      list.reference.pointer
    ]);
  }

  static final _id_onVirtualViewTranslationResponses = _class.instanceMethodId(
    r"onVirtualViewTranslationResponses",
    r"(Landroid/util/LongSparseArray;)V",
  );

  /// from: public void onVirtualViewTranslationResponses(android.util.LongSparseArray longSparseArray)
  void onVirtualViewTranslationResponses(
    jni.JObject longSparseArray,
  ) {
    _id_onVirtualViewTranslationResponses(
        this, const jni.jvoidType(), [longSparseArray.reference.pointer]);
  }

  static final _id_onOverScrolled = _class.instanceMethodId(
    r"onOverScrolled",
    r"(IIZZ)V",
  );

  /// from: protected void onOverScrolled(int i, int i1, boolean z, boolean z1)
  void onOverScrolled(
    int i,
    int i1,
    bool z,
    bool z1,
  ) {
    _id_onOverScrolled(this, const jni.jvoidType(),
        [jni.JValueInt(i), jni.JValueInt(i1), z ? 1 : 0, z1 ? 1 : 0]);
  }

  static final _id_onWindowVisibilityChanged = _class.instanceMethodId(
    r"onWindowVisibilityChanged",
    r"(I)V",
  );

  /// from: protected void onWindowVisibilityChanged(int i)
  void onWindowVisibilityChanged(
    int i,
  ) {
    _id_onWindowVisibilityChanged(
        this, const jni.jvoidType(), [jni.JValueInt(i)]);
  }

  static final _id_onDraw = _class.instanceMethodId(
    r"onDraw",
    r"(Landroid/graphics/Canvas;)V",
  );

  /// from: protected void onDraw(android.graphics.Canvas canvas)
  void onDraw(
    jni.JObject canvas,
  ) {
    _id_onDraw(this, const jni.jvoidType(), [canvas.reference.pointer]);
  }

  static final _id_performLongClick = _class.instanceMethodId(
    r"performLongClick",
    r"()Z",
  );

  /// from: public boolean performLongClick()
  bool performLongClick() {
    return _id_performLongClick(this, const jni.jbooleanType(), []);
  }

  static final _id_onConfigurationChanged = _class.instanceMethodId(
    r"onConfigurationChanged",
    r"(Landroid/content/res/Configuration;)V",
  );

  /// from: protected void onConfigurationChanged(android.content.res.Configuration configuration)
  void onConfigurationChanged(
    jni.JObject configuration,
  ) {
    _id_onConfigurationChanged(
        this, const jni.jvoidType(), [configuration.reference.pointer]);
  }

  static final _id_onCreateInputConnection = _class.instanceMethodId(
    r"onCreateInputConnection",
    r"(Landroid/view/inputmethod/EditorInfo;)Landroid/view/inputmethod/InputConnection;",
  );

  /// from: public android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo editorInfo)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreateInputConnection(
    jni.JObject editorInfo,
  ) {
    return _id_onCreateInputConnection(
        this, const jni.JObjectType(), [editorInfo.reference.pointer]);
  }

  static final _id_onDragEvent = _class.instanceMethodId(
    r"onDragEvent",
    r"(Landroid/view/DragEvent;)Z",
  );

  /// from: public boolean onDragEvent(android.view.DragEvent dragEvent)
  bool onDragEvent(
    jni.JObject dragEvent,
  ) {
    return _id_onDragEvent(
        this, const jni.jbooleanType(), [dragEvent.reference.pointer]);
  }

  static final _id_onVisibilityChanged = _class.instanceMethodId(
    r"onVisibilityChanged",
    r"(Landroid/view/View;I)V",
  );

  /// from: protected void onVisibilityChanged(android.view.View view, int i)
  void onVisibilityChanged(
    jni.JObject view,
    int i,
  ) {
    _id_onVisibilityChanged(this, const jni.jvoidType(),
        [view.reference.pointer, jni.JValueInt(i)]);
  }

  static final _id_onWindowFocusChanged = _class.instanceMethodId(
    r"onWindowFocusChanged",
    r"(Z)V",
  );

  /// from: public void onWindowFocusChanged(boolean z)
  void onWindowFocusChanged(
    bool z,
  ) {
    _id_onWindowFocusChanged(this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_onFocusChanged = _class.instanceMethodId(
    r"onFocusChanged",
    r"(ZILandroid/graphics/Rect;)V",
  );

  /// from: protected void onFocusChanged(boolean z, int i, android.graphics.Rect rect)
  void onFocusChanged(
    bool z,
    int i,
    jni.JObject rect,
  ) {
    _id_onFocusChanged(this, const jni.jvoidType(),
        [z ? 1 : 0, jni.JValueInt(i), rect.reference.pointer]);
  }

  static final _id_onSizeChanged = _class.instanceMethodId(
    r"onSizeChanged",
    r"(IIII)V",
  );

  /// from: protected void onSizeChanged(int i, int i1, int i2, int i3)
  void onSizeChanged(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    _id_onSizeChanged(this, const jni.jvoidType(), [
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueInt(i2),
      jni.JValueInt(i3)
    ]);
  }

  static final _id_onScrollChanged = _class.instanceMethodId(
    r"onScrollChanged",
    r"(IIII)V",
  );

  /// from: protected void onScrollChanged(int i, int i1, int i2, int i3)
  void onScrollChanged(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    _id_onScrollChanged(this, const jni.jvoidType(), [
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueInt(i2),
      jni.JValueInt(i3)
    ]);
  }

  static final _id_dispatchKeyEvent = _class.instanceMethodId(
    r"dispatchKeyEvent",
    r"(Landroid/view/KeyEvent;)Z",
  );

  /// from: public boolean dispatchKeyEvent(android.view.KeyEvent keyEvent)
  bool dispatchKeyEvent(
    jni.JObject keyEvent,
  ) {
    return _id_dispatchKeyEvent(
        this, const jni.jbooleanType(), [keyEvent.reference.pointer]);
  }

  static final _id_requestFocus = _class.instanceMethodId(
    r"requestFocus",
    r"(ILandroid/graphics/Rect;)Z",
  );

  /// from: public boolean requestFocus(int i, android.graphics.Rect rect)
  bool requestFocus(
    int i,
    jni.JObject rect,
  ) {
    return _id_requestFocus(this, const jni.jbooleanType(),
        [jni.JValueInt(i), rect.reference.pointer]);
  }

  static final _id_onMeasure = _class.instanceMethodId(
    r"onMeasure",
    r"(II)V",
  );

  /// from: protected void onMeasure(int i, int i1)
  void onMeasure(
    int i,
    int i1,
  ) {
    _id_onMeasure(
        this, const jni.jvoidType(), [jni.JValueInt(i), jni.JValueInt(i1)]);
  }

  static final _id_requestChildRectangleOnScreen = _class.instanceMethodId(
    r"requestChildRectangleOnScreen",
    r"(Landroid/view/View;Landroid/graphics/Rect;Z)Z",
  );

  /// from: public boolean requestChildRectangleOnScreen(android.view.View view, android.graphics.Rect rect, boolean z)
  bool requestChildRectangleOnScreen(
    jni.JObject view,
    jni.JObject rect,
    bool z,
  ) {
    return _id_requestChildRectangleOnScreen(this, const jni.jbooleanType(),
        [view.reference.pointer, rect.reference.pointer, z ? 1 : 0]);
  }

  static final _id_setBackgroundColor = _class.instanceMethodId(
    r"setBackgroundColor",
    r"(I)V",
  );

  /// from: public void setBackgroundColor(int i)
  void setBackgroundColor(
    int i,
  ) {
    _id_setBackgroundColor(this, const jni.jvoidType(), [jni.JValueInt(i)]);
  }

  static final _id_setLayerType = _class.instanceMethodId(
    r"setLayerType",
    r"(ILandroid/graphics/Paint;)V",
  );

  /// from: public void setLayerType(int i, android.graphics.Paint paint)
  void setLayerType(
    int i,
    jni.JObject paint,
  ) {
    _id_setLayerType(this, const jni.jvoidType(),
        [jni.JValueInt(i), paint.reference.pointer]);
  }

  static final _id_dispatchDraw = _class.instanceMethodId(
    r"dispatchDraw",
    r"(Landroid/graphics/Canvas;)V",
  );

  /// from: protected void dispatchDraw(android.graphics.Canvas canvas)
  void dispatchDraw(
    jni.JObject canvas,
  ) {
    _id_dispatchDraw(this, const jni.jvoidType(), [canvas.reference.pointer]);
  }

  static final _id_onStartTemporaryDetach = _class.instanceMethodId(
    r"onStartTemporaryDetach",
    r"()V",
  );

  /// from: public void onStartTemporaryDetach()
  void onStartTemporaryDetach() {
    _id_onStartTemporaryDetach(this, const jni.jvoidType(), []);
  }

  static final _id_onFinishTemporaryDetach = _class.instanceMethodId(
    r"onFinishTemporaryDetach",
    r"()V",
  );

  /// from: public void onFinishTemporaryDetach()
  void onFinishTemporaryDetach() {
    _id_onFinishTemporaryDetach(this, const jni.jvoidType(), []);
  }

  static final _id_getHandler = _class.instanceMethodId(
    r"getHandler",
    r"()Landroid/os/Handler;",
  );

  /// from: public android.os.Handler getHandler()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getHandler() {
    return _id_getHandler(this, const jni.JObjectType(), []);
  }

  static final _id_findFocus = _class.instanceMethodId(
    r"findFocus",
    r"()Landroid/view/View;",
  );

  /// from: public android.view.View findFocus()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject findFocus() {
    return _id_findFocus(this, const jni.JObjectType(), []);
  }

  static final _id_getCurrentWebViewPackage = _class.staticMethodId(
    r"getCurrentWebViewPackage",
    r"()Landroid/content/pm/PackageInfo;",
  );

  /// from: static public android.content.pm.PackageInfo getCurrentWebViewPackage()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject getCurrentWebViewPackage() {
    return _id_getCurrentWebViewPackage(_class, const jni.JObjectType(), []);
  }

  static final _id_onCheckIsTextEditor = _class.instanceMethodId(
    r"onCheckIsTextEditor",
    r"()Z",
  );

  /// from: public boolean onCheckIsTextEditor()
  bool onCheckIsTextEditor() {
    return _id_onCheckIsTextEditor(this, const jni.jbooleanType(), []);
  }

  static final _id_onApplyWindowInsets = _class.instanceMethodId(
    r"onApplyWindowInsets",
    r"(Landroid/view/WindowInsets;)Landroid/view/WindowInsets;",
  );

  /// from: public android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets windowInsets)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onApplyWindowInsets(
    jni.JObject windowInsets,
  ) {
    return _id_onApplyWindowInsets(
        this, const jni.JObjectType(), [windowInsets.reference.pointer]);
  }
}

final class $WebViewType extends jni.JObjType<WebView> {
  const $WebViewType();

  @override
  String get signature => r"Landroid/webkit/WebView;";

  @override
  WebView fromReference(jni.JReference reference) =>
      WebView.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($WebViewType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebViewType) && other is $WebViewType;
  }
}

/// from: android.webkit.WebSettings$LayoutAlgorithm
class WebSettings_LayoutAlgorithm extends jni.JObject {
  @override
  late final jni.JObjType<WebSettings_LayoutAlgorithm> $type = type;

  WebSettings_LayoutAlgorithm.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/webkit/WebSettings$LayoutAlgorithm");

  /// The type which includes information such as the signature of this class.
  static const type = $WebSettings_LayoutAlgorithmType();
  static final _id_NORMAL = _class.staticFieldId(
    r"NORMAL",
    r"Landroid/webkit/WebSettings$LayoutAlgorithm;",
  );

  /// from: static public final android.webkit.WebSettings$LayoutAlgorithm NORMAL
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_LayoutAlgorithm get NORMAL =>
      _id_NORMAL.get(_class, const $WebSettings_LayoutAlgorithmType());

  static final _id_SINGLE_COLUMN = _class.staticFieldId(
    r"SINGLE_COLUMN",
    r"Landroid/webkit/WebSettings$LayoutAlgorithm;",
  );

  /// from: static public final android.webkit.WebSettings$LayoutAlgorithm SINGLE_COLUMN
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_LayoutAlgorithm get SINGLE_COLUMN =>
      _id_SINGLE_COLUMN.get(_class, const $WebSettings_LayoutAlgorithmType());

  static final _id_NARROW_COLUMNS = _class.staticFieldId(
    r"NARROW_COLUMNS",
    r"Landroid/webkit/WebSettings$LayoutAlgorithm;",
  );

  /// from: static public final android.webkit.WebSettings$LayoutAlgorithm NARROW_COLUMNS
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_LayoutAlgorithm get NARROW_COLUMNS =>
      _id_NARROW_COLUMNS.get(_class, const $WebSettings_LayoutAlgorithmType());

  static final _id_TEXT_AUTOSIZING = _class.staticFieldId(
    r"TEXT_AUTOSIZING",
    r"Landroid/webkit/WebSettings$LayoutAlgorithm;",
  );

  /// from: static public final android.webkit.WebSettings$LayoutAlgorithm TEXT_AUTOSIZING
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_LayoutAlgorithm get TEXT_AUTOSIZING =>
      _id_TEXT_AUTOSIZING.get(_class, const $WebSettings_LayoutAlgorithmType());

  static final _id_values = _class.staticMethodId(
    r"values",
    r"()[Landroid/webkit/WebSettings$LayoutAlgorithm;",
  );

  /// from: static public android.webkit.WebSettings$LayoutAlgorithm[] values()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JArray<WebSettings_LayoutAlgorithm> values() {
    return _id_values(
        _class, const jni.JArrayType($WebSettings_LayoutAlgorithmType()), []);
  }

  static final _id_valueOf = _class.staticMethodId(
    r"valueOf",
    r"(Ljava/lang/String;)Landroid/webkit/WebSettings$LayoutAlgorithm;",
  );

  /// from: static public android.webkit.WebSettings$LayoutAlgorithm valueOf(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_LayoutAlgorithm valueOf(
    jni.JString string,
  ) {
    return _id_valueOf(_class, const $WebSettings_LayoutAlgorithmType(),
        [string.reference.pointer]);
  }
}

final class $WebSettings_LayoutAlgorithmType
    extends jni.JObjType<WebSettings_LayoutAlgorithm> {
  const $WebSettings_LayoutAlgorithmType();

  @override
  String get signature => r"Landroid/webkit/WebSettings$LayoutAlgorithm;";

  @override
  WebSettings_LayoutAlgorithm fromReference(jni.JReference reference) =>
      WebSettings_LayoutAlgorithm.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($WebSettings_LayoutAlgorithmType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebSettings_LayoutAlgorithmType) &&
        other is $WebSettings_LayoutAlgorithmType;
  }
}

/// from: android.webkit.WebSettings$PluginState
class WebSettings_PluginState extends jni.JObject {
  @override
  late final jni.JObjType<WebSettings_PluginState> $type = type;

  WebSettings_PluginState.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/webkit/WebSettings$PluginState");

  /// The type which includes information such as the signature of this class.
  static const type = $WebSettings_PluginStateType();
  static final _id_ON = _class.staticFieldId(
    r"ON",
    r"Landroid/webkit/WebSettings$PluginState;",
  );

  /// from: static public final android.webkit.WebSettings$PluginState ON
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_PluginState get ON =>
      _id_ON.get(_class, const $WebSettings_PluginStateType());

  static final _id_ON_DEMAND = _class.staticFieldId(
    r"ON_DEMAND",
    r"Landroid/webkit/WebSettings$PluginState;",
  );

  /// from: static public final android.webkit.WebSettings$PluginState ON_DEMAND
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_PluginState get ON_DEMAND =>
      _id_ON_DEMAND.get(_class, const $WebSettings_PluginStateType());

  static final _id_OFF = _class.staticFieldId(
    r"OFF",
    r"Landroid/webkit/WebSettings$PluginState;",
  );

  /// from: static public final android.webkit.WebSettings$PluginState OFF
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_PluginState get OFF =>
      _id_OFF.get(_class, const $WebSettings_PluginStateType());

  static final _id_values = _class.staticMethodId(
    r"values",
    r"()[Landroid/webkit/WebSettings$PluginState;",
  );

  /// from: static public android.webkit.WebSettings$PluginState[] values()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JArray<WebSettings_PluginState> values() {
    return _id_values(
        _class, const jni.JArrayType($WebSettings_PluginStateType()), []);
  }

  static final _id_valueOf = _class.staticMethodId(
    r"valueOf",
    r"(Ljava/lang/String;)Landroid/webkit/WebSettings$PluginState;",
  );

  /// from: static public android.webkit.WebSettings$PluginState valueOf(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_PluginState valueOf(
    jni.JString string,
  ) {
    return _id_valueOf(_class, const $WebSettings_PluginStateType(),
        [string.reference.pointer]);
  }
}

final class $WebSettings_PluginStateType
    extends jni.JObjType<WebSettings_PluginState> {
  const $WebSettings_PluginStateType();

  @override
  String get signature => r"Landroid/webkit/WebSettings$PluginState;";

  @override
  WebSettings_PluginState fromReference(jni.JReference reference) =>
      WebSettings_PluginState.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($WebSettings_PluginStateType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebSettings_PluginStateType) &&
        other is $WebSettings_PluginStateType;
  }
}

/// from: android.webkit.WebSettings$RenderPriority
class WebSettings_RenderPriority extends jni.JObject {
  @override
  late final jni.JObjType<WebSettings_RenderPriority> $type = type;

  WebSettings_RenderPriority.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/webkit/WebSettings$RenderPriority");

  /// The type which includes information such as the signature of this class.
  static const type = $WebSettings_RenderPriorityType();
  static final _id_NORMAL = _class.staticFieldId(
    r"NORMAL",
    r"Landroid/webkit/WebSettings$RenderPriority;",
  );

  /// from: static public final android.webkit.WebSettings$RenderPriority NORMAL
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_RenderPriority get NORMAL =>
      _id_NORMAL.get(_class, const $WebSettings_RenderPriorityType());

  static final _id_HIGH = _class.staticFieldId(
    r"HIGH",
    r"Landroid/webkit/WebSettings$RenderPriority;",
  );

  /// from: static public final android.webkit.WebSettings$RenderPriority HIGH
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_RenderPriority get HIGH =>
      _id_HIGH.get(_class, const $WebSettings_RenderPriorityType());

  static final _id_LOW = _class.staticFieldId(
    r"LOW",
    r"Landroid/webkit/WebSettings$RenderPriority;",
  );

  /// from: static public final android.webkit.WebSettings$RenderPriority LOW
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_RenderPriority get LOW =>
      _id_LOW.get(_class, const $WebSettings_RenderPriorityType());

  static final _id_values = _class.staticMethodId(
    r"values",
    r"()[Landroid/webkit/WebSettings$RenderPriority;",
  );

  /// from: static public android.webkit.WebSettings$RenderPriority[] values()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JArray<WebSettings_RenderPriority> values() {
    return _id_values(
        _class, const jni.JArrayType($WebSettings_RenderPriorityType()), []);
  }

  static final _id_valueOf = _class.staticMethodId(
    r"valueOf",
    r"(Ljava/lang/String;)Landroid/webkit/WebSettings$RenderPriority;",
  );

  /// from: static public android.webkit.WebSettings$RenderPriority valueOf(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_RenderPriority valueOf(
    jni.JString string,
  ) {
    return _id_valueOf(_class, const $WebSettings_RenderPriorityType(),
        [string.reference.pointer]);
  }
}

final class $WebSettings_RenderPriorityType
    extends jni.JObjType<WebSettings_RenderPriority> {
  const $WebSettings_RenderPriorityType();

  @override
  String get signature => r"Landroid/webkit/WebSettings$RenderPriority;";

  @override
  WebSettings_RenderPriority fromReference(jni.JReference reference) =>
      WebSettings_RenderPriority.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($WebSettings_RenderPriorityType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebSettings_RenderPriorityType) &&
        other is $WebSettings_RenderPriorityType;
  }
}

/// from: android.webkit.WebSettings$TextSize
class WebSettings_TextSize extends jni.JObject {
  @override
  late final jni.JObjType<WebSettings_TextSize> $type = type;

  WebSettings_TextSize.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/webkit/WebSettings$TextSize");

  /// The type which includes information such as the signature of this class.
  static const type = $WebSettings_TextSizeType();
  static final _id_SMALLEST = _class.staticFieldId(
    r"SMALLEST",
    r"Landroid/webkit/WebSettings$TextSize;",
  );

  /// from: static public final android.webkit.WebSettings$TextSize SMALLEST
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_TextSize get SMALLEST =>
      _id_SMALLEST.get(_class, const $WebSettings_TextSizeType());

  static final _id_SMALLER = _class.staticFieldId(
    r"SMALLER",
    r"Landroid/webkit/WebSettings$TextSize;",
  );

  /// from: static public final android.webkit.WebSettings$TextSize SMALLER
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_TextSize get SMALLER =>
      _id_SMALLER.get(_class, const $WebSettings_TextSizeType());

  static final _id_NORMAL = _class.staticFieldId(
    r"NORMAL",
    r"Landroid/webkit/WebSettings$TextSize;",
  );

  /// from: static public final android.webkit.WebSettings$TextSize NORMAL
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_TextSize get NORMAL =>
      _id_NORMAL.get(_class, const $WebSettings_TextSizeType());

  static final _id_LARGER = _class.staticFieldId(
    r"LARGER",
    r"Landroid/webkit/WebSettings$TextSize;",
  );

  /// from: static public final android.webkit.WebSettings$TextSize LARGER
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_TextSize get LARGER =>
      _id_LARGER.get(_class, const $WebSettings_TextSizeType());

  static final _id_LARGEST = _class.staticFieldId(
    r"LARGEST",
    r"Landroid/webkit/WebSettings$TextSize;",
  );

  /// from: static public final android.webkit.WebSettings$TextSize LARGEST
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_TextSize get LARGEST =>
      _id_LARGEST.get(_class, const $WebSettings_TextSizeType());

  static final _id_values = _class.staticMethodId(
    r"values",
    r"()[Landroid/webkit/WebSettings$TextSize;",
  );

  /// from: static public android.webkit.WebSettings$TextSize[] values()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JArray<WebSettings_TextSize> values() {
    return _id_values(
        _class, const jni.JArrayType($WebSettings_TextSizeType()), []);
  }

  static final _id_valueOf = _class.staticMethodId(
    r"valueOf",
    r"(Ljava/lang/String;)Landroid/webkit/WebSettings$TextSize;",
  );

  /// from: static public android.webkit.WebSettings$TextSize valueOf(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_TextSize valueOf(
    jni.JString string,
  ) {
    return _id_valueOf(
        _class, const $WebSettings_TextSizeType(), [string.reference.pointer]);
  }
}

final class $WebSettings_TextSizeType
    extends jni.JObjType<WebSettings_TextSize> {
  const $WebSettings_TextSizeType();

  @override
  String get signature => r"Landroid/webkit/WebSettings$TextSize;";

  @override
  WebSettings_TextSize fromReference(jni.JReference reference) =>
      WebSettings_TextSize.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($WebSettings_TextSizeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebSettings_TextSizeType) &&
        other is $WebSettings_TextSizeType;
  }
}

/// from: android.webkit.WebSettings$ZoomDensity
class WebSettings_ZoomDensity extends jni.JObject {
  @override
  late final jni.JObjType<WebSettings_ZoomDensity> $type = type;

  WebSettings_ZoomDensity.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/webkit/WebSettings$ZoomDensity");

  /// The type which includes information such as the signature of this class.
  static const type = $WebSettings_ZoomDensityType();
  static final _id_FAR = _class.staticFieldId(
    r"FAR",
    r"Landroid/webkit/WebSettings$ZoomDensity;",
  );

  /// from: static public final android.webkit.WebSettings$ZoomDensity FAR
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_ZoomDensity get FAR =>
      _id_FAR.get(_class, const $WebSettings_ZoomDensityType());

  static final _id_MEDIUM = _class.staticFieldId(
    r"MEDIUM",
    r"Landroid/webkit/WebSettings$ZoomDensity;",
  );

  /// from: static public final android.webkit.WebSettings$ZoomDensity MEDIUM
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_ZoomDensity get MEDIUM =>
      _id_MEDIUM.get(_class, const $WebSettings_ZoomDensityType());

  static final _id_CLOSE = _class.staticFieldId(
    r"CLOSE",
    r"Landroid/webkit/WebSettings$ZoomDensity;",
  );

  /// from: static public final android.webkit.WebSettings$ZoomDensity CLOSE
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_ZoomDensity get CLOSE =>
      _id_CLOSE.get(_class, const $WebSettings_ZoomDensityType());

  static final _id_values = _class.staticMethodId(
    r"values",
    r"()[Landroid/webkit/WebSettings$ZoomDensity;",
  );

  /// from: static public android.webkit.WebSettings$ZoomDensity[] values()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JArray<WebSettings_ZoomDensity> values() {
    return _id_values(
        _class, const jni.JArrayType($WebSettings_ZoomDensityType()), []);
  }

  static final _id_valueOf = _class.staticMethodId(
    r"valueOf",
    r"(Ljava/lang/String;)Landroid/webkit/WebSettings$ZoomDensity;",
  );

  /// from: static public android.webkit.WebSettings$ZoomDensity valueOf(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_ZoomDensity valueOf(
    jni.JString string,
  ) {
    return _id_valueOf(_class, const $WebSettings_ZoomDensityType(),
        [string.reference.pointer]);
  }
}

final class $WebSettings_ZoomDensityType
    extends jni.JObjType<WebSettings_ZoomDensity> {
  const $WebSettings_ZoomDensityType();

  @override
  String get signature => r"Landroid/webkit/WebSettings$ZoomDensity;";

  @override
  WebSettings_ZoomDensity fromReference(jni.JReference reference) =>
      WebSettings_ZoomDensity.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($WebSettings_ZoomDensityType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebSettings_ZoomDensityType) &&
        other is $WebSettings_ZoomDensityType;
  }
}

/// from: android.webkit.WebSettings
class WebSettings extends jni.JObject {
  @override
  late final jni.JObjType<WebSettings> $type = type;

  WebSettings.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"android/webkit/WebSettings");

  /// The type which includes information such as the signature of this class.
  static const type = $WebSettingsType();

  /// from: static public final int FORCE_DARK_AUTO
  static const FORCE_DARK_AUTO = 1;

  /// from: static public final int FORCE_DARK_OFF
  static const FORCE_DARK_OFF = 0;

  /// from: static public final int FORCE_DARK_ON
  static const FORCE_DARK_ON = 2;

  /// from: static public final int LOAD_CACHE_ELSE_NETWORK
  static const LOAD_CACHE_ELSE_NETWORK = 1;

  /// from: static public final int LOAD_CACHE_ONLY
  static const LOAD_CACHE_ONLY = 3;

  /// from: static public final int LOAD_DEFAULT
  static const LOAD_DEFAULT = -1;

  /// from: static public final int LOAD_NORMAL
  static const LOAD_NORMAL = 0;

  /// from: static public final int LOAD_NO_CACHE
  static const LOAD_NO_CACHE = 2;

  /// from: static public final int MENU_ITEM_NONE
  static const MENU_ITEM_NONE = 0;

  /// from: static public final int MENU_ITEM_PROCESS_TEXT
  static const MENU_ITEM_PROCESS_TEXT = 4;

  /// from: static public final int MENU_ITEM_SHARE
  static const MENU_ITEM_SHARE = 1;

  /// from: static public final int MENU_ITEM_WEB_SEARCH
  static const MENU_ITEM_WEB_SEARCH = 2;

  /// from: static public final int MIXED_CONTENT_ALWAYS_ALLOW
  static const MIXED_CONTENT_ALWAYS_ALLOW = 0;

  /// from: static public final int MIXED_CONTENT_COMPATIBILITY_MODE
  static const MIXED_CONTENT_COMPATIBILITY_MODE = 2;

  /// from: static public final int MIXED_CONTENT_NEVER_ALLOW
  static const MIXED_CONTENT_NEVER_ALLOW = 1;
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory WebSettings() {
    return WebSettings.fromReference(_id_new0(_class, referenceType, []));
  }

  static final _id_setSupportZoom = _class.instanceMethodId(
    r"setSupportZoom",
    r"(Z)V",
  );

  /// from: public abstract void setSupportZoom(boolean z)
  void setSupportZoom(
    bool z,
  ) {
    _id_setSupportZoom(this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_supportZoom = _class.instanceMethodId(
    r"supportZoom",
    r"()Z",
  );

  /// from: public abstract boolean supportZoom()
  bool supportZoom() {
    return _id_supportZoom(this, const jni.jbooleanType(), []);
  }

  static final _id_setMediaPlaybackRequiresUserGesture =
      _class.instanceMethodId(
    r"setMediaPlaybackRequiresUserGesture",
    r"(Z)V",
  );

  /// from: public abstract void setMediaPlaybackRequiresUserGesture(boolean z)
  void setMediaPlaybackRequiresUserGesture(
    bool z,
  ) {
    _id_setMediaPlaybackRequiresUserGesture(
        this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_getMediaPlaybackRequiresUserGesture =
      _class.instanceMethodId(
    r"getMediaPlaybackRequiresUserGesture",
    r"()Z",
  );

  /// from: public abstract boolean getMediaPlaybackRequiresUserGesture()
  bool getMediaPlaybackRequiresUserGesture() {
    return _id_getMediaPlaybackRequiresUserGesture(
        this, const jni.jbooleanType(), []);
  }

  static final _id_setBuiltInZoomControls = _class.instanceMethodId(
    r"setBuiltInZoomControls",
    r"(Z)V",
  );

  /// from: public abstract void setBuiltInZoomControls(boolean z)
  void setBuiltInZoomControls(
    bool z,
  ) {
    _id_setBuiltInZoomControls(this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_getBuiltInZoomControls = _class.instanceMethodId(
    r"getBuiltInZoomControls",
    r"()Z",
  );

  /// from: public abstract boolean getBuiltInZoomControls()
  bool getBuiltInZoomControls() {
    return _id_getBuiltInZoomControls(this, const jni.jbooleanType(), []);
  }

  static final _id_setDisplayZoomControls = _class.instanceMethodId(
    r"setDisplayZoomControls",
    r"(Z)V",
  );

  /// from: public abstract void setDisplayZoomControls(boolean z)
  void setDisplayZoomControls(
    bool z,
  ) {
    _id_setDisplayZoomControls(this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_getDisplayZoomControls = _class.instanceMethodId(
    r"getDisplayZoomControls",
    r"()Z",
  );

  /// from: public abstract boolean getDisplayZoomControls()
  bool getDisplayZoomControls() {
    return _id_getDisplayZoomControls(this, const jni.jbooleanType(), []);
  }

  static final _id_setAllowFileAccess = _class.instanceMethodId(
    r"setAllowFileAccess",
    r"(Z)V",
  );

  /// from: public abstract void setAllowFileAccess(boolean z)
  void setAllowFileAccess(
    bool z,
  ) {
    _id_setAllowFileAccess(this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_getAllowFileAccess = _class.instanceMethodId(
    r"getAllowFileAccess",
    r"()Z",
  );

  /// from: public abstract boolean getAllowFileAccess()
  bool getAllowFileAccess() {
    return _id_getAllowFileAccess(this, const jni.jbooleanType(), []);
  }

  static final _id_setAllowContentAccess = _class.instanceMethodId(
    r"setAllowContentAccess",
    r"(Z)V",
  );

  /// from: public abstract void setAllowContentAccess(boolean z)
  void setAllowContentAccess(
    bool z,
  ) {
    _id_setAllowContentAccess(this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_getAllowContentAccess = _class.instanceMethodId(
    r"getAllowContentAccess",
    r"()Z",
  );

  /// from: public abstract boolean getAllowContentAccess()
  bool getAllowContentAccess() {
    return _id_getAllowContentAccess(this, const jni.jbooleanType(), []);
  }

  static final _id_setLoadWithOverviewMode = _class.instanceMethodId(
    r"setLoadWithOverviewMode",
    r"(Z)V",
  );

  /// from: public abstract void setLoadWithOverviewMode(boolean z)
  void setLoadWithOverviewMode(
    bool z,
  ) {
    _id_setLoadWithOverviewMode(this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_getLoadWithOverviewMode = _class.instanceMethodId(
    r"getLoadWithOverviewMode",
    r"()Z",
  );

  /// from: public abstract boolean getLoadWithOverviewMode()
  bool getLoadWithOverviewMode() {
    return _id_getLoadWithOverviewMode(this, const jni.jbooleanType(), []);
  }

  static final _id_setEnableSmoothTransition = _class.instanceMethodId(
    r"setEnableSmoothTransition",
    r"(Z)V",
  );

  /// from: public abstract void setEnableSmoothTransition(boolean z)
  void setEnableSmoothTransition(
    bool z,
  ) {
    _id_setEnableSmoothTransition(this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_enableSmoothTransition = _class.instanceMethodId(
    r"enableSmoothTransition",
    r"()Z",
  );

  /// from: public abstract boolean enableSmoothTransition()
  bool enableSmoothTransition() {
    return _id_enableSmoothTransition(this, const jni.jbooleanType(), []);
  }

  static final _id_setSaveFormData = _class.instanceMethodId(
    r"setSaveFormData",
    r"(Z)V",
  );

  /// from: public abstract void setSaveFormData(boolean z)
  void setSaveFormData(
    bool z,
  ) {
    _id_setSaveFormData(this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_getSaveFormData = _class.instanceMethodId(
    r"getSaveFormData",
    r"()Z",
  );

  /// from: public abstract boolean getSaveFormData()
  bool getSaveFormData() {
    return _id_getSaveFormData(this, const jni.jbooleanType(), []);
  }

  static final _id_setSavePassword = _class.instanceMethodId(
    r"setSavePassword",
    r"(Z)V",
  );

  /// from: public abstract void setSavePassword(boolean z)
  void setSavePassword(
    bool z,
  ) {
    _id_setSavePassword(this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_getSavePassword = _class.instanceMethodId(
    r"getSavePassword",
    r"()Z",
  );

  /// from: public abstract boolean getSavePassword()
  bool getSavePassword() {
    return _id_getSavePassword(this, const jni.jbooleanType(), []);
  }

  static final _id_setTextZoom = _class.instanceMethodId(
    r"setTextZoom",
    r"(I)V",
  );

  /// from: public abstract void setTextZoom(int i)
  void setTextZoom(
    int i,
  ) {
    _id_setTextZoom(this, const jni.jvoidType(), [jni.JValueInt(i)]);
  }

  static final _id_getTextZoom = _class.instanceMethodId(
    r"getTextZoom",
    r"()I",
  );

  /// from: public abstract int getTextZoom()
  int getTextZoom() {
    return _id_getTextZoom(this, const jni.jintType(), []);
  }

  static final _id_setTextSize = _class.instanceMethodId(
    r"setTextSize",
    r"(Landroid/webkit/WebSettings$TextSize;)V",
  );

  /// from: public void setTextSize(android.webkit.WebSettings$TextSize textSize)
  void setTextSize(
    WebSettings_TextSize textSize,
  ) {
    _id_setTextSize(this, const jni.jvoidType(), [textSize.reference.pointer]);
  }

  static final _id_getTextSize = _class.instanceMethodId(
    r"getTextSize",
    r"()Landroid/webkit/WebSettings$TextSize;",
  );

  /// from: public android.webkit.WebSettings$TextSize getTextSize()
  /// The returned object must be released after use, by calling the [release] method.
  WebSettings_TextSize getTextSize() {
    return _id_getTextSize(this, const $WebSettings_TextSizeType(), []);
  }

  static final _id_setDefaultZoom = _class.instanceMethodId(
    r"setDefaultZoom",
    r"(Landroid/webkit/WebSettings$ZoomDensity;)V",
  );

  /// from: public abstract void setDefaultZoom(android.webkit.WebSettings$ZoomDensity zoomDensity)
  void setDefaultZoom(
    WebSettings_ZoomDensity zoomDensity,
  ) {
    _id_setDefaultZoom(
        this, const jni.jvoidType(), [zoomDensity.reference.pointer]);
  }

  static final _id_getDefaultZoom = _class.instanceMethodId(
    r"getDefaultZoom",
    r"()Landroid/webkit/WebSettings$ZoomDensity;",
  );

  /// from: public abstract android.webkit.WebSettings$ZoomDensity getDefaultZoom()
  /// The returned object must be released after use, by calling the [release] method.
  WebSettings_ZoomDensity getDefaultZoom() {
    return _id_getDefaultZoom(this, const $WebSettings_ZoomDensityType(), []);
  }

  static final _id_setLightTouchEnabled = _class.instanceMethodId(
    r"setLightTouchEnabled",
    r"(Z)V",
  );

  /// from: public abstract void setLightTouchEnabled(boolean z)
  void setLightTouchEnabled(
    bool z,
  ) {
    _id_setLightTouchEnabled(this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_getLightTouchEnabled = _class.instanceMethodId(
    r"getLightTouchEnabled",
    r"()Z",
  );

  /// from: public abstract boolean getLightTouchEnabled()
  bool getLightTouchEnabled() {
    return _id_getLightTouchEnabled(this, const jni.jbooleanType(), []);
  }

  static final _id_setUseWideViewPort = _class.instanceMethodId(
    r"setUseWideViewPort",
    r"(Z)V",
  );

  /// from: public abstract void setUseWideViewPort(boolean z)
  void setUseWideViewPort(
    bool z,
  ) {
    _id_setUseWideViewPort(this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_getUseWideViewPort = _class.instanceMethodId(
    r"getUseWideViewPort",
    r"()Z",
  );

  /// from: public abstract boolean getUseWideViewPort()
  bool getUseWideViewPort() {
    return _id_getUseWideViewPort(this, const jni.jbooleanType(), []);
  }

  static final _id_setSupportMultipleWindows = _class.instanceMethodId(
    r"setSupportMultipleWindows",
    r"(Z)V",
  );

  /// from: public abstract void setSupportMultipleWindows(boolean z)
  void setSupportMultipleWindows(
    bool z,
  ) {
    _id_setSupportMultipleWindows(this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_supportMultipleWindows = _class.instanceMethodId(
    r"supportMultipleWindows",
    r"()Z",
  );

  /// from: public abstract boolean supportMultipleWindows()
  bool supportMultipleWindows() {
    return _id_supportMultipleWindows(this, const jni.jbooleanType(), []);
  }

  static final _id_setLayoutAlgorithm = _class.instanceMethodId(
    r"setLayoutAlgorithm",
    r"(Landroid/webkit/WebSettings$LayoutAlgorithm;)V",
  );

  /// from: public abstract void setLayoutAlgorithm(android.webkit.WebSettings$LayoutAlgorithm layoutAlgorithm)
  void setLayoutAlgorithm(
    WebSettings_LayoutAlgorithm layoutAlgorithm,
  ) {
    _id_setLayoutAlgorithm(
        this, const jni.jvoidType(), [layoutAlgorithm.reference.pointer]);
  }

  static final _id_getLayoutAlgorithm = _class.instanceMethodId(
    r"getLayoutAlgorithm",
    r"()Landroid/webkit/WebSettings$LayoutAlgorithm;",
  );

  /// from: public abstract android.webkit.WebSettings$LayoutAlgorithm getLayoutAlgorithm()
  /// The returned object must be released after use, by calling the [release] method.
  WebSettings_LayoutAlgorithm getLayoutAlgorithm() {
    return _id_getLayoutAlgorithm(
        this, const $WebSettings_LayoutAlgorithmType(), []);
  }

  static final _id_setStandardFontFamily = _class.instanceMethodId(
    r"setStandardFontFamily",
    r"(Ljava/lang/String;)V",
  );

  /// from: public abstract void setStandardFontFamily(java.lang.String string)
  void setStandardFontFamily(
    jni.JString string,
  ) {
    _id_setStandardFontFamily(
        this, const jni.jvoidType(), [string.reference.pointer]);
  }

  static final _id_getStandardFontFamily = _class.instanceMethodId(
    r"getStandardFontFamily",
    r"()Ljava/lang/String;",
  );

  /// from: public abstract java.lang.String getStandardFontFamily()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getStandardFontFamily() {
    return _id_getStandardFontFamily(this, const jni.JStringType(), []);
  }

  static final _id_setFixedFontFamily = _class.instanceMethodId(
    r"setFixedFontFamily",
    r"(Ljava/lang/String;)V",
  );

  /// from: public abstract void setFixedFontFamily(java.lang.String string)
  void setFixedFontFamily(
    jni.JString string,
  ) {
    _id_setFixedFontFamily(
        this, const jni.jvoidType(), [string.reference.pointer]);
  }

  static final _id_getFixedFontFamily = _class.instanceMethodId(
    r"getFixedFontFamily",
    r"()Ljava/lang/String;",
  );

  /// from: public abstract java.lang.String getFixedFontFamily()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getFixedFontFamily() {
    return _id_getFixedFontFamily(this, const jni.JStringType(), []);
  }

  static final _id_setSansSerifFontFamily = _class.instanceMethodId(
    r"setSansSerifFontFamily",
    r"(Ljava/lang/String;)V",
  );

  /// from: public abstract void setSansSerifFontFamily(java.lang.String string)
  void setSansSerifFontFamily(
    jni.JString string,
  ) {
    _id_setSansSerifFontFamily(
        this, const jni.jvoidType(), [string.reference.pointer]);
  }

  static final _id_getSansSerifFontFamily = _class.instanceMethodId(
    r"getSansSerifFontFamily",
    r"()Ljava/lang/String;",
  );

  /// from: public abstract java.lang.String getSansSerifFontFamily()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSansSerifFontFamily() {
    return _id_getSansSerifFontFamily(this, const jni.JStringType(), []);
  }

  static final _id_setSerifFontFamily = _class.instanceMethodId(
    r"setSerifFontFamily",
    r"(Ljava/lang/String;)V",
  );

  /// from: public abstract void setSerifFontFamily(java.lang.String string)
  void setSerifFontFamily(
    jni.JString string,
  ) {
    _id_setSerifFontFamily(
        this, const jni.jvoidType(), [string.reference.pointer]);
  }

  static final _id_getSerifFontFamily = _class.instanceMethodId(
    r"getSerifFontFamily",
    r"()Ljava/lang/String;",
  );

  /// from: public abstract java.lang.String getSerifFontFamily()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSerifFontFamily() {
    return _id_getSerifFontFamily(this, const jni.JStringType(), []);
  }

  static final _id_setCursiveFontFamily = _class.instanceMethodId(
    r"setCursiveFontFamily",
    r"(Ljava/lang/String;)V",
  );

  /// from: public abstract void setCursiveFontFamily(java.lang.String string)
  void setCursiveFontFamily(
    jni.JString string,
  ) {
    _id_setCursiveFontFamily(
        this, const jni.jvoidType(), [string.reference.pointer]);
  }

  static final _id_getCursiveFontFamily = _class.instanceMethodId(
    r"getCursiveFontFamily",
    r"()Ljava/lang/String;",
  );

  /// from: public abstract java.lang.String getCursiveFontFamily()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getCursiveFontFamily() {
    return _id_getCursiveFontFamily(this, const jni.JStringType(), []);
  }

  static final _id_setFantasyFontFamily = _class.instanceMethodId(
    r"setFantasyFontFamily",
    r"(Ljava/lang/String;)V",
  );

  /// from: public abstract void setFantasyFontFamily(java.lang.String string)
  void setFantasyFontFamily(
    jni.JString string,
  ) {
    _id_setFantasyFontFamily(
        this, const jni.jvoidType(), [string.reference.pointer]);
  }

  static final _id_getFantasyFontFamily = _class.instanceMethodId(
    r"getFantasyFontFamily",
    r"()Ljava/lang/String;",
  );

  /// from: public abstract java.lang.String getFantasyFontFamily()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getFantasyFontFamily() {
    return _id_getFantasyFontFamily(this, const jni.JStringType(), []);
  }

  static final _id_setMinimumFontSize = _class.instanceMethodId(
    r"setMinimumFontSize",
    r"(I)V",
  );

  /// from: public abstract void setMinimumFontSize(int i)
  void setMinimumFontSize(
    int i,
  ) {
    _id_setMinimumFontSize(this, const jni.jvoidType(), [jni.JValueInt(i)]);
  }

  static final _id_getMinimumFontSize = _class.instanceMethodId(
    r"getMinimumFontSize",
    r"()I",
  );

  /// from: public abstract int getMinimumFontSize()
  int getMinimumFontSize() {
    return _id_getMinimumFontSize(this, const jni.jintType(), []);
  }

  static final _id_setMinimumLogicalFontSize = _class.instanceMethodId(
    r"setMinimumLogicalFontSize",
    r"(I)V",
  );

  /// from: public abstract void setMinimumLogicalFontSize(int i)
  void setMinimumLogicalFontSize(
    int i,
  ) {
    _id_setMinimumLogicalFontSize(
        this, const jni.jvoidType(), [jni.JValueInt(i)]);
  }

  static final _id_getMinimumLogicalFontSize = _class.instanceMethodId(
    r"getMinimumLogicalFontSize",
    r"()I",
  );

  /// from: public abstract int getMinimumLogicalFontSize()
  int getMinimumLogicalFontSize() {
    return _id_getMinimumLogicalFontSize(this, const jni.jintType(), []);
  }

  static final _id_setDefaultFontSize = _class.instanceMethodId(
    r"setDefaultFontSize",
    r"(I)V",
  );

  /// from: public abstract void setDefaultFontSize(int i)
  void setDefaultFontSize(
    int i,
  ) {
    _id_setDefaultFontSize(this, const jni.jvoidType(), [jni.JValueInt(i)]);
  }

  static final _id_getDefaultFontSize = _class.instanceMethodId(
    r"getDefaultFontSize",
    r"()I",
  );

  /// from: public abstract int getDefaultFontSize()
  int getDefaultFontSize() {
    return _id_getDefaultFontSize(this, const jni.jintType(), []);
  }

  static final _id_setDefaultFixedFontSize = _class.instanceMethodId(
    r"setDefaultFixedFontSize",
    r"(I)V",
  );

  /// from: public abstract void setDefaultFixedFontSize(int i)
  void setDefaultFixedFontSize(
    int i,
  ) {
    _id_setDefaultFixedFontSize(
        this, const jni.jvoidType(), [jni.JValueInt(i)]);
  }

  static final _id_getDefaultFixedFontSize = _class.instanceMethodId(
    r"getDefaultFixedFontSize",
    r"()I",
  );

  /// from: public abstract int getDefaultFixedFontSize()
  int getDefaultFixedFontSize() {
    return _id_getDefaultFixedFontSize(this, const jni.jintType(), []);
  }

  static final _id_setLoadsImagesAutomatically = _class.instanceMethodId(
    r"setLoadsImagesAutomatically",
    r"(Z)V",
  );

  /// from: public abstract void setLoadsImagesAutomatically(boolean z)
  void setLoadsImagesAutomatically(
    bool z,
  ) {
    _id_setLoadsImagesAutomatically(this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_getLoadsImagesAutomatically = _class.instanceMethodId(
    r"getLoadsImagesAutomatically",
    r"()Z",
  );

  /// from: public abstract boolean getLoadsImagesAutomatically()
  bool getLoadsImagesAutomatically() {
    return _id_getLoadsImagesAutomatically(this, const jni.jbooleanType(), []);
  }

  static final _id_setBlockNetworkImage = _class.instanceMethodId(
    r"setBlockNetworkImage",
    r"(Z)V",
  );

  /// from: public abstract void setBlockNetworkImage(boolean z)
  void setBlockNetworkImage(
    bool z,
  ) {
    _id_setBlockNetworkImage(this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_getBlockNetworkImage = _class.instanceMethodId(
    r"getBlockNetworkImage",
    r"()Z",
  );

  /// from: public abstract boolean getBlockNetworkImage()
  bool getBlockNetworkImage() {
    return _id_getBlockNetworkImage(this, const jni.jbooleanType(), []);
  }

  static final _id_setBlockNetworkLoads = _class.instanceMethodId(
    r"setBlockNetworkLoads",
    r"(Z)V",
  );

  /// from: public abstract void setBlockNetworkLoads(boolean z)
  void setBlockNetworkLoads(
    bool z,
  ) {
    _id_setBlockNetworkLoads(this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_getBlockNetworkLoads = _class.instanceMethodId(
    r"getBlockNetworkLoads",
    r"()Z",
  );

  /// from: public abstract boolean getBlockNetworkLoads()
  bool getBlockNetworkLoads() {
    return _id_getBlockNetworkLoads(this, const jni.jbooleanType(), []);
  }

  static final _id_setJavaScriptEnabled = _class.instanceMethodId(
    r"setJavaScriptEnabled",
    r"(Z)V",
  );

  /// from: public abstract void setJavaScriptEnabled(boolean z)
  void setJavaScriptEnabled(
    bool z,
  ) {
    _id_setJavaScriptEnabled(this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_setAllowUniversalAccessFromFileURLs =
      _class.instanceMethodId(
    r"setAllowUniversalAccessFromFileURLs",
    r"(Z)V",
  );

  /// from: public abstract void setAllowUniversalAccessFromFileURLs(boolean z)
  void setAllowUniversalAccessFromFileURLs(
    bool z,
  ) {
    _id_setAllowUniversalAccessFromFileURLs(
        this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_setAllowFileAccessFromFileURLs = _class.instanceMethodId(
    r"setAllowFileAccessFromFileURLs",
    r"(Z)V",
  );

  /// from: public abstract void setAllowFileAccessFromFileURLs(boolean z)
  void setAllowFileAccessFromFileURLs(
    bool z,
  ) {
    _id_setAllowFileAccessFromFileURLs(
        this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_setPluginState = _class.instanceMethodId(
    r"setPluginState",
    r"(Landroid/webkit/WebSettings$PluginState;)V",
  );

  /// from: public abstract void setPluginState(android.webkit.WebSettings$PluginState pluginState)
  void setPluginState(
    WebSettings_PluginState pluginState,
  ) {
    _id_setPluginState(
        this, const jni.jvoidType(), [pluginState.reference.pointer]);
  }

  static final _id_setDatabasePath = _class.instanceMethodId(
    r"setDatabasePath",
    r"(Ljava/lang/String;)V",
  );

  /// from: public abstract void setDatabasePath(java.lang.String string)
  void setDatabasePath(
    jni.JString string,
  ) {
    _id_setDatabasePath(
        this, const jni.jvoidType(), [string.reference.pointer]);
  }

  static final _id_setGeolocationDatabasePath = _class.instanceMethodId(
    r"setGeolocationDatabasePath",
    r"(Ljava/lang/String;)V",
  );

  /// from: public abstract void setGeolocationDatabasePath(java.lang.String string)
  void setGeolocationDatabasePath(
    jni.JString string,
  ) {
    _id_setGeolocationDatabasePath(
        this, const jni.jvoidType(), [string.reference.pointer]);
  }

  static final _id_setDatabaseEnabled = _class.instanceMethodId(
    r"setDatabaseEnabled",
    r"(Z)V",
  );

  /// from: public abstract void setDatabaseEnabled(boolean z)
  void setDatabaseEnabled(
    bool z,
  ) {
    _id_setDatabaseEnabled(this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_setDomStorageEnabled = _class.instanceMethodId(
    r"setDomStorageEnabled",
    r"(Z)V",
  );

  /// from: public abstract void setDomStorageEnabled(boolean z)
  void setDomStorageEnabled(
    bool z,
  ) {
    _id_setDomStorageEnabled(this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_getDomStorageEnabled = _class.instanceMethodId(
    r"getDomStorageEnabled",
    r"()Z",
  );

  /// from: public abstract boolean getDomStorageEnabled()
  bool getDomStorageEnabled() {
    return _id_getDomStorageEnabled(this, const jni.jbooleanType(), []);
  }

  static final _id_getDatabasePath = _class.instanceMethodId(
    r"getDatabasePath",
    r"()Ljava/lang/String;",
  );

  /// from: public abstract java.lang.String getDatabasePath()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getDatabasePath() {
    return _id_getDatabasePath(this, const jni.JStringType(), []);
  }

  static final _id_getDatabaseEnabled = _class.instanceMethodId(
    r"getDatabaseEnabled",
    r"()Z",
  );

  /// from: public abstract boolean getDatabaseEnabled()
  bool getDatabaseEnabled() {
    return _id_getDatabaseEnabled(this, const jni.jbooleanType(), []);
  }

  static final _id_setGeolocationEnabled = _class.instanceMethodId(
    r"setGeolocationEnabled",
    r"(Z)V",
  );

  /// from: public abstract void setGeolocationEnabled(boolean z)
  void setGeolocationEnabled(
    bool z,
  ) {
    _id_setGeolocationEnabled(this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_getJavaScriptEnabled = _class.instanceMethodId(
    r"getJavaScriptEnabled",
    r"()Z",
  );

  /// from: public abstract boolean getJavaScriptEnabled()
  bool getJavaScriptEnabled() {
    return _id_getJavaScriptEnabled(this, const jni.jbooleanType(), []);
  }

  static final _id_getAllowUniversalAccessFromFileURLs =
      _class.instanceMethodId(
    r"getAllowUniversalAccessFromFileURLs",
    r"()Z",
  );

  /// from: public abstract boolean getAllowUniversalAccessFromFileURLs()
  bool getAllowUniversalAccessFromFileURLs() {
    return _id_getAllowUniversalAccessFromFileURLs(
        this, const jni.jbooleanType(), []);
  }

  static final _id_getAllowFileAccessFromFileURLs = _class.instanceMethodId(
    r"getAllowFileAccessFromFileURLs",
    r"()Z",
  );

  /// from: public abstract boolean getAllowFileAccessFromFileURLs()
  bool getAllowFileAccessFromFileURLs() {
    return _id_getAllowFileAccessFromFileURLs(
        this, const jni.jbooleanType(), []);
  }

  static final _id_getPluginState = _class.instanceMethodId(
    r"getPluginState",
    r"()Landroid/webkit/WebSettings$PluginState;",
  );

  /// from: public abstract android.webkit.WebSettings$PluginState getPluginState()
  /// The returned object must be released after use, by calling the [release] method.
  WebSettings_PluginState getPluginState() {
    return _id_getPluginState(this, const $WebSettings_PluginStateType(), []);
  }

  static final _id_setJavaScriptCanOpenWindowsAutomatically =
      _class.instanceMethodId(
    r"setJavaScriptCanOpenWindowsAutomatically",
    r"(Z)V",
  );

  /// from: public abstract void setJavaScriptCanOpenWindowsAutomatically(boolean z)
  void setJavaScriptCanOpenWindowsAutomatically(
    bool z,
  ) {
    _id_setJavaScriptCanOpenWindowsAutomatically(
        this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_getJavaScriptCanOpenWindowsAutomatically =
      _class.instanceMethodId(
    r"getJavaScriptCanOpenWindowsAutomatically",
    r"()Z",
  );

  /// from: public abstract boolean getJavaScriptCanOpenWindowsAutomatically()
  bool getJavaScriptCanOpenWindowsAutomatically() {
    return _id_getJavaScriptCanOpenWindowsAutomatically(
        this, const jni.jbooleanType(), []);
  }

  static final _id_setDefaultTextEncodingName = _class.instanceMethodId(
    r"setDefaultTextEncodingName",
    r"(Ljava/lang/String;)V",
  );

  /// from: public abstract void setDefaultTextEncodingName(java.lang.String string)
  void setDefaultTextEncodingName(
    jni.JString string,
  ) {
    _id_setDefaultTextEncodingName(
        this, const jni.jvoidType(), [string.reference.pointer]);
  }

  static final _id_getDefaultTextEncodingName = _class.instanceMethodId(
    r"getDefaultTextEncodingName",
    r"()Ljava/lang/String;",
  );

  /// from: public abstract java.lang.String getDefaultTextEncodingName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getDefaultTextEncodingName() {
    return _id_getDefaultTextEncodingName(this, const jni.JStringType(), []);
  }

  static final _id_setUserAgentString = _class.instanceMethodId(
    r"setUserAgentString",
    r"(Ljava/lang/String;)V",
  );

  /// from: public abstract void setUserAgentString(java.lang.String string)
  void setUserAgentString(
    jni.JString string,
  ) {
    _id_setUserAgentString(
        this, const jni.jvoidType(), [string.reference.pointer]);
  }

  static final _id_getUserAgentString = _class.instanceMethodId(
    r"getUserAgentString",
    r"()Ljava/lang/String;",
  );

  /// from: public abstract java.lang.String getUserAgentString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getUserAgentString() {
    return _id_getUserAgentString(this, const jni.JStringType(), []);
  }

  static final _id_getDefaultUserAgent = _class.staticMethodId(
    r"getDefaultUserAgent",
    r"(Landroid/content/Context;)Ljava/lang/String;",
  );

  /// from: static public java.lang.String getDefaultUserAgent(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString getDefaultUserAgent(
    jni.JObject context,
  ) {
    return _id_getDefaultUserAgent(
        _class, const jni.JStringType(), [context.reference.pointer]);
  }

  static final _id_setNeedInitialFocus = _class.instanceMethodId(
    r"setNeedInitialFocus",
    r"(Z)V",
  );

  /// from: public abstract void setNeedInitialFocus(boolean z)
  void setNeedInitialFocus(
    bool z,
  ) {
    _id_setNeedInitialFocus(this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_setRenderPriority = _class.instanceMethodId(
    r"setRenderPriority",
    r"(Landroid/webkit/WebSettings$RenderPriority;)V",
  );

  /// from: public abstract void setRenderPriority(android.webkit.WebSettings$RenderPriority renderPriority)
  void setRenderPriority(
    WebSettings_RenderPriority renderPriority,
  ) {
    _id_setRenderPriority(
        this, const jni.jvoidType(), [renderPriority.reference.pointer]);
  }

  static final _id_setCacheMode = _class.instanceMethodId(
    r"setCacheMode",
    r"(I)V",
  );

  /// from: public abstract void setCacheMode(int i)
  void setCacheMode(
    int i,
  ) {
    _id_setCacheMode(this, const jni.jvoidType(), [jni.JValueInt(i)]);
  }

  static final _id_getCacheMode = _class.instanceMethodId(
    r"getCacheMode",
    r"()I",
  );

  /// from: public abstract int getCacheMode()
  int getCacheMode() {
    return _id_getCacheMode(this, const jni.jintType(), []);
  }

  static final _id_setMixedContentMode = _class.instanceMethodId(
    r"setMixedContentMode",
    r"(I)V",
  );

  /// from: public abstract void setMixedContentMode(int i)
  void setMixedContentMode(
    int i,
  ) {
    _id_setMixedContentMode(this, const jni.jvoidType(), [jni.JValueInt(i)]);
  }

  static final _id_getMixedContentMode = _class.instanceMethodId(
    r"getMixedContentMode",
    r"()I",
  );

  /// from: public abstract int getMixedContentMode()
  int getMixedContentMode() {
    return _id_getMixedContentMode(this, const jni.jintType(), []);
  }

  static final _id_setOffscreenPreRaster = _class.instanceMethodId(
    r"setOffscreenPreRaster",
    r"(Z)V",
  );

  /// from: public abstract void setOffscreenPreRaster(boolean z)
  void setOffscreenPreRaster(
    bool z,
  ) {
    _id_setOffscreenPreRaster(this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_getOffscreenPreRaster = _class.instanceMethodId(
    r"getOffscreenPreRaster",
    r"()Z",
  );

  /// from: public abstract boolean getOffscreenPreRaster()
  bool getOffscreenPreRaster() {
    return _id_getOffscreenPreRaster(this, const jni.jbooleanType(), []);
  }

  static final _id_setSafeBrowsingEnabled = _class.instanceMethodId(
    r"setSafeBrowsingEnabled",
    r"(Z)V",
  );

  /// from: public abstract void setSafeBrowsingEnabled(boolean z)
  void setSafeBrowsingEnabled(
    bool z,
  ) {
    _id_setSafeBrowsingEnabled(this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_getSafeBrowsingEnabled = _class.instanceMethodId(
    r"getSafeBrowsingEnabled",
    r"()Z",
  );

  /// from: public abstract boolean getSafeBrowsingEnabled()
  bool getSafeBrowsingEnabled() {
    return _id_getSafeBrowsingEnabled(this, const jni.jbooleanType(), []);
  }

  static final _id_setForceDark = _class.instanceMethodId(
    r"setForceDark",
    r"(I)V",
  );

  /// from: public void setForceDark(int i)
  void setForceDark(
    int i,
  ) {
    _id_setForceDark(this, const jni.jvoidType(), [jni.JValueInt(i)]);
  }

  static final _id_getForceDark = _class.instanceMethodId(
    r"getForceDark",
    r"()I",
  );

  /// from: public int getForceDark()
  int getForceDark() {
    return _id_getForceDark(this, const jni.jintType(), []);
  }

  static final _id_setAlgorithmicDarkeningAllowed = _class.instanceMethodId(
    r"setAlgorithmicDarkeningAllowed",
    r"(Z)V",
  );

  /// from: public void setAlgorithmicDarkeningAllowed(boolean z)
  void setAlgorithmicDarkeningAllowed(
    bool z,
  ) {
    _id_setAlgorithmicDarkeningAllowed(
        this, const jni.jvoidType(), [z ? 1 : 0]);
  }

  static final _id_isAlgorithmicDarkeningAllowed = _class.instanceMethodId(
    r"isAlgorithmicDarkeningAllowed",
    r"()Z",
  );

  /// from: public boolean isAlgorithmicDarkeningAllowed()
  bool isAlgorithmicDarkeningAllowed() {
    return _id_isAlgorithmicDarkeningAllowed(
        this, const jni.jbooleanType(), []);
  }

  static final _id_setDisabledActionModeMenuItems = _class.instanceMethodId(
    r"setDisabledActionModeMenuItems",
    r"(I)V",
  );

  /// from: public abstract void setDisabledActionModeMenuItems(int i)
  void setDisabledActionModeMenuItems(
    int i,
  ) {
    _id_setDisabledActionModeMenuItems(
        this, const jni.jvoidType(), [jni.JValueInt(i)]);
  }

  static final _id_getDisabledActionModeMenuItems = _class.instanceMethodId(
    r"getDisabledActionModeMenuItems",
    r"()I",
  );

  /// from: public abstract int getDisabledActionModeMenuItems()
  int getDisabledActionModeMenuItems() {
    return _id_getDisabledActionModeMenuItems(this, const jni.jintType(), []);
  }
}

final class $WebSettingsType extends jni.JObjType<WebSettings> {
  const $WebSettingsType();

  @override
  String get signature => r"Landroid/webkit/WebSettings;";

  @override
  WebSettings fromReference(jni.JReference reference) =>
      WebSettings.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($WebSettingsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebSettingsType) && other is $WebSettingsType;
  }
}

/// from: io.flutter.plugins.webviewflutter.WebViewWrapper
class WebViewWrapper extends WebView {
  @override
  late final jni.JObjType<WebViewWrapper> $type = type;

  WebViewWrapper.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"io/flutter/plugins/webviewflutter/WebViewWrapper");

  /// The type which includes information such as the signature of this class.
  static const type = $WebViewWrapperType();
  static final _id_new0 = _class.constructorId(
    r"(Landroid/content/Context;)V",
  );

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  factory WebViewWrapper(
    jni.JObject context,
  ) {
    return WebViewWrapper.fromReference(
        _id_new0(_class, referenceType, [context.reference.pointer]));
  }
}

final class $WebViewWrapperType extends jni.JObjType<WebViewWrapper> {
  const $WebViewWrapperType();

  @override
  String get signature => r"Lio/flutter/plugins/webviewflutter/WebViewWrapper;";

  @override
  WebViewWrapper fromReference(jni.JReference reference) =>
      WebViewWrapper.fromReference(reference);

  @override
  jni.JObjType get superType => const $WebViewType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($WebViewWrapperType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebViewWrapperType) &&
        other is $WebViewWrapperType;
  }
}

/// from: io.flutter.plugins.webviewflutter.WebViewClientProxy
class WebViewClientProxy extends jni.JObject {
  @override
  late final jni.JObjType<WebViewClientProxy> $type = type;

  WebViewClientProxy.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"io/flutter/plugins/webviewflutter/WebViewClientProxy");

  /// The type which includes information such as the signature of this class.
  static const type = $WebViewClientProxyType();
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory WebViewClientProxy() {
    return WebViewClientProxy.fromReference(
        _id_new0(_class, referenceType, []));
  }

  static final _id_setOnProgressChanged = _class.instanceMethodId(
    r"setOnProgressChanged",
    r"(Ljava/util/function/Consumer;)V",
  );

  /// from: public void setOnProgressChanged(java.util.function.Consumer consumer)
  void setOnProgressChanged(
    Consumer<jni.JInteger> consumer,
  ) {
    _id_setOnProgressChanged(
        this, const jni.jvoidType(), [consumer.reference.pointer]);
  }

  static final _id_setOnUrlChanged = _class.instanceMethodId(
    r"setOnUrlChanged",
    r"(Ljava/util/function/Consumer;)V",
  );

  /// from: public void setOnUrlChanged(java.util.function.Consumer consumer)
  void setOnUrlChanged(
    Consumer<jni.JString> consumer,
  ) {
    _id_setOnUrlChanged(
        this, const jni.jvoidType(), [consumer.reference.pointer]);
  }

  static final _id_onProgressChanged = _class.instanceMethodId(
    r"onProgressChanged",
    r"(Landroid/webkit/WebView;I)V",
  );

  /// from: public void onProgressChanged(android.webkit.WebView webView, int i)
  void onProgressChanged(
    WebView webView,
    int i,
  ) {
    _id_onProgressChanged(this, const jni.jvoidType(),
        [webView.reference.pointer, jni.JValueInt(i)]);
  }
}

final class $WebViewClientProxyType extends jni.JObjType<WebViewClientProxy> {
  const $WebViewClientProxyType();

  @override
  String get signature =>
      r"Lio/flutter/plugins/webviewflutter/WebViewClientProxy;";

  @override
  WebViewClientProxy fromReference(jni.JReference reference) =>
      WebViewClientProxy.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($WebViewClientProxyType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebViewClientProxyType) &&
        other is $WebViewClientProxyType;
  }
}
