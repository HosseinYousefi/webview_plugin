// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

/// from: `java.util.function.Consumer`
class Consumer<$T extends _$jni.JObject> extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<Consumer<$T>> $type;

  @_$jni.internal
  final _$jni.JObjType<$T> T;

  @_$jni.internal
  Consumer.fromReference(
    this.T,
    _$jni.JReference reference,
  )   : $type = type(T),
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(r'java/util/function/Consumer');

  /// The type which includes information such as the signature of this class.
  static $Consumer$Type<$T> type<$T extends _$jni.JObject>(
    _$jni.JObjType<$T> T,
  ) {
    return $Consumer$Type(
      T,
    );
  }

  static final _id_accept = _class.instanceMethodId(
    r'accept',
    r'(Ljava/lang/Object;)V',
  );

  static final _accept = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void accept(T object)`
  void accept(
    $T object,
  ) {
    _accept(reference.pointer, _id_accept as _$jni.JMethodIDPtr,
            object.reference.pointer)
        .check();
  }

  static final _id_andThen = _class.instanceMethodId(
    r'andThen',
    r'(Ljava/util/function/Consumer;)Ljava/util/function/Consumer;',
  );

  static final _andThen = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public java.util.function.Consumer andThen(java.util.function.Consumer consumer)`
  /// The returned object must be released after use, by calling the [release] method.
  Consumer<$T> andThen(
    Consumer<$T> consumer,
  ) {
    return _andThen(reference.pointer, _id_andThen as _$jni.JMethodIDPtr,
            consumer.reference.pointer)
        .object($Consumer$Type(T));
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $Consumer> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'accept(Ljava/lang/Object;)V') {
        _$impls[$p]!.accept(
          $a[0].as(_$impls[$p]!.T, releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
      if ($d ==
          r'andThen(Ljava/util/function/Consumer;)Ljava/util/function/Consumer;') {
        final $r = _$impls[$p]!.andThen(
          $a[0].as(const $Consumer$Type(_$jni.JObjectType()),
              releaseOriginal: true),
        );
        return ($r as _$jni.JObject)
            .as(const _$jni.JObjectType())
            .reference
            .toPointer();
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn<$T extends _$jni.JObject>(
    _$jni.JImplementer implementer,
    $Consumer<$T> $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'java.util.function.Consumer',
      $p,
      _$invokePointer,
      [
        if ($impl.accept$async) r'accept(Ljava/lang/Object;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory Consumer.implement(
    $Consumer<$T> $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return Consumer.fromReference(
      $impl.T,
      $i.implementReference(),
    );
  }
}

abstract base mixin class $Consumer<$T extends _$jni.JObject> {
  factory $Consumer({
    required _$jni.JObjType<$T> T,
    required void Function($T object) accept,
    bool accept$async,
    required Consumer<_$jni.JObject> Function(Consumer<_$jni.JObject> consumer)
        andThen,
  }) = _$Consumer;

  _$jni.JObjType<$T> get T;

  void accept($T object);
  bool get accept$async => false;
  Consumer<_$jni.JObject> andThen(Consumer<_$jni.JObject> consumer);
}

final class _$Consumer<$T extends _$jni.JObject> with $Consumer<$T> {
  _$Consumer({
    required this.T,
    required void Function($T object) accept,
    this.accept$async = false,
    required Consumer<_$jni.JObject> Function(Consumer<_$jni.JObject> consumer)
        andThen,
  })  : _accept = accept,
        _andThen = andThen;

  @_$core.override
  final _$jni.JObjType<$T> T;

  final void Function($T object) _accept;
  final bool accept$async;
  final Consumer<_$jni.JObject> Function(Consumer<_$jni.JObject> consumer)
      _andThen;

  void accept($T object) {
    return _accept(object);
  }

  Consumer<_$jni.JObject> andThen(Consumer<_$jni.JObject> consumer) {
    return _andThen(consumer);
  }
}

final class $Consumer$Type<$T extends _$jni.JObject>
    extends _$jni.JObjType<Consumer<$T>> {
  @_$jni.internal
  final _$jni.JObjType<$T> T;

  @_$jni.internal
  const $Consumer$Type(
    this.T,
  );

  @_$jni.internal
  @_$core.override
  String get signature => r'Ljava/util/function/Consumer;';

  @_$jni.internal
  @_$core.override
  Consumer<$T> fromReference(_$jni.JReference reference) =>
      Consumer.fromReference(T, reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => Object.hash($Consumer$Type, T);

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Consumer$Type<$T>) &&
        other is $Consumer$Type<$T> &&
        T == other.T;
  }
}

/// from: `android.webkit.WebView$FindListener`
class WebView_FindListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WebView_FindListener> $type;

  @_$jni.internal
  WebView_FindListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'android/webkit/WebView$FindListener');

  /// The type which includes information such as the signature of this class.
  static const type = $WebView_FindListener$Type();
  static final _id_onFindResultReceived = _class.instanceMethodId(
    r'onFindResultReceived',
    r'(IIZ)V',
  );

  static final _onFindResultReceived = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Int32, _$jni.Int32, _$jni.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int, int)>();

  /// from: `public abstract void onFindResultReceived(int i, int i1, boolean z)`
  void onFindResultReceived(
    int i,
    int i1,
    bool z,
  ) {
    _onFindResultReceived(reference.pointer,
            _id_onFindResultReceived as _$jni.JMethodIDPtr, i, i1, z ? 1 : 0)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $WebView_FindListener> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onFindResultReceived(IIZ)V') {
        _$impls[$p]!.onFindResultReceived(
          $a[0]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[1]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[2]
              .as(const _$jni.JBooleanType(), releaseOriginal: true)
              .booleanValue(releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $WebView_FindListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'android.webkit.WebView$FindListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onFindResultReceived$async) r'onFindResultReceived(IIZ)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory WebView_FindListener.implement(
    $WebView_FindListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return WebView_FindListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $WebView_FindListener {
  factory $WebView_FindListener({
    required void Function(int i, int i1, bool z) onFindResultReceived,
    bool onFindResultReceived$async,
  }) = _$WebView_FindListener;

  void onFindResultReceived(int i, int i1, bool z);
  bool get onFindResultReceived$async => false;
}

final class _$WebView_FindListener with $WebView_FindListener {
  _$WebView_FindListener({
    required void Function(int i, int i1, bool z) onFindResultReceived,
    this.onFindResultReceived$async = false,
  }) : _onFindResultReceived = onFindResultReceived;

  final void Function(int i, int i1, bool z) _onFindResultReceived;
  final bool onFindResultReceived$async;

  void onFindResultReceived(int i, int i1, bool z) {
    return _onFindResultReceived(i, i1, z);
  }
}

final class $WebView_FindListener$Type
    extends _$jni.JObjType<WebView_FindListener> {
  @_$jni.internal
  const $WebView_FindListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/webkit/WebView$FindListener;';

  @_$jni.internal
  @_$core.override
  WebView_FindListener fromReference(_$jni.JReference reference) =>
      WebView_FindListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WebView_FindListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebView_FindListener$Type) &&
        other is $WebView_FindListener$Type;
  }
}

/// from: `android.webkit.WebView$HitTestResult`
class WebView_HitTestResult extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WebView_HitTestResult> $type;

  @_$jni.internal
  WebView_HitTestResult.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'android/webkit/WebView$HitTestResult');

  /// The type which includes information such as the signature of this class.
  static const type = $WebView_HitTestResult$Type();

  /// from: `static public final int ANCHOR_TYPE`
  static const ANCHOR_TYPE = 1;

  /// from: `static public final int EDIT_TEXT_TYPE`
  static const EDIT_TEXT_TYPE = 9;

  /// from: `static public final int EMAIL_TYPE`
  static const EMAIL_TYPE = 4;

  /// from: `static public final int GEO_TYPE`
  static const GEO_TYPE = 3;

  /// from: `static public final int IMAGE_ANCHOR_TYPE`
  static const IMAGE_ANCHOR_TYPE = 6;

  /// from: `static public final int IMAGE_TYPE`
  static const IMAGE_TYPE = 5;

  /// from: `static public final int PHONE_TYPE`
  static const PHONE_TYPE = 2;

  /// from: `static public final int SRC_ANCHOR_TYPE`
  static const SRC_ANCHOR_TYPE = 7;

  /// from: `static public final int SRC_IMAGE_ANCHOR_TYPE`
  static const SRC_IMAGE_ANCHOR_TYPE = 8;

  /// from: `static public final int UNKNOWN_TYPE`
  static const UNKNOWN_TYPE = 0;
  static final _id_getType = _class.instanceMethodId(
    r'getType',
    r'()I',
  );

  static final _getType = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getType()`
  int getType() {
    return _getType(reference.pointer, _id_getType as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getExtra = _class.instanceMethodId(
    r'getExtra',
    r'()Ljava/lang/String;',
  );

  static final _getExtra = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getExtra()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getExtra() {
    return _getExtra(reference.pointer, _id_getExtra as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }
}

final class $WebView_HitTestResult$Type
    extends _$jni.JObjType<WebView_HitTestResult> {
  @_$jni.internal
  const $WebView_HitTestResult$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/webkit/WebView$HitTestResult;';

  @_$jni.internal
  @_$core.override
  WebView_HitTestResult fromReference(_$jni.JReference reference) =>
      WebView_HitTestResult.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WebView_HitTestResult$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebView_HitTestResult$Type) &&
        other is $WebView_HitTestResult$Type;
  }
}

/// from: `android.webkit.WebView$PictureListener`
class WebView_PictureListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WebView_PictureListener> $type;

  @_$jni.internal
  WebView_PictureListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'android/webkit/WebView$PictureListener');

  /// The type which includes information such as the signature of this class.
  static const type = $WebView_PictureListener$Type();
  static final _id_onNewPicture = _class.instanceMethodId(
    r'onNewPicture',
    r'(Landroid/webkit/WebView;Landroid/graphics/Picture;)V',
  );

  static final _onNewPicture = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onNewPicture(android.webkit.WebView webView, android.graphics.Picture picture)`
  void onNewPicture(
    WebView webView,
    _$jni.JObject picture,
  ) {
    _onNewPicture(reference.pointer, _id_onNewPicture as _$jni.JMethodIDPtr,
            webView.reference.pointer, picture.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $WebView_PictureListener> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'onNewPicture(Landroid/webkit/WebView;Landroid/graphics/Picture;)V') {
        _$impls[$p]!.onNewPicture(
          $a[0].as(const $WebView$Type(), releaseOriginal: true),
          $a[1].as(const _$jni.JObjectType(), releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $WebView_PictureListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'android.webkit.WebView$PictureListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onNewPicture$async)
          r'onNewPicture(Landroid/webkit/WebView;Landroid/graphics/Picture;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory WebView_PictureListener.implement(
    $WebView_PictureListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return WebView_PictureListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $WebView_PictureListener {
  factory $WebView_PictureListener({
    required void Function(WebView webView, _$jni.JObject picture) onNewPicture,
    bool onNewPicture$async,
  }) = _$WebView_PictureListener;

  void onNewPicture(WebView webView, _$jni.JObject picture);
  bool get onNewPicture$async => false;
}

final class _$WebView_PictureListener with $WebView_PictureListener {
  _$WebView_PictureListener({
    required void Function(WebView webView, _$jni.JObject picture) onNewPicture,
    this.onNewPicture$async = false,
  }) : _onNewPicture = onNewPicture;

  final void Function(WebView webView, _$jni.JObject picture) _onNewPicture;
  final bool onNewPicture$async;

  void onNewPicture(WebView webView, _$jni.JObject picture) {
    return _onNewPicture(webView, picture);
  }
}

final class $WebView_PictureListener$Type
    extends _$jni.JObjType<WebView_PictureListener> {
  @_$jni.internal
  const $WebView_PictureListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/webkit/WebView$PictureListener;';

  @_$jni.internal
  @_$core.override
  WebView_PictureListener fromReference(_$jni.JReference reference) =>
      WebView_PictureListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WebView_PictureListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebView_PictureListener$Type) &&
        other is $WebView_PictureListener$Type;
  }
}

/// from: `android.webkit.WebView$VisualStateCallback`
class WebView_VisualStateCallback extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WebView_VisualStateCallback> $type;

  @_$jni.internal
  WebView_VisualStateCallback.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'android/webkit/WebView$VisualStateCallback');

  /// The type which includes information such as the signature of this class.
  static const type = $WebView_VisualStateCallback$Type();
  static final _id_onComplete = _class.instanceMethodId(
    r'onComplete',
    r'(J)V',
  );

  static final _onComplete = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int64,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void onComplete(long j)`
  void onComplete(
    int j,
  ) {
    _onComplete(reference.pointer, _id_onComplete as _$jni.JMethodIDPtr, j)
        .check();
  }
}

final class $WebView_VisualStateCallback$Type
    extends _$jni.JObjType<WebView_VisualStateCallback> {
  @_$jni.internal
  const $WebView_VisualStateCallback$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/webkit/WebView$VisualStateCallback;';

  @_$jni.internal
  @_$core.override
  WebView_VisualStateCallback fromReference(_$jni.JReference reference) =>
      WebView_VisualStateCallback.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WebView_VisualStateCallback$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebView_VisualStateCallback$Type) &&
        other is $WebView_VisualStateCallback$Type;
  }
}

/// from: `android.webkit.WebView$WebViewTransport`
class WebView_WebViewTransport extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WebView_WebViewTransport> $type;

  @_$jni.internal
  WebView_WebViewTransport.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'android/webkit/WebView$WebViewTransport');

  /// The type which includes information such as the signature of this class.
  static const type = $WebView_WebViewTransport$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroid/webkit/WebView;)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(android.webkit.WebView webView)`
  /// The returned object must be released after use, by calling the [release] method.
  factory WebView_WebViewTransport(
    WebView webView,
  ) {
    return WebView_WebViewTransport.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as _$jni.JMethodIDPtr,
            webView.reference.pointer)
        .reference);
  }

  static final _id_setWebView = _class.instanceMethodId(
    r'setWebView',
    r'(Landroid/webkit/WebView;)V',
  );

  static final _setWebView = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setWebView(android.webkit.WebView webView)`
  void setWebView(
    WebView webView,
  ) {
    _setWebView(reference.pointer, _id_setWebView as _$jni.JMethodIDPtr,
            webView.reference.pointer)
        .check();
  }

  static final _id_getWebView = _class.instanceMethodId(
    r'getWebView',
    r'()Landroid/webkit/WebView;',
  );

  static final _getWebView = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.webkit.WebView getWebView()`
  /// The returned object must be released after use, by calling the [release] method.
  WebView getWebView() {
    return _getWebView(reference.pointer, _id_getWebView as _$jni.JMethodIDPtr)
        .object(const $WebView$Type());
  }
}

final class $WebView_WebViewTransport$Type
    extends _$jni.JObjType<WebView_WebViewTransport> {
  @_$jni.internal
  const $WebView_WebViewTransport$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/webkit/WebView$WebViewTransport;';

  @_$jni.internal
  @_$core.override
  WebView_WebViewTransport fromReference(_$jni.JReference reference) =>
      WebView_WebViewTransport.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WebView_WebViewTransport$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebView_WebViewTransport$Type) &&
        other is $WebView_WebViewTransport$Type;
  }
}

/// from: `android.webkit.WebView`
class WebView extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WebView> $type;

  @_$jni.internal
  WebView.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(r'android/webkit/WebView');

  /// The type which includes information such as the signature of this class.
  static const type = $WebView$Type();

  /// from: `static public final int RENDERER_PRIORITY_BOUND`
  static const RENDERER_PRIORITY_BOUND = 1;

  /// from: `static public final int RENDERER_PRIORITY_IMPORTANT`
  static const RENDERER_PRIORITY_IMPORTANT = 2;

  /// from: `static public final int RENDERER_PRIORITY_WAIVED`
  static const RENDERER_PRIORITY_WAIVED = 0;
  static final _id_SCHEME_GEO = _class.staticFieldId(
    r'SCHEME_GEO',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SCHEME_GEO`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get SCHEME_GEO =>
      _id_SCHEME_GEO.get(_class, const _$jni.JStringType());

  static final _id_SCHEME_MAILTO = _class.staticFieldId(
    r'SCHEME_MAILTO',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SCHEME_MAILTO`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get SCHEME_MAILTO =>
      _id_SCHEME_MAILTO.get(_class, const _$jni.JStringType());

  static final _id_SCHEME_TEL = _class.staticFieldId(
    r'SCHEME_TEL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SCHEME_TEL`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get SCHEME_TEL =>
      _id_SCHEME_TEL.get(_class, const _$jni.JStringType());

  static final _id_new$ = _class.constructorId(
    r'(Landroid/content/Context;)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  factory WebView(
    _$jni.JObject context,
  ) {
    return WebView.fromReference(_new$(_class.reference.pointer,
            _id_new$ as _$jni.JMethodIDPtr, context.reference.pointer)
        .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Landroid/content/Context;Landroid/util/AttributeSet;)V',
  );

  static final _new$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(android.content.Context context, android.util.AttributeSet attributeSet)`
  /// The returned object must be released after use, by calling the [release] method.
  factory WebView.new$1(
    _$jni.JObject context,
    _$jni.JObject attributeSet,
  ) {
    return WebView.fromReference(_new$1(
            _class.reference.pointer,
            _id_new$1 as _$jni.JMethodIDPtr,
            context.reference.pointer,
            attributeSet.reference.pointer)
        .reference);
  }

  static final _id_new$2 = _class.constructorId(
    r'(Landroid/content/Context;Landroid/util/AttributeSet;I)V',
  );

  static final _new$2 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int)>();

  /// from: `public void <init>(android.content.Context context, android.util.AttributeSet attributeSet, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  factory WebView.new$2(
    _$jni.JObject context,
    _$jni.JObject attributeSet,
    int i,
  ) {
    return WebView.fromReference(_new$2(
            _class.reference.pointer,
            _id_new$2 as _$jni.JMethodIDPtr,
            context.reference.pointer,
            attributeSet.reference.pointer,
            i)
        .reference);
  }

  static final _id_new$3 = _class.constructorId(
    r'(Landroid/content/Context;Landroid/util/AttributeSet;II)V',
  );

  static final _new$3 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int,
              int)>();

  /// from: `public void <init>(android.content.Context context, android.util.AttributeSet attributeSet, int i, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory WebView.new$3(
    _$jni.JObject context,
    _$jni.JObject attributeSet,
    int i,
    int i1,
  ) {
    return WebView.fromReference(_new$3(
            _class.reference.pointer,
            _id_new$3 as _$jni.JMethodIDPtr,
            context.reference.pointer,
            attributeSet.reference.pointer,
            i,
            i1)
        .reference);
  }

  static final _id_new$4 = _class.constructorId(
    r'(Landroid/content/Context;Landroid/util/AttributeSet;IZ)V',
  );

  static final _new$4 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int,
              int)>();

  /// from: `public void <init>(android.content.Context context, android.util.AttributeSet attributeSet, int i, boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  factory WebView.new$4(
    _$jni.JObject context,
    _$jni.JObject attributeSet,
    int i,
    bool z,
  ) {
    return WebView.fromReference(_new$4(
            _class.reference.pointer,
            _id_new$4 as _$jni.JMethodIDPtr,
            context.reference.pointer,
            attributeSet.reference.pointer,
            i,
            z ? 1 : 0)
        .reference);
  }

  static final _id_setHorizontalScrollbarOverlay = _class.instanceMethodId(
    r'setHorizontalScrollbarOverlay',
    r'(Z)V',
  );

  static final _setHorizontalScrollbarOverlay =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void setHorizontalScrollbarOverlay(boolean z)`
  void setHorizontalScrollbarOverlay(
    bool z,
  ) {
    _setHorizontalScrollbarOverlay(reference.pointer,
            _id_setHorizontalScrollbarOverlay as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setVerticalScrollbarOverlay = _class.instanceMethodId(
    r'setVerticalScrollbarOverlay',
    r'(Z)V',
  );

  static final _setVerticalScrollbarOverlay =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void setVerticalScrollbarOverlay(boolean z)`
  void setVerticalScrollbarOverlay(
    bool z,
  ) {
    _setVerticalScrollbarOverlay(reference.pointer,
            _id_setVerticalScrollbarOverlay as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_overlayHorizontalScrollbar = _class.instanceMethodId(
    r'overlayHorizontalScrollbar',
    r'()Z',
  );

  static final _overlayHorizontalScrollbar =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public boolean overlayHorizontalScrollbar()`
  bool overlayHorizontalScrollbar() {
    return _overlayHorizontalScrollbar(reference.pointer,
            _id_overlayHorizontalScrollbar as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_overlayVerticalScrollbar = _class.instanceMethodId(
    r'overlayVerticalScrollbar',
    r'()Z',
  );

  static final _overlayVerticalScrollbar = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean overlayVerticalScrollbar()`
  bool overlayVerticalScrollbar() {
    return _overlayVerticalScrollbar(reference.pointer,
            _id_overlayVerticalScrollbar as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getCertificate = _class.instanceMethodId(
    r'getCertificate',
    r'()Landroid/net/http/SslCertificate;',
  );

  static final _getCertificate = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.net.http.SslCertificate getCertificate()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getCertificate() {
    return _getCertificate(
            reference.pointer, _id_getCertificate as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_setCertificate = _class.instanceMethodId(
    r'setCertificate',
    r'(Landroid/net/http/SslCertificate;)V',
  );

  static final _setCertificate = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setCertificate(android.net.http.SslCertificate sslCertificate)`
  void setCertificate(
    _$jni.JObject sslCertificate,
  ) {
    _setCertificate(reference.pointer, _id_setCertificate as _$jni.JMethodIDPtr,
            sslCertificate.reference.pointer)
        .check();
  }

  static final _id_savePassword = _class.instanceMethodId(
    r'savePassword',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _savePassword = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void savePassword(java.lang.String string, java.lang.String string1, java.lang.String string2)`
  void savePassword(
    _$jni.JString string,
    _$jni.JString string1,
    _$jni.JString string2,
  ) {
    _savePassword(
            reference.pointer,
            _id_savePassword as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer)
        .check();
  }

  static final _id_setHttpAuthUsernamePassword = _class.instanceMethodId(
    r'setHttpAuthUsernamePassword',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _setHttpAuthUsernamePassword =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setHttpAuthUsernamePassword(java.lang.String string, java.lang.String string1, java.lang.String string2, java.lang.String string3)`
  void setHttpAuthUsernamePassword(
    _$jni.JString string,
    _$jni.JString string1,
    _$jni.JString string2,
    _$jni.JString string3,
  ) {
    _setHttpAuthUsernamePassword(
            reference.pointer,
            _id_setHttpAuthUsernamePassword as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer,
            string3.reference.pointer)
        .check();
  }

  static final _id_getHttpAuthUsernamePassword = _class.instanceMethodId(
    r'getHttpAuthUsernamePassword',
    r'(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;',
  );

  static final _getHttpAuthUsernamePassword =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `public java.lang.String[] getHttpAuthUsernamePassword(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JArray<_$jni.JString> getHttpAuthUsernamePassword(
    _$jni.JString string,
    _$jni.JString string1,
  ) {
    return _getHttpAuthUsernamePassword(
            reference.pointer,
            _id_getHttpAuthUsernamePassword as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .object(const _$jni.JArrayType(_$jni.JStringType()));
  }

  static final _id_destroy = _class.instanceMethodId(
    r'destroy',
    r'()V',
  );

  static final _destroy = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void destroy()`
  void destroy() {
    _destroy(reference.pointer, _id_destroy as _$jni.JMethodIDPtr).check();
  }

  static final _id_setNetworkAvailable = _class.instanceMethodId(
    r'setNetworkAvailable',
    r'(Z)V',
  );

  static final _setNetworkAvailable = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void setNetworkAvailable(boolean z)`
  void setNetworkAvailable(
    bool z,
  ) {
    _setNetworkAvailable(reference.pointer,
            _id_setNetworkAvailable as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_saveState = _class.instanceMethodId(
    r'saveState',
    r'(Landroid/os/Bundle;)Landroid/webkit/WebBackForwardList;',
  );

  static final _saveState = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.webkit.WebBackForwardList saveState(android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject saveState(
    _$jni.JObject bundle,
  ) {
    return _saveState(reference.pointer, _id_saveState as _$jni.JMethodIDPtr,
            bundle.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_restoreState = _class.instanceMethodId(
    r'restoreState',
    r'(Landroid/os/Bundle;)Landroid/webkit/WebBackForwardList;',
  );

  static final _restoreState = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.webkit.WebBackForwardList restoreState(android.os.Bundle bundle)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject restoreState(
    _$jni.JObject bundle,
  ) {
    return _restoreState(reference.pointer,
            _id_restoreState as _$jni.JMethodIDPtr, bundle.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_loadUrl = _class.instanceMethodId(
    r'loadUrl',
    r'(Ljava/lang/String;Ljava/util/Map;)V',
  );

  static final _loadUrl = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void loadUrl(java.lang.String string, java.util.Map map)`
  void loadUrl(
    _$jni.JString string,
    _$jni.JMap<_$jni.JString, _$jni.JString> map,
  ) {
    _loadUrl(reference.pointer, _id_loadUrl as _$jni.JMethodIDPtr,
            string.reference.pointer, map.reference.pointer)
        .check();
  }

  static final _id_loadUrl$1 = _class.instanceMethodId(
    r'loadUrl',
    r'(Ljava/lang/String;)V',
  );

  static final _loadUrl$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void loadUrl(java.lang.String string)`
  void loadUrl$1(
    _$jni.JString string,
  ) {
    _loadUrl$1(reference.pointer, _id_loadUrl$1 as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_postUrl = _class.instanceMethodId(
    r'postUrl',
    r'(Ljava/lang/String;[B)V',
  );

  static final _postUrl = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void postUrl(java.lang.String string, byte[] bs)`
  void postUrl(
    _$jni.JString string,
    _$jni.JArray<_$jni.jbyte> bs,
  ) {
    _postUrl(reference.pointer, _id_postUrl as _$jni.JMethodIDPtr,
            string.reference.pointer, bs.reference.pointer)
        .check();
  }

  static final _id_loadData = _class.instanceMethodId(
    r'loadData',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _loadData = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void loadData(java.lang.String string, java.lang.String string1, java.lang.String string2)`
  void loadData(
    _$jni.JString string,
    _$jni.JString string1,
    _$jni.JString string2,
  ) {
    _loadData(
            reference.pointer,
            _id_loadData as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer)
        .check();
  }

  static final _id_loadDataWithBaseURL = _class.instanceMethodId(
    r'loadDataWithBaseURL',
    r'(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _loadDataWithBaseURL = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void loadDataWithBaseURL(java.lang.String string, java.lang.String string1, java.lang.String string2, java.lang.String string3, java.lang.String string4)`
  void loadDataWithBaseURL(
    _$jni.JString string,
    _$jni.JString string1,
    _$jni.JString string2,
    _$jni.JString string3,
    _$jni.JString string4,
  ) {
    _loadDataWithBaseURL(
            reference.pointer,
            _id_loadDataWithBaseURL as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            string2.reference.pointer,
            string3.reference.pointer,
            string4.reference.pointer)
        .check();
  }

  static final _id_evaluateJavascript = _class.instanceMethodId(
    r'evaluateJavascript',
    r'(Ljava/lang/String;Landroid/webkit/ValueCallback;)V',
  );

  static final _evaluateJavascript = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void evaluateJavascript(java.lang.String string, android.webkit.ValueCallback valueCallback)`
  void evaluateJavascript(
    _$jni.JString string,
    _$jni.JObject valueCallback,
  ) {
    _evaluateJavascript(
            reference.pointer,
            _id_evaluateJavascript as _$jni.JMethodIDPtr,
            string.reference.pointer,
            valueCallback.reference.pointer)
        .check();
  }

  static final _id_saveWebArchive = _class.instanceMethodId(
    r'saveWebArchive',
    r'(Ljava/lang/String;)V',
  );

  static final _saveWebArchive = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void saveWebArchive(java.lang.String string)`
  void saveWebArchive(
    _$jni.JString string,
  ) {
    _saveWebArchive(reference.pointer, _id_saveWebArchive as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_saveWebArchive$1 = _class.instanceMethodId(
    r'saveWebArchive',
    r'(Ljava/lang/String;ZLandroid/webkit/ValueCallback;)V',
  );

  static final _saveWebArchive$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              int,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void saveWebArchive(java.lang.String string, boolean z, android.webkit.ValueCallback valueCallback)`
  void saveWebArchive$1(
    _$jni.JString string,
    bool z,
    _$jni.JObject valueCallback,
  ) {
    _saveWebArchive$1(
            reference.pointer,
            _id_saveWebArchive$1 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            z ? 1 : 0,
            valueCallback.reference.pointer)
        .check();
  }

  static final _id_stopLoading = _class.instanceMethodId(
    r'stopLoading',
    r'()V',
  );

  static final _stopLoading = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void stopLoading()`
  void stopLoading() {
    _stopLoading(reference.pointer, _id_stopLoading as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_reload = _class.instanceMethodId(
    r'reload',
    r'()V',
  );

  static final _reload = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void reload()`
  void reload() {
    _reload(reference.pointer, _id_reload as _$jni.JMethodIDPtr).check();
  }

  static final _id_canGoBack = _class.instanceMethodId(
    r'canGoBack',
    r'()Z',
  );

  static final _canGoBack = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean canGoBack()`
  bool canGoBack() {
    return _canGoBack(reference.pointer, _id_canGoBack as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_goBack = _class.instanceMethodId(
    r'goBack',
    r'()V',
  );

  static final _goBack = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void goBack()`
  void goBack() {
    _goBack(reference.pointer, _id_goBack as _$jni.JMethodIDPtr).check();
  }

  static final _id_canGoForward = _class.instanceMethodId(
    r'canGoForward',
    r'()Z',
  );

  static final _canGoForward = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean canGoForward()`
  bool canGoForward() {
    return _canGoForward(
            reference.pointer, _id_canGoForward as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_goForward = _class.instanceMethodId(
    r'goForward',
    r'()V',
  );

  static final _goForward = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void goForward()`
  void goForward() {
    _goForward(reference.pointer, _id_goForward as _$jni.JMethodIDPtr).check();
  }

  static final _id_canGoBackOrForward = _class.instanceMethodId(
    r'canGoBackOrForward',
    r'(I)Z',
  );

  static final _canGoBackOrForward = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni
                      .VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public boolean canGoBackOrForward(int i)`
  bool canGoBackOrForward(
    int i,
  ) {
    return _canGoBackOrForward(
            reference.pointer, _id_canGoBackOrForward as _$jni.JMethodIDPtr, i)
        .boolean;
  }

  static final _id_goBackOrForward = _class.instanceMethodId(
    r'goBackOrForward',
    r'(I)V',
  );

  static final _goBackOrForward = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void goBackOrForward(int i)`
  void goBackOrForward(
    int i,
  ) {
    _goBackOrForward(
            reference.pointer, _id_goBackOrForward as _$jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_isPrivateBrowsingEnabled = _class.instanceMethodId(
    r'isPrivateBrowsingEnabled',
    r'()Z',
  );

  static final _isPrivateBrowsingEnabled = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isPrivateBrowsingEnabled()`
  bool isPrivateBrowsingEnabled() {
    return _isPrivateBrowsingEnabled(reference.pointer,
            _id_isPrivateBrowsingEnabled as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_pageUp = _class.instanceMethodId(
    r'pageUp',
    r'(Z)Z',
  );

  static final _pageUp = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni
                      .VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public boolean pageUp(boolean z)`
  bool pageUp(
    bool z,
  ) {
    return _pageUp(
            reference.pointer, _id_pageUp as _$jni.JMethodIDPtr, z ? 1 : 0)
        .boolean;
  }

  static final _id_pageDown = _class.instanceMethodId(
    r'pageDown',
    r'(Z)Z',
  );

  static final _pageDown = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni
                      .VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public boolean pageDown(boolean z)`
  bool pageDown(
    bool z,
  ) {
    return _pageDown(
            reference.pointer, _id_pageDown as _$jni.JMethodIDPtr, z ? 1 : 0)
        .boolean;
  }

  static final _id_postVisualStateCallback = _class.instanceMethodId(
    r'postVisualStateCallback',
    r'(JLandroid/webkit/WebView$VisualStateCallback;)V',
  );

  static final _postVisualStateCallback = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Int64, _$jni.Pointer<_$jni.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void postVisualStateCallback(long j, android.webkit.WebView$VisualStateCallback visualStateCallback)`
  void postVisualStateCallback(
    int j,
    WebView_VisualStateCallback visualStateCallback,
  ) {
    _postVisualStateCallback(
            reference.pointer,
            _id_postVisualStateCallback as _$jni.JMethodIDPtr,
            j,
            visualStateCallback.reference.pointer)
        .check();
  }

  static final _id_clearView = _class.instanceMethodId(
    r'clearView',
    r'()V',
  );

  static final _clearView = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void clearView()`
  void clearView() {
    _clearView(reference.pointer, _id_clearView as _$jni.JMethodIDPtr).check();
  }

  static final _id_capturePicture = _class.instanceMethodId(
    r'capturePicture',
    r'()Landroid/graphics/Picture;',
  );

  static final _capturePicture = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.graphics.Picture capturePicture()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject capturePicture() {
    return _capturePicture(
            reference.pointer, _id_capturePicture as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_createPrintDocumentAdapter = _class.instanceMethodId(
    r'createPrintDocumentAdapter',
    r'()Landroid/print/PrintDocumentAdapter;',
  );

  static final _createPrintDocumentAdapter =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public android.print.PrintDocumentAdapter createPrintDocumentAdapter()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject createPrintDocumentAdapter() {
    return _createPrintDocumentAdapter(reference.pointer,
            _id_createPrintDocumentAdapter as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_createPrintDocumentAdapter$1 = _class.instanceMethodId(
    r'createPrintDocumentAdapter',
    r'(Ljava/lang/String;)Landroid/print/PrintDocumentAdapter;',
  );

  static final _createPrintDocumentAdapter$1 =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.print.PrintDocumentAdapter createPrintDocumentAdapter(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject createPrintDocumentAdapter$1(
    _$jni.JString string,
  ) {
    return _createPrintDocumentAdapter$1(
            reference.pointer,
            _id_createPrintDocumentAdapter$1 as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getScale = _class.instanceMethodId(
    r'getScale',
    r'()F',
  );

  static final _getScale = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public float getScale()`
  double getScale() {
    return _getScale(reference.pointer, _id_getScale as _$jni.JMethodIDPtr)
        .float;
  }

  static final _id_setInitialScale = _class.instanceMethodId(
    r'setInitialScale',
    r'(I)V',
  );

  static final _setInitialScale = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void setInitialScale(int i)`
  void setInitialScale(
    int i,
  ) {
    _setInitialScale(
            reference.pointer, _id_setInitialScale as _$jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_invokeZoomPicker = _class.instanceMethodId(
    r'invokeZoomPicker',
    r'()V',
  );

  static final _invokeZoomPicker = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void invokeZoomPicker()`
  void invokeZoomPicker() {
    _invokeZoomPicker(
            reference.pointer, _id_invokeZoomPicker as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_getHitTestResult = _class.instanceMethodId(
    r'getHitTestResult',
    r'()Landroid/webkit/WebView$HitTestResult;',
  );

  static final _getHitTestResult = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.webkit.WebView$HitTestResult getHitTestResult()`
  /// The returned object must be released after use, by calling the [release] method.
  WebView_HitTestResult getHitTestResult() {
    return _getHitTestResult(
            reference.pointer, _id_getHitTestResult as _$jni.JMethodIDPtr)
        .object(const $WebView_HitTestResult$Type());
  }

  static final _id_requestFocusNodeHref = _class.instanceMethodId(
    r'requestFocusNodeHref',
    r'(Landroid/os/Message;)V',
  );

  static final _requestFocusNodeHref = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void requestFocusNodeHref(android.os.Message message)`
  void requestFocusNodeHref(
    _$jni.JObject message,
  ) {
    _requestFocusNodeHref(
            reference.pointer,
            _id_requestFocusNodeHref as _$jni.JMethodIDPtr,
            message.reference.pointer)
        .check();
  }

  static final _id_requestImageRef = _class.instanceMethodId(
    r'requestImageRef',
    r'(Landroid/os/Message;)V',
  );

  static final _requestImageRef = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void requestImageRef(android.os.Message message)`
  void requestImageRef(
    _$jni.JObject message,
  ) {
    _requestImageRef(
            reference.pointer,
            _id_requestImageRef as _$jni.JMethodIDPtr,
            message.reference.pointer)
        .check();
  }

  static final _id_getUrl = _class.instanceMethodId(
    r'getUrl',
    r'()Ljava/lang/String;',
  );

  static final _getUrl = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getUrl()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getUrl() {
    return _getUrl(reference.pointer, _id_getUrl as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getOriginalUrl = _class.instanceMethodId(
    r'getOriginalUrl',
    r'()Ljava/lang/String;',
  );

  static final _getOriginalUrl = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getOriginalUrl()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getOriginalUrl() {
    return _getOriginalUrl(
            reference.pointer, _id_getOriginalUrl as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getTitle = _class.instanceMethodId(
    r'getTitle',
    r'()Ljava/lang/String;',
  );

  static final _getTitle = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getTitle()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getTitle() {
    return _getTitle(reference.pointer, _id_getTitle as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getFavicon = _class.instanceMethodId(
    r'getFavicon',
    r'()Landroid/graphics/Bitmap;',
  );

  static final _getFavicon = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.graphics.Bitmap getFavicon()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getFavicon() {
    return _getFavicon(reference.pointer, _id_getFavicon as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_getProgress = _class.instanceMethodId(
    r'getProgress',
    r'()I',
  );

  static final _getProgress = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getProgress()`
  int getProgress() {
    return _getProgress(
            reference.pointer, _id_getProgress as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getContentHeight = _class.instanceMethodId(
    r'getContentHeight',
    r'()I',
  );

  static final _getContentHeight = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getContentHeight()`
  int getContentHeight() {
    return _getContentHeight(
            reference.pointer, _id_getContentHeight as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_pauseTimers = _class.instanceMethodId(
    r'pauseTimers',
    r'()V',
  );

  static final _pauseTimers = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void pauseTimers()`
  void pauseTimers() {
    _pauseTimers(reference.pointer, _id_pauseTimers as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_resumeTimers = _class.instanceMethodId(
    r'resumeTimers',
    r'()V',
  );

  static final _resumeTimers = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void resumeTimers()`
  void resumeTimers() {
    _resumeTimers(reference.pointer, _id_resumeTimers as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_onPause = _class.instanceMethodId(
    r'onPause',
    r'()V',
  );

  static final _onPause = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void onPause()`
  void onPause() {
    _onPause(reference.pointer, _id_onPause as _$jni.JMethodIDPtr).check();
  }

  static final _id_onResume = _class.instanceMethodId(
    r'onResume',
    r'()V',
  );

  static final _onResume = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void onResume()`
  void onResume() {
    _onResume(reference.pointer, _id_onResume as _$jni.JMethodIDPtr).check();
  }

  static final _id_freeMemory = _class.instanceMethodId(
    r'freeMemory',
    r'()V',
  );

  static final _freeMemory = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void freeMemory()`
  void freeMemory() {
    _freeMemory(reference.pointer, _id_freeMemory as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_clearCache = _class.instanceMethodId(
    r'clearCache',
    r'(Z)V',
  );

  static final _clearCache = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void clearCache(boolean z)`
  void clearCache(
    bool z,
  ) {
    _clearCache(
            reference.pointer, _id_clearCache as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_clearFormData = _class.instanceMethodId(
    r'clearFormData',
    r'()V',
  );

  static final _clearFormData = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void clearFormData()`
  void clearFormData() {
    _clearFormData(reference.pointer, _id_clearFormData as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_clearHistory = _class.instanceMethodId(
    r'clearHistory',
    r'()V',
  );

  static final _clearHistory = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void clearHistory()`
  void clearHistory() {
    _clearHistory(reference.pointer, _id_clearHistory as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_clearSslPreferences = _class.instanceMethodId(
    r'clearSslPreferences',
    r'()V',
  );

  static final _clearSslPreferences = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void clearSslPreferences()`
  void clearSslPreferences() {
    _clearSslPreferences(
            reference.pointer, _id_clearSslPreferences as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_clearClientCertPreferences = _class.staticMethodId(
    r'clearClientCertPreferences',
    r'(Ljava/lang/Runnable;)V',
  );

  static final _clearClientCertPreferences =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallStaticVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void clearClientCertPreferences(java.lang.Runnable runnable)`
  static void clearClientCertPreferences(
    _$jni.JObject runnable,
  ) {
    _clearClientCertPreferences(
            _class.reference.pointer,
            _id_clearClientCertPreferences as _$jni.JMethodIDPtr,
            runnable.reference.pointer)
        .check();
  }

  static final _id_startSafeBrowsing = _class.staticMethodId(
    r'startSafeBrowsing',
    r'(Landroid/content/Context;Landroid/webkit/ValueCallback;)V',
  );

  static final _startSafeBrowsing = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void startSafeBrowsing(android.content.Context context, android.webkit.ValueCallback valueCallback)`
  static void startSafeBrowsing(
    _$jni.JObject context,
    _$jni.JObject valueCallback,
  ) {
    _startSafeBrowsing(
            _class.reference.pointer,
            _id_startSafeBrowsing as _$jni.JMethodIDPtr,
            context.reference.pointer,
            valueCallback.reference.pointer)
        .check();
  }

  static final _id_setSafeBrowsingWhitelist = _class.staticMethodId(
    r'setSafeBrowsingWhitelist',
    r'(Ljava/util/List;Landroid/webkit/ValueCallback;)V',
  );

  static final _setSafeBrowsingWhitelist = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void setSafeBrowsingWhitelist(java.util.List list, android.webkit.ValueCallback valueCallback)`
  static void setSafeBrowsingWhitelist(
    _$jni.JList<_$jni.JString> list,
    _$jni.JObject valueCallback,
  ) {
    _setSafeBrowsingWhitelist(
            _class.reference.pointer,
            _id_setSafeBrowsingWhitelist as _$jni.JMethodIDPtr,
            list.reference.pointer,
            valueCallback.reference.pointer)
        .check();
  }

  static final _id_getSafeBrowsingPrivacyPolicyUrl = _class.staticMethodId(
    r'getSafeBrowsingPrivacyPolicyUrl',
    r'()Landroid/net/Uri;',
  );

  static final _getSafeBrowsingPrivacyPolicyUrl =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallStaticObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `static public android.net.Uri getSafeBrowsingPrivacyPolicyUrl()`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject getSafeBrowsingPrivacyPolicyUrl() {
    return _getSafeBrowsingPrivacyPolicyUrl(_class.reference.pointer,
            _id_getSafeBrowsingPrivacyPolicyUrl as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_copyBackForwardList = _class.instanceMethodId(
    r'copyBackForwardList',
    r'()Landroid/webkit/WebBackForwardList;',
  );

  static final _copyBackForwardList = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.webkit.WebBackForwardList copyBackForwardList()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject copyBackForwardList() {
    return _copyBackForwardList(
            reference.pointer, _id_copyBackForwardList as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_setFindListener = _class.instanceMethodId(
    r'setFindListener',
    r'(Landroid/webkit/WebView$FindListener;)V',
  );

  static final _setFindListener = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setFindListener(android.webkit.WebView$FindListener findListener)`
  void setFindListener(
    WebView_FindListener findListener,
  ) {
    _setFindListener(
            reference.pointer,
            _id_setFindListener as _$jni.JMethodIDPtr,
            findListener.reference.pointer)
        .check();
  }

  static final _id_findNext = _class.instanceMethodId(
    r'findNext',
    r'(Z)V',
  );

  static final _findNext = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void findNext(boolean z)`
  void findNext(
    bool z,
  ) {
    _findNext(reference.pointer, _id_findNext as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_findAll = _class.instanceMethodId(
    r'findAll',
    r'(Ljava/lang/String;)I',
  );

  static final _findAll = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public int findAll(java.lang.String string)`
  int findAll(
    _$jni.JString string,
  ) {
    return _findAll(reference.pointer, _id_findAll as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .integer;
  }

  static final _id_findAllAsync = _class.instanceMethodId(
    r'findAllAsync',
    r'(Ljava/lang/String;)V',
  );

  static final _findAllAsync = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void findAllAsync(java.lang.String string)`
  void findAllAsync(
    _$jni.JString string,
  ) {
    _findAllAsync(reference.pointer, _id_findAllAsync as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_showFindDialog = _class.instanceMethodId(
    r'showFindDialog',
    r'(Ljava/lang/String;Z)Z',
  );

  static final _showFindDialog = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public boolean showFindDialog(java.lang.String string, boolean z)`
  bool showFindDialog(
    _$jni.JString string,
    bool z,
  ) {
    return _showFindDialog(
            reference.pointer,
            _id_showFindDialog as _$jni.JMethodIDPtr,
            string.reference.pointer,
            z ? 1 : 0)
        .boolean;
  }

  static final _id_findAddress = _class.staticMethodId(
    r'findAddress',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _findAddress = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public java.lang.String findAddress(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString findAddress(
    _$jni.JString string,
  ) {
    return _findAddress(_class.reference.pointer,
            _id_findAddress as _$jni.JMethodIDPtr, string.reference.pointer)
        .object(const _$jni.JStringType());
  }

  static final _id_enableSlowWholeDocumentDraw = _class.staticMethodId(
    r'enableSlowWholeDocumentDraw',
    r'()V',
  );

  static final _enableSlowWholeDocumentDraw =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallStaticVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `static public void enableSlowWholeDocumentDraw()`
  static void enableSlowWholeDocumentDraw() {
    _enableSlowWholeDocumentDraw(_class.reference.pointer,
            _id_enableSlowWholeDocumentDraw as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_clearMatches = _class.instanceMethodId(
    r'clearMatches',
    r'()V',
  );

  static final _clearMatches = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void clearMatches()`
  void clearMatches() {
    _clearMatches(reference.pointer, _id_clearMatches as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_documentHasImages = _class.instanceMethodId(
    r'documentHasImages',
    r'(Landroid/os/Message;)V',
  );

  static final _documentHasImages = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void documentHasImages(android.os.Message message)`
  void documentHasImages(
    _$jni.JObject message,
  ) {
    _documentHasImages(
            reference.pointer,
            _id_documentHasImages as _$jni.JMethodIDPtr,
            message.reference.pointer)
        .check();
  }

  static final _id_setWebViewClient = _class.instanceMethodId(
    r'setWebViewClient',
    r'(Landroid/webkit/WebViewClient;)V',
  );

  static final _setWebViewClient = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setWebViewClient(android.webkit.WebViewClient webViewClient)`
  void setWebViewClient(
    _$jni.JObject webViewClient,
  ) {
    _setWebViewClient(
            reference.pointer,
            _id_setWebViewClient as _$jni.JMethodIDPtr,
            webViewClient.reference.pointer)
        .check();
  }

  static final _id_getWebViewClient = _class.instanceMethodId(
    r'getWebViewClient',
    r'()Landroid/webkit/WebViewClient;',
  );

  static final _getWebViewClient = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.webkit.WebViewClient getWebViewClient()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getWebViewClient() {
    return _getWebViewClient(
            reference.pointer, _id_getWebViewClient as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_getWebViewRenderProcess = _class.instanceMethodId(
    r'getWebViewRenderProcess',
    r'()Landroid/webkit/WebViewRenderProcess;',
  );

  static final _getWebViewRenderProcess = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.webkit.WebViewRenderProcess getWebViewRenderProcess()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getWebViewRenderProcess() {
    return _getWebViewRenderProcess(reference.pointer,
            _id_getWebViewRenderProcess as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_setWebViewRenderProcessClient = _class.instanceMethodId(
    r'setWebViewRenderProcessClient',
    r'(Ljava/util/concurrent/Executor;Landroid/webkit/WebViewRenderProcessClient;)V',
  );

  static final _setWebViewRenderProcessClient =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setWebViewRenderProcessClient(java.util.concurrent.Executor executor, android.webkit.WebViewRenderProcessClient webViewRenderProcessClient)`
  void setWebViewRenderProcessClient(
    _$jni.JObject executor,
    _$jni.JObject webViewRenderProcessClient,
  ) {
    _setWebViewRenderProcessClient(
            reference.pointer,
            _id_setWebViewRenderProcessClient as _$jni.JMethodIDPtr,
            executor.reference.pointer,
            webViewRenderProcessClient.reference.pointer)
        .check();
  }

  static final _id_setWebViewRenderProcessClient$1 = _class.instanceMethodId(
    r'setWebViewRenderProcessClient',
    r'(Landroid/webkit/WebViewRenderProcessClient;)V',
  );

  static final _setWebViewRenderProcessClient$1 =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setWebViewRenderProcessClient(android.webkit.WebViewRenderProcessClient webViewRenderProcessClient)`
  void setWebViewRenderProcessClient$1(
    _$jni.JObject webViewRenderProcessClient,
  ) {
    _setWebViewRenderProcessClient$1(
            reference.pointer,
            _id_setWebViewRenderProcessClient$1 as _$jni.JMethodIDPtr,
            webViewRenderProcessClient.reference.pointer)
        .check();
  }

  static final _id_getWebViewRenderProcessClient = _class.instanceMethodId(
    r'getWebViewRenderProcessClient',
    r'()Landroid/webkit/WebViewRenderProcessClient;',
  );

  static final _getWebViewRenderProcessClient =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public android.webkit.WebViewRenderProcessClient getWebViewRenderProcessClient()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getWebViewRenderProcessClient() {
    return _getWebViewRenderProcessClient(reference.pointer,
            _id_getWebViewRenderProcessClient as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_setDownloadListener = _class.instanceMethodId(
    r'setDownloadListener',
    r'(Landroid/webkit/DownloadListener;)V',
  );

  static final _setDownloadListener = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setDownloadListener(android.webkit.DownloadListener downloadListener)`
  void setDownloadListener(
    _$jni.JObject downloadListener,
  ) {
    _setDownloadListener(
            reference.pointer,
            _id_setDownloadListener as _$jni.JMethodIDPtr,
            downloadListener.reference.pointer)
        .check();
  }

  static final _id_setWebChromeClient = _class.instanceMethodId(
    r'setWebChromeClient',
    r'(Landroid/webkit/WebChromeClient;)V',
  );

  static final _setWebChromeClient = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setWebChromeClient(android.webkit.WebChromeClient webChromeClient)`
  void setWebChromeClient(
    _$jni.JObject webChromeClient,
  ) {
    _setWebChromeClient(
            reference.pointer,
            _id_setWebChromeClient as _$jni.JMethodIDPtr,
            webChromeClient.reference.pointer)
        .check();
  }

  static final _id_getWebChromeClient = _class.instanceMethodId(
    r'getWebChromeClient',
    r'()Landroid/webkit/WebChromeClient;',
  );

  static final _getWebChromeClient = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.webkit.WebChromeClient getWebChromeClient()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getWebChromeClient() {
    return _getWebChromeClient(
            reference.pointer, _id_getWebChromeClient as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_setPictureListener = _class.instanceMethodId(
    r'setPictureListener',
    r'(Landroid/webkit/WebView$PictureListener;)V',
  );

  static final _setPictureListener = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setPictureListener(android.webkit.WebView$PictureListener pictureListener)`
  void setPictureListener(
    WebView_PictureListener pictureListener,
  ) {
    _setPictureListener(
            reference.pointer,
            _id_setPictureListener as _$jni.JMethodIDPtr,
            pictureListener.reference.pointer)
        .check();
  }

  static final _id_addJavascriptInterface = _class.instanceMethodId(
    r'addJavascriptInterface',
    r'(Ljava/lang/Object;Ljava/lang/String;)V',
  );

  static final _addJavascriptInterface = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addJavascriptInterface(java.lang.Object object, java.lang.String string)`
  void addJavascriptInterface(
    _$jni.JObject object,
    _$jni.JString string,
  ) {
    _addJavascriptInterface(
            reference.pointer,
            _id_addJavascriptInterface as _$jni.JMethodIDPtr,
            object.reference.pointer,
            string.reference.pointer)
        .check();
  }

  static final _id_removeJavascriptInterface = _class.instanceMethodId(
    r'removeJavascriptInterface',
    r'(Ljava/lang/String;)V',
  );

  static final _removeJavascriptInterface = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void removeJavascriptInterface(java.lang.String string)`
  void removeJavascriptInterface(
    _$jni.JString string,
  ) {
    _removeJavascriptInterface(
            reference.pointer,
            _id_removeJavascriptInterface as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_createWebMessageChannel = _class.instanceMethodId(
    r'createWebMessageChannel',
    r'()[Landroid/webkit/WebMessagePort;',
  );

  static final _createWebMessageChannel = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.webkit.WebMessagePort[] createWebMessageChannel()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JArray<_$jni.JObject> createWebMessageChannel() {
    return _createWebMessageChannel(reference.pointer,
            _id_createWebMessageChannel as _$jni.JMethodIDPtr)
        .object(const _$jni.JArrayType(_$jni.JObjectType()));
  }

  static final _id_postWebMessage = _class.instanceMethodId(
    r'postWebMessage',
    r'(Landroid/webkit/WebMessage;Landroid/net/Uri;)V',
  );

  static final _postWebMessage = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void postWebMessage(android.webkit.WebMessage webMessage, android.net.Uri uri)`
  void postWebMessage(
    _$jni.JObject webMessage,
    _$jni.JObject uri,
  ) {
    _postWebMessage(reference.pointer, _id_postWebMessage as _$jni.JMethodIDPtr,
            webMessage.reference.pointer, uri.reference.pointer)
        .check();
  }

  static final _id_getSettings = _class.instanceMethodId(
    r'getSettings',
    r'()Landroid/webkit/WebSettings;',
  );

  static final _getSettings = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.webkit.WebSettings getSettings()`
  /// The returned object must be released after use, by calling the [release] method.
  WebSettings getSettings() {
    return _getSettings(
            reference.pointer, _id_getSettings as _$jni.JMethodIDPtr)
        .object(const $WebSettings$Type());
  }

  static final _id_setWebContentsDebuggingEnabled = _class.staticMethodId(
    r'setWebContentsDebuggingEnabled',
    r'(Z)V',
  );

  static final _setWebContentsDebuggingEnabled =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
              'globalEnv_CallStaticVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public void setWebContentsDebuggingEnabled(boolean z)`
  static void setWebContentsDebuggingEnabled(
    bool z,
  ) {
    _setWebContentsDebuggingEnabled(_class.reference.pointer,
            _id_setWebContentsDebuggingEnabled as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setDataDirectorySuffix = _class.staticMethodId(
    r'setDataDirectorySuffix',
    r'(Ljava/lang/String;)V',
  );

  static final _setDataDirectorySuffix = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void setDataDirectorySuffix(java.lang.String string)`
  static void setDataDirectorySuffix(
    _$jni.JString string,
  ) {
    _setDataDirectorySuffix(
            _class.reference.pointer,
            _id_setDataDirectorySuffix as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_disableWebView = _class.staticMethodId(
    r'disableWebView',
    r'()V',
  );

  static final _disableWebView = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public void disableWebView()`
  static void disableWebView() {
    _disableWebView(
            _class.reference.pointer, _id_disableWebView as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_onChildViewAdded = _class.instanceMethodId(
    r'onChildViewAdded',
    r'(Landroid/view/View;Landroid/view/View;)V',
  );

  static final _onChildViewAdded = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void onChildViewAdded(android.view.View view, android.view.View view1)`
  void onChildViewAdded(
    _$jni.JObject view,
    _$jni.JObject view1,
  ) {
    _onChildViewAdded(
            reference.pointer,
            _id_onChildViewAdded as _$jni.JMethodIDPtr,
            view.reference.pointer,
            view1.reference.pointer)
        .check();
  }

  static final _id_onChildViewRemoved = _class.instanceMethodId(
    r'onChildViewRemoved',
    r'(Landroid/view/View;Landroid/view/View;)V',
  );

  static final _onChildViewRemoved = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void onChildViewRemoved(android.view.View view, android.view.View view1)`
  void onChildViewRemoved(
    _$jni.JObject view,
    _$jni.JObject view1,
  ) {
    _onChildViewRemoved(
            reference.pointer,
            _id_onChildViewRemoved as _$jni.JMethodIDPtr,
            view.reference.pointer,
            view1.reference.pointer)
        .check();
  }

  static final _id_onGlobalFocusChanged = _class.instanceMethodId(
    r'onGlobalFocusChanged',
    r'(Landroid/view/View;Landroid/view/View;)V',
  );

  static final _onGlobalFocusChanged = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void onGlobalFocusChanged(android.view.View view, android.view.View view1)`
  void onGlobalFocusChanged(
    _$jni.JObject view,
    _$jni.JObject view1,
  ) {
    _onGlobalFocusChanged(
            reference.pointer,
            _id_onGlobalFocusChanged as _$jni.JMethodIDPtr,
            view.reference.pointer,
            view1.reference.pointer)
        .check();
  }

  static final _id_setMapTrackballToArrowKeys = _class.instanceMethodId(
    r'setMapTrackballToArrowKeys',
    r'(Z)V',
  );

  static final _setMapTrackballToArrowKeys =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void setMapTrackballToArrowKeys(boolean z)`
  void setMapTrackballToArrowKeys(
    bool z,
  ) {
    _setMapTrackballToArrowKeys(reference.pointer,
            _id_setMapTrackballToArrowKeys as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_flingScroll = _class.instanceMethodId(
    r'flingScroll',
    r'(II)V',
  );

  static final _flingScroll = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();

  /// from: `public void flingScroll(int i, int i1)`
  void flingScroll(
    int i,
    int i1,
  ) {
    _flingScroll(
            reference.pointer, _id_flingScroll as _$jni.JMethodIDPtr, i, i1)
        .check();
  }

  static final _id_canZoomIn = _class.instanceMethodId(
    r'canZoomIn',
    r'()Z',
  );

  static final _canZoomIn = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean canZoomIn()`
  bool canZoomIn() {
    return _canZoomIn(reference.pointer, _id_canZoomIn as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_canZoomOut = _class.instanceMethodId(
    r'canZoomOut',
    r'()Z',
  );

  static final _canZoomOut = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean canZoomOut()`
  bool canZoomOut() {
    return _canZoomOut(reference.pointer, _id_canZoomOut as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_zoomBy = _class.instanceMethodId(
    r'zoomBy',
    r'(F)V',
  );

  static final _zoomBy = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Double,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, double)>();

  /// from: `public void zoomBy(float f)`
  void zoomBy(
    double f,
  ) {
    _zoomBy(reference.pointer, _id_zoomBy as _$jni.JMethodIDPtr, f).check();
  }

  static final _id_zoomIn = _class.instanceMethodId(
    r'zoomIn',
    r'()Z',
  );

  static final _zoomIn = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean zoomIn()`
  bool zoomIn() {
    return _zoomIn(reference.pointer, _id_zoomIn as _$jni.JMethodIDPtr).boolean;
  }

  static final _id_zoomOut = _class.instanceMethodId(
    r'zoomOut',
    r'()Z',
  );

  static final _zoomOut = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean zoomOut()`
  bool zoomOut() {
    return _zoomOut(reference.pointer, _id_zoomOut as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setRendererPriorityPolicy = _class.instanceMethodId(
    r'setRendererPriorityPolicy',
    r'(IZ)V',
  );

  static final _setRendererPriorityPolicy = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();

  /// from: `public void setRendererPriorityPolicy(int i, boolean z)`
  void setRendererPriorityPolicy(
    int i,
    bool z,
  ) {
    _setRendererPriorityPolicy(reference.pointer,
            _id_setRendererPriorityPolicy as _$jni.JMethodIDPtr, i, z ? 1 : 0)
        .check();
  }

  static final _id_getRendererRequestedPriority = _class.instanceMethodId(
    r'getRendererRequestedPriority',
    r'()I',
  );

  static final _getRendererRequestedPriority =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallIntMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public int getRendererRequestedPriority()`
  int getRendererRequestedPriority() {
    return _getRendererRequestedPriority(reference.pointer,
            _id_getRendererRequestedPriority as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getRendererPriorityWaivedWhenNotVisible =
      _class.instanceMethodId(
    r'getRendererPriorityWaivedWhenNotVisible',
    r'()Z',
  );

  static final _getRendererPriorityWaivedWhenNotVisible =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public boolean getRendererPriorityWaivedWhenNotVisible()`
  bool getRendererPriorityWaivedWhenNotVisible() {
    return _getRendererPriorityWaivedWhenNotVisible(reference.pointer,
            _id_getRendererPriorityWaivedWhenNotVisible as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setTextClassifier = _class.instanceMethodId(
    r'setTextClassifier',
    r'(Landroid/view/textclassifier/TextClassifier;)V',
  );

  static final _setTextClassifier = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setTextClassifier(android.view.textclassifier.TextClassifier textClassifier)`
  void setTextClassifier(
    _$jni.JObject textClassifier,
  ) {
    _setTextClassifier(
            reference.pointer,
            _id_setTextClassifier as _$jni.JMethodIDPtr,
            textClassifier.reference.pointer)
        .check();
  }

  static final _id_getTextClassifier = _class.instanceMethodId(
    r'getTextClassifier',
    r'()Landroid/view/textclassifier/TextClassifier;',
  );

  static final _getTextClassifier = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.view.textclassifier.TextClassifier getTextClassifier()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getTextClassifier() {
    return _getTextClassifier(
            reference.pointer, _id_getTextClassifier as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_getWebViewClassLoader = _class.staticMethodId(
    r'getWebViewClassLoader',
    r'()Ljava/lang/ClassLoader;',
  );

  static final _getWebViewClassLoader = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public java.lang.ClassLoader getWebViewClassLoader()`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject getWebViewClassLoader() {
    return _getWebViewClassLoader(_class.reference.pointer,
            _id_getWebViewClassLoader as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_getWebViewLooper = _class.instanceMethodId(
    r'getWebViewLooper',
    r'()Landroid/os/Looper;',
  );

  static final _getWebViewLooper = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.os.Looper getWebViewLooper()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getWebViewLooper() {
    return _getWebViewLooper(
            reference.pointer, _id_getWebViewLooper as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_setLayoutParams = _class.instanceMethodId(
    r'setLayoutParams',
    r'(Landroid/view/ViewGroup$LayoutParams;)V',
  );

  static final _setLayoutParams = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setLayoutParams(android.view.ViewGroup$LayoutParams layoutParams)`
  void setLayoutParams(
    _$jni.JObject layoutParams,
  ) {
    _setLayoutParams(
            reference.pointer,
            _id_setLayoutParams as _$jni.JMethodIDPtr,
            layoutParams.reference.pointer)
        .check();
  }

  static final _id_setOverScrollMode = _class.instanceMethodId(
    r'setOverScrollMode',
    r'(I)V',
  );

  static final _setOverScrollMode = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void setOverScrollMode(int i)`
  void setOverScrollMode(
    int i,
  ) {
    _setOverScrollMode(
            reference.pointer, _id_setOverScrollMode as _$jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_setScrollBarStyle = _class.instanceMethodId(
    r'setScrollBarStyle',
    r'(I)V',
  );

  static final _setScrollBarStyle = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void setScrollBarStyle(int i)`
  void setScrollBarStyle(
    int i,
  ) {
    _setScrollBarStyle(
            reference.pointer, _id_setScrollBarStyle as _$jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_computeScroll = _class.instanceMethodId(
    r'computeScroll',
    r'()V',
  );

  static final _computeScroll = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void computeScroll()`
  void computeScroll() {
    _computeScroll(reference.pointer, _id_computeScroll as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_onHoverEvent = _class.instanceMethodId(
    r'onHoverEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _onHoverEvent = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean onHoverEvent(android.view.MotionEvent motionEvent)`
  bool onHoverEvent(
    _$jni.JObject motionEvent,
  ) {
    return _onHoverEvent(
            reference.pointer,
            _id_onHoverEvent as _$jni.JMethodIDPtr,
            motionEvent.reference.pointer)
        .boolean;
  }

  static final _id_onTouchEvent = _class.instanceMethodId(
    r'onTouchEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _onTouchEvent = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean onTouchEvent(android.view.MotionEvent motionEvent)`
  bool onTouchEvent(
    _$jni.JObject motionEvent,
  ) {
    return _onTouchEvent(
            reference.pointer,
            _id_onTouchEvent as _$jni.JMethodIDPtr,
            motionEvent.reference.pointer)
        .boolean;
  }

  static final _id_onGenericMotionEvent = _class.instanceMethodId(
    r'onGenericMotionEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _onGenericMotionEvent = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean onGenericMotionEvent(android.view.MotionEvent motionEvent)`
  bool onGenericMotionEvent(
    _$jni.JObject motionEvent,
  ) {
    return _onGenericMotionEvent(
            reference.pointer,
            _id_onGenericMotionEvent as _$jni.JMethodIDPtr,
            motionEvent.reference.pointer)
        .boolean;
  }

  static final _id_onTrackballEvent = _class.instanceMethodId(
    r'onTrackballEvent',
    r'(Landroid/view/MotionEvent;)Z',
  );

  static final _onTrackballEvent = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean onTrackballEvent(android.view.MotionEvent motionEvent)`
  bool onTrackballEvent(
    _$jni.JObject motionEvent,
  ) {
    return _onTrackballEvent(
            reference.pointer,
            _id_onTrackballEvent as _$jni.JMethodIDPtr,
            motionEvent.reference.pointer)
        .boolean;
  }

  static final _id_onKeyDown = _class.instanceMethodId(
    r'onKeyDown',
    r'(ILandroid/view/KeyEvent;)Z',
  );

  static final _onKeyDown = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Int32, _$jni.Pointer<_$jni.Void>)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean onKeyDown(int i, android.view.KeyEvent keyEvent)`
  bool onKeyDown(
    int i,
    _$jni.JObject keyEvent,
  ) {
    return _onKeyDown(reference.pointer, _id_onKeyDown as _$jni.JMethodIDPtr, i,
            keyEvent.reference.pointer)
        .boolean;
  }

  static final _id_onKeyUp = _class.instanceMethodId(
    r'onKeyUp',
    r'(ILandroid/view/KeyEvent;)Z',
  );

  static final _onKeyUp = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Int32, _$jni.Pointer<_$jni.Void>)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean onKeyUp(int i, android.view.KeyEvent keyEvent)`
  bool onKeyUp(
    int i,
    _$jni.JObject keyEvent,
  ) {
    return _onKeyUp(reference.pointer, _id_onKeyUp as _$jni.JMethodIDPtr, i,
            keyEvent.reference.pointer)
        .boolean;
  }

  static final _id_onKeyMultiple = _class.instanceMethodId(
    r'onKeyMultiple',
    r'(IILandroid/view/KeyEvent;)Z',
  );

  static final _onKeyMultiple = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, int, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean onKeyMultiple(int i, int i1, android.view.KeyEvent keyEvent)`
  bool onKeyMultiple(
    int i,
    int i1,
    _$jni.JObject keyEvent,
  ) {
    return _onKeyMultiple(
            reference.pointer,
            _id_onKeyMultiple as _$jni.JMethodIDPtr,
            i,
            i1,
            keyEvent.reference.pointer)
        .boolean;
  }

  static final _id_getAccessibilityNodeProvider = _class.instanceMethodId(
    r'getAccessibilityNodeProvider',
    r'()Landroid/view/accessibility/AccessibilityNodeProvider;',
  );

  static final _getAccessibilityNodeProvider =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getAccessibilityNodeProvider() {
    return _getAccessibilityNodeProvider(reference.pointer,
            _id_getAccessibilityNodeProvider as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_shouldDelayChildPressedState = _class.instanceMethodId(
    r'shouldDelayChildPressedState',
    r'()Z',
  );

  static final _shouldDelayChildPressedState =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public boolean shouldDelayChildPressedState()`
  bool shouldDelayChildPressedState() {
    return _shouldDelayChildPressedState(reference.pointer,
            _id_shouldDelayChildPressedState as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getAccessibilityClassName = _class.instanceMethodId(
    r'getAccessibilityClassName',
    r'()Ljava/lang/CharSequence;',
  );

  static final _getAccessibilityClassName = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.CharSequence getAccessibilityClassName()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getAccessibilityClassName() {
    return _getAccessibilityClassName(reference.pointer,
            _id_getAccessibilityClassName as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_onProvideVirtualStructure = _class.instanceMethodId(
    r'onProvideVirtualStructure',
    r'(Landroid/view/ViewStructure;)V',
  );

  static final _onProvideVirtualStructure = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void onProvideVirtualStructure(android.view.ViewStructure viewStructure)`
  void onProvideVirtualStructure(
    _$jni.JObject viewStructure,
  ) {
    _onProvideVirtualStructure(
            reference.pointer,
            _id_onProvideVirtualStructure as _$jni.JMethodIDPtr,
            viewStructure.reference.pointer)
        .check();
  }

  static final _id_onProvideAutofillVirtualStructure = _class.instanceMethodId(
    r'onProvideAutofillVirtualStructure',
    r'(Landroid/view/ViewStructure;I)V',
  );

  static final _onProvideAutofillVirtualStructure =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Int32
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public void onProvideAutofillVirtualStructure(android.view.ViewStructure viewStructure, int i)`
  void onProvideAutofillVirtualStructure(
    _$jni.JObject viewStructure,
    int i,
  ) {
    _onProvideAutofillVirtualStructure(
            reference.pointer,
            _id_onProvideAutofillVirtualStructure as _$jni.JMethodIDPtr,
            viewStructure.reference.pointer,
            i)
        .check();
  }

  static final _id_onProvideContentCaptureStructure = _class.instanceMethodId(
    r'onProvideContentCaptureStructure',
    r'(Landroid/view/ViewStructure;I)V',
  );

  static final _onProvideContentCaptureStructure =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Int32
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public void onProvideContentCaptureStructure(android.view.ViewStructure viewStructure, int i)`
  void onProvideContentCaptureStructure(
    _$jni.JObject viewStructure,
    int i,
  ) {
    _onProvideContentCaptureStructure(
            reference.pointer,
            _id_onProvideContentCaptureStructure as _$jni.JMethodIDPtr,
            viewStructure.reference.pointer,
            i)
        .check();
  }

  static final _id_autofill = _class.instanceMethodId(
    r'autofill',
    r'(Landroid/util/SparseArray;)V',
  );

  static final _autofill = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void autofill(android.util.SparseArray sparseArray)`
  void autofill(
    _$jni.JObject sparseArray,
  ) {
    _autofill(reference.pointer, _id_autofill as _$jni.JMethodIDPtr,
            sparseArray.reference.pointer)
        .check();
  }

  static final _id_isVisibleToUserForAutofill = _class.instanceMethodId(
    r'isVisibleToUserForAutofill',
    r'(I)Z',
  );

  static final _isVisibleToUserForAutofill =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
              'globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public boolean isVisibleToUserForAutofill(int i)`
  bool isVisibleToUserForAutofill(
    int i,
  ) {
    return _isVisibleToUserForAutofill(reference.pointer,
            _id_isVisibleToUserForAutofill as _$jni.JMethodIDPtr, i)
        .boolean;
  }

  static final _id_onCreateVirtualViewTranslationRequests =
      _class.instanceMethodId(
    r'onCreateVirtualViewTranslationRequests',
    r'([J[ILjava/util/function/Consumer;)V',
  );

  static final _onCreateVirtualViewTranslationRequests =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void onCreateVirtualViewTranslationRequests(java.lang.Object[] js, java.lang.Object[] is, java.util.function.Consumer consumer)`
  void onCreateVirtualViewTranslationRequests(
    _$jni.JArray<_$jni.jlong> js,
    _$jni.JArray<_$jni.jint> is$,
    Consumer<_$jni.JObject> consumer,
  ) {
    _onCreateVirtualViewTranslationRequests(
            reference.pointer,
            _id_onCreateVirtualViewTranslationRequests as _$jni.JMethodIDPtr,
            js.reference.pointer,
            is$.reference.pointer,
            consumer.reference.pointer)
        .check();
  }

  static final _id_dispatchCreateViewTranslationRequest =
      _class.instanceMethodId(
    r'dispatchCreateViewTranslationRequest',
    r'(Ljava/util/Map;[ILandroid/view/translation/TranslationCapability;Ljava/util/List;)V',
  );

  static final _dispatchCreateViewTranslationRequest =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void dispatchCreateViewTranslationRequest(java.util.Map map, java.lang.Object[] is, android.view.translation.TranslationCapability translationCapability, java.util.List list)`
  void dispatchCreateViewTranslationRequest(
    _$jni.JMap<_$jni.JObject, _$jni.JArray<_$jni.jlong>> map,
    _$jni.JArray<_$jni.jint> is$,
    _$jni.JObject translationCapability,
    _$jni.JList<_$jni.JObject> list,
  ) {
    _dispatchCreateViewTranslationRequest(
            reference.pointer,
            _id_dispatchCreateViewTranslationRequest as _$jni.JMethodIDPtr,
            map.reference.pointer,
            is$.reference.pointer,
            translationCapability.reference.pointer,
            list.reference.pointer)
        .check();
  }

  static final _id_onVirtualViewTranslationResponses = _class.instanceMethodId(
    r'onVirtualViewTranslationResponses',
    r'(Landroid/util/LongSparseArray;)V',
  );

  static final _onVirtualViewTranslationResponses =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void onVirtualViewTranslationResponses(android.util.LongSparseArray longSparseArray)`
  void onVirtualViewTranslationResponses(
    _$jni.JObject longSparseArray,
  ) {
    _onVirtualViewTranslationResponses(
            reference.pointer,
            _id_onVirtualViewTranslationResponses as _$jni.JMethodIDPtr,
            longSparseArray.reference.pointer)
        .check();
  }

  static final _id_performLongClick = _class.instanceMethodId(
    r'performLongClick',
    r'()Z',
  );

  static final _performLongClick = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean performLongClick()`
  bool performLongClick() {
    return _performLongClick(
            reference.pointer, _id_performLongClick as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_onCreateInputConnection = _class.instanceMethodId(
    r'onCreateInputConnection',
    r'(Landroid/view/inputmethod/EditorInfo;)Landroid/view/inputmethod/InputConnection;',
  );

  static final _onCreateInputConnection = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo editorInfo)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject onCreateInputConnection(
    _$jni.JObject editorInfo,
  ) {
    return _onCreateInputConnection(
            reference.pointer,
            _id_onCreateInputConnection as _$jni.JMethodIDPtr,
            editorInfo.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_onDragEvent = _class.instanceMethodId(
    r'onDragEvent',
    r'(Landroid/view/DragEvent;)Z',
  );

  static final _onDragEvent = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean onDragEvent(android.view.DragEvent dragEvent)`
  bool onDragEvent(
    _$jni.JObject dragEvent,
  ) {
    return _onDragEvent(reference.pointer,
            _id_onDragEvent as _$jni.JMethodIDPtr, dragEvent.reference.pointer)
        .boolean;
  }

  static final _id_onWindowFocusChanged = _class.instanceMethodId(
    r'onWindowFocusChanged',
    r'(Z)V',
  );

  static final _onWindowFocusChanged = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void onWindowFocusChanged(boolean z)`
  void onWindowFocusChanged(
    bool z,
  ) {
    _onWindowFocusChanged(reference.pointer,
            _id_onWindowFocusChanged as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_dispatchKeyEvent = _class.instanceMethodId(
    r'dispatchKeyEvent',
    r'(Landroid/view/KeyEvent;)Z',
  );

  static final _dispatchKeyEvent = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean dispatchKeyEvent(android.view.KeyEvent keyEvent)`
  bool dispatchKeyEvent(
    _$jni.JObject keyEvent,
  ) {
    return _dispatchKeyEvent(
            reference.pointer,
            _id_dispatchKeyEvent as _$jni.JMethodIDPtr,
            keyEvent.reference.pointer)
        .boolean;
  }

  static final _id_requestFocus = _class.instanceMethodId(
    r'requestFocus',
    r'(ILandroid/graphics/Rect;)Z',
  );

  static final _requestFocus = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Int32, _$jni.Pointer<_$jni.Void>)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean requestFocus(int i, android.graphics.Rect rect)`
  bool requestFocus(
    int i,
    _$jni.JObject rect,
  ) {
    return _requestFocus(reference.pointer,
            _id_requestFocus as _$jni.JMethodIDPtr, i, rect.reference.pointer)
        .boolean;
  }

  static final _id_requestChildRectangleOnScreen = _class.instanceMethodId(
    r'requestChildRectangleOnScreen',
    r'(Landroid/view/View;Landroid/graphics/Rect;Z)Z',
  );

  static final _requestChildRectangleOnScreen =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Int32
                          )>)>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>,
                  int)>();

  /// from: `public boolean requestChildRectangleOnScreen(android.view.View view, android.graphics.Rect rect, boolean z)`
  bool requestChildRectangleOnScreen(
    _$jni.JObject view,
    _$jni.JObject rect,
    bool z,
  ) {
    return _requestChildRectangleOnScreen(
            reference.pointer,
            _id_requestChildRectangleOnScreen as _$jni.JMethodIDPtr,
            view.reference.pointer,
            rect.reference.pointer,
            z ? 1 : 0)
        .boolean;
  }

  static final _id_setBackgroundColor = _class.instanceMethodId(
    r'setBackgroundColor',
    r'(I)V',
  );

  static final _setBackgroundColor = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void setBackgroundColor(int i)`
  void setBackgroundColor(
    int i,
  ) {
    _setBackgroundColor(
            reference.pointer, _id_setBackgroundColor as _$jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_setLayerType = _class.instanceMethodId(
    r'setLayerType',
    r'(ILandroid/graphics/Paint;)V',
  );

  static final _setLayerType = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Int32, _$jni.Pointer<_$jni.Void>)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setLayerType(int i, android.graphics.Paint paint)`
  void setLayerType(
    int i,
    _$jni.JObject paint,
  ) {
    _setLayerType(reference.pointer, _id_setLayerType as _$jni.JMethodIDPtr, i,
            paint.reference.pointer)
        .check();
  }

  static final _id_onStartTemporaryDetach = _class.instanceMethodId(
    r'onStartTemporaryDetach',
    r'()V',
  );

  static final _onStartTemporaryDetach = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void onStartTemporaryDetach()`
  void onStartTemporaryDetach() {
    _onStartTemporaryDetach(
            reference.pointer, _id_onStartTemporaryDetach as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_onFinishTemporaryDetach = _class.instanceMethodId(
    r'onFinishTemporaryDetach',
    r'()V',
  );

  static final _onFinishTemporaryDetach = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void onFinishTemporaryDetach()`
  void onFinishTemporaryDetach() {
    _onFinishTemporaryDetach(reference.pointer,
            _id_onFinishTemporaryDetach as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_getHandler = _class.instanceMethodId(
    r'getHandler',
    r'()Landroid/os/Handler;',
  );

  static final _getHandler = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.os.Handler getHandler()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getHandler() {
    return _getHandler(reference.pointer, _id_getHandler as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_findFocus = _class.instanceMethodId(
    r'findFocus',
    r'()Landroid/view/View;',
  );

  static final _findFocus = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.view.View findFocus()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject findFocus() {
    return _findFocus(reference.pointer, _id_findFocus as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_getCurrentWebViewPackage = _class.staticMethodId(
    r'getCurrentWebViewPackage',
    r'()Landroid/content/pm/PackageInfo;',
  );

  static final _getCurrentWebViewPackage = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public android.content.pm.PackageInfo getCurrentWebViewPackage()`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject getCurrentWebViewPackage() {
    return _getCurrentWebViewPackage(_class.reference.pointer,
            _id_getCurrentWebViewPackage as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_onCheckIsTextEditor = _class.instanceMethodId(
    r'onCheckIsTextEditor',
    r'()Z',
  );

  static final _onCheckIsTextEditor = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean onCheckIsTextEditor()`
  bool onCheckIsTextEditor() {
    return _onCheckIsTextEditor(
            reference.pointer, _id_onCheckIsTextEditor as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_onApplyWindowInsets = _class.instanceMethodId(
    r'onApplyWindowInsets',
    r'(Landroid/view/WindowInsets;)Landroid/view/WindowInsets;',
  );

  static final _onApplyWindowInsets = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets windowInsets)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject onApplyWindowInsets(
    _$jni.JObject windowInsets,
  ) {
    return _onApplyWindowInsets(
            reference.pointer,
            _id_onApplyWindowInsets as _$jni.JMethodIDPtr,
            windowInsets.reference.pointer)
        .object(const _$jni.JObjectType());
  }
}

final class $WebView$Type extends _$jni.JObjType<WebView> {
  @_$jni.internal
  const $WebView$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/webkit/WebView;';

  @_$jni.internal
  @_$core.override
  WebView fromReference(_$jni.JReference reference) =>
      WebView.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WebView$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebView$Type) && other is $WebView$Type;
  }
}

/// from: `android.webkit.WebSettings$LayoutAlgorithm`
class WebSettings_LayoutAlgorithm extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WebSettings_LayoutAlgorithm> $type;

  @_$jni.internal
  WebSettings_LayoutAlgorithm.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'android/webkit/WebSettings$LayoutAlgorithm');

  /// The type which includes information such as the signature of this class.
  static const type = $WebSettings_LayoutAlgorithm$Type();
  static final _id_NORMAL = _class.staticFieldId(
    r'NORMAL',
    r'Landroid/webkit/WebSettings$LayoutAlgorithm;',
  );

  /// from: `static public final android.webkit.WebSettings$LayoutAlgorithm NORMAL`
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_LayoutAlgorithm get NORMAL =>
      _id_NORMAL.get(_class, const $WebSettings_LayoutAlgorithm$Type());

  static final _id_SINGLE_COLUMN = _class.staticFieldId(
    r'SINGLE_COLUMN',
    r'Landroid/webkit/WebSettings$LayoutAlgorithm;',
  );

  /// from: `static public final android.webkit.WebSettings$LayoutAlgorithm SINGLE_COLUMN`
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_LayoutAlgorithm get SINGLE_COLUMN =>
      _id_SINGLE_COLUMN.get(_class, const $WebSettings_LayoutAlgorithm$Type());

  static final _id_NARROW_COLUMNS = _class.staticFieldId(
    r'NARROW_COLUMNS',
    r'Landroid/webkit/WebSettings$LayoutAlgorithm;',
  );

  /// from: `static public final android.webkit.WebSettings$LayoutAlgorithm NARROW_COLUMNS`
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_LayoutAlgorithm get NARROW_COLUMNS =>
      _id_NARROW_COLUMNS.get(_class, const $WebSettings_LayoutAlgorithm$Type());

  static final _id_TEXT_AUTOSIZING = _class.staticFieldId(
    r'TEXT_AUTOSIZING',
    r'Landroid/webkit/WebSettings$LayoutAlgorithm;',
  );

  /// from: `static public final android.webkit.WebSettings$LayoutAlgorithm TEXT_AUTOSIZING`
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_LayoutAlgorithm get TEXT_AUTOSIZING => _id_TEXT_AUTOSIZING
      .get(_class, const $WebSettings_LayoutAlgorithm$Type());

  static final _id_values = _class.staticMethodId(
    r'values',
    r'()[Landroid/webkit/WebSettings$LayoutAlgorithm;',
  );

  static final _values = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public android.webkit.WebSettings$LayoutAlgorithm[] values()`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JArray<WebSettings_LayoutAlgorithm> values() {
    return _values(_class.reference.pointer, _id_values as _$jni.JMethodIDPtr)
        .object(const _$jni.JArrayType($WebSettings_LayoutAlgorithm$Type()));
  }

  static final _id_valueOf = _class.staticMethodId(
    r'valueOf',
    r'(Ljava/lang/String;)Landroid/webkit/WebSettings$LayoutAlgorithm;',
  );

  static final _valueOf = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public android.webkit.WebSettings$LayoutAlgorithm valueOf(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_LayoutAlgorithm valueOf(
    _$jni.JString string,
  ) {
    return _valueOf(_class.reference.pointer, _id_valueOf as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $WebSettings_LayoutAlgorithm$Type());
  }
}

final class $WebSettings_LayoutAlgorithm$Type
    extends _$jni.JObjType<WebSettings_LayoutAlgorithm> {
  @_$jni.internal
  const $WebSettings_LayoutAlgorithm$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/webkit/WebSettings$LayoutAlgorithm;';

  @_$jni.internal
  @_$core.override
  WebSettings_LayoutAlgorithm fromReference(_$jni.JReference reference) =>
      WebSettings_LayoutAlgorithm.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WebSettings_LayoutAlgorithm$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebSettings_LayoutAlgorithm$Type) &&
        other is $WebSettings_LayoutAlgorithm$Type;
  }
}

/// from: `android.webkit.WebSettings$PluginState`
class WebSettings_PluginState extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WebSettings_PluginState> $type;

  @_$jni.internal
  WebSettings_PluginState.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'android/webkit/WebSettings$PluginState');

  /// The type which includes information such as the signature of this class.
  static const type = $WebSettings_PluginState$Type();
  static final _id_ON = _class.staticFieldId(
    r'ON',
    r'Landroid/webkit/WebSettings$PluginState;',
  );

  /// from: `static public final android.webkit.WebSettings$PluginState ON`
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_PluginState get ON =>
      _id_ON.get(_class, const $WebSettings_PluginState$Type());

  static final _id_ON_DEMAND = _class.staticFieldId(
    r'ON_DEMAND',
    r'Landroid/webkit/WebSettings$PluginState;',
  );

  /// from: `static public final android.webkit.WebSettings$PluginState ON_DEMAND`
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_PluginState get ON_DEMAND =>
      _id_ON_DEMAND.get(_class, const $WebSettings_PluginState$Type());

  static final _id_OFF = _class.staticFieldId(
    r'OFF',
    r'Landroid/webkit/WebSettings$PluginState;',
  );

  /// from: `static public final android.webkit.WebSettings$PluginState OFF`
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_PluginState get OFF =>
      _id_OFF.get(_class, const $WebSettings_PluginState$Type());

  static final _id_values = _class.staticMethodId(
    r'values',
    r'()[Landroid/webkit/WebSettings$PluginState;',
  );

  static final _values = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public android.webkit.WebSettings$PluginState[] values()`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JArray<WebSettings_PluginState> values() {
    return _values(_class.reference.pointer, _id_values as _$jni.JMethodIDPtr)
        .object(const _$jni.JArrayType($WebSettings_PluginState$Type()));
  }

  static final _id_valueOf = _class.staticMethodId(
    r'valueOf',
    r'(Ljava/lang/String;)Landroid/webkit/WebSettings$PluginState;',
  );

  static final _valueOf = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public android.webkit.WebSettings$PluginState valueOf(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_PluginState valueOf(
    _$jni.JString string,
  ) {
    return _valueOf(_class.reference.pointer, _id_valueOf as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $WebSettings_PluginState$Type());
  }
}

final class $WebSettings_PluginState$Type
    extends _$jni.JObjType<WebSettings_PluginState> {
  @_$jni.internal
  const $WebSettings_PluginState$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/webkit/WebSettings$PluginState;';

  @_$jni.internal
  @_$core.override
  WebSettings_PluginState fromReference(_$jni.JReference reference) =>
      WebSettings_PluginState.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WebSettings_PluginState$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebSettings_PluginState$Type) &&
        other is $WebSettings_PluginState$Type;
  }
}

/// from: `android.webkit.WebSettings$RenderPriority`
class WebSettings_RenderPriority extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WebSettings_RenderPriority> $type;

  @_$jni.internal
  WebSettings_RenderPriority.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'android/webkit/WebSettings$RenderPriority');

  /// The type which includes information such as the signature of this class.
  static const type = $WebSettings_RenderPriority$Type();
  static final _id_NORMAL = _class.staticFieldId(
    r'NORMAL',
    r'Landroid/webkit/WebSettings$RenderPriority;',
  );

  /// from: `static public final android.webkit.WebSettings$RenderPriority NORMAL`
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_RenderPriority get NORMAL =>
      _id_NORMAL.get(_class, const $WebSettings_RenderPriority$Type());

  static final _id_HIGH = _class.staticFieldId(
    r'HIGH',
    r'Landroid/webkit/WebSettings$RenderPriority;',
  );

  /// from: `static public final android.webkit.WebSettings$RenderPriority HIGH`
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_RenderPriority get HIGH =>
      _id_HIGH.get(_class, const $WebSettings_RenderPriority$Type());

  static final _id_LOW = _class.staticFieldId(
    r'LOW',
    r'Landroid/webkit/WebSettings$RenderPriority;',
  );

  /// from: `static public final android.webkit.WebSettings$RenderPriority LOW`
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_RenderPriority get LOW =>
      _id_LOW.get(_class, const $WebSettings_RenderPriority$Type());

  static final _id_values = _class.staticMethodId(
    r'values',
    r'()[Landroid/webkit/WebSettings$RenderPriority;',
  );

  static final _values = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public android.webkit.WebSettings$RenderPriority[] values()`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JArray<WebSettings_RenderPriority> values() {
    return _values(_class.reference.pointer, _id_values as _$jni.JMethodIDPtr)
        .object(const _$jni.JArrayType($WebSettings_RenderPriority$Type()));
  }

  static final _id_valueOf = _class.staticMethodId(
    r'valueOf',
    r'(Ljava/lang/String;)Landroid/webkit/WebSettings$RenderPriority;',
  );

  static final _valueOf = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public android.webkit.WebSettings$RenderPriority valueOf(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_RenderPriority valueOf(
    _$jni.JString string,
  ) {
    return _valueOf(_class.reference.pointer, _id_valueOf as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $WebSettings_RenderPriority$Type());
  }
}

final class $WebSettings_RenderPriority$Type
    extends _$jni.JObjType<WebSettings_RenderPriority> {
  @_$jni.internal
  const $WebSettings_RenderPriority$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/webkit/WebSettings$RenderPriority;';

  @_$jni.internal
  @_$core.override
  WebSettings_RenderPriority fromReference(_$jni.JReference reference) =>
      WebSettings_RenderPriority.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WebSettings_RenderPriority$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebSettings_RenderPriority$Type) &&
        other is $WebSettings_RenderPriority$Type;
  }
}

/// from: `android.webkit.WebSettings$TextSize`
class WebSettings_TextSize extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WebSettings_TextSize> $type;

  @_$jni.internal
  WebSettings_TextSize.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'android/webkit/WebSettings$TextSize');

  /// The type which includes information such as the signature of this class.
  static const type = $WebSettings_TextSize$Type();
  static final _id_SMALLEST = _class.staticFieldId(
    r'SMALLEST',
    r'Landroid/webkit/WebSettings$TextSize;',
  );

  /// from: `static public final android.webkit.WebSettings$TextSize SMALLEST`
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_TextSize get SMALLEST =>
      _id_SMALLEST.get(_class, const $WebSettings_TextSize$Type());

  static final _id_SMALLER = _class.staticFieldId(
    r'SMALLER',
    r'Landroid/webkit/WebSettings$TextSize;',
  );

  /// from: `static public final android.webkit.WebSettings$TextSize SMALLER`
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_TextSize get SMALLER =>
      _id_SMALLER.get(_class, const $WebSettings_TextSize$Type());

  static final _id_NORMAL = _class.staticFieldId(
    r'NORMAL',
    r'Landroid/webkit/WebSettings$TextSize;',
  );

  /// from: `static public final android.webkit.WebSettings$TextSize NORMAL`
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_TextSize get NORMAL =>
      _id_NORMAL.get(_class, const $WebSettings_TextSize$Type());

  static final _id_LARGER = _class.staticFieldId(
    r'LARGER',
    r'Landroid/webkit/WebSettings$TextSize;',
  );

  /// from: `static public final android.webkit.WebSettings$TextSize LARGER`
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_TextSize get LARGER =>
      _id_LARGER.get(_class, const $WebSettings_TextSize$Type());

  static final _id_LARGEST = _class.staticFieldId(
    r'LARGEST',
    r'Landroid/webkit/WebSettings$TextSize;',
  );

  /// from: `static public final android.webkit.WebSettings$TextSize LARGEST`
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_TextSize get LARGEST =>
      _id_LARGEST.get(_class, const $WebSettings_TextSize$Type());

  static final _id_values = _class.staticMethodId(
    r'values',
    r'()[Landroid/webkit/WebSettings$TextSize;',
  );

  static final _values = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public android.webkit.WebSettings$TextSize[] values()`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JArray<WebSettings_TextSize> values() {
    return _values(_class.reference.pointer, _id_values as _$jni.JMethodIDPtr)
        .object(const _$jni.JArrayType($WebSettings_TextSize$Type()));
  }

  static final _id_valueOf = _class.staticMethodId(
    r'valueOf',
    r'(Ljava/lang/String;)Landroid/webkit/WebSettings$TextSize;',
  );

  static final _valueOf = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public android.webkit.WebSettings$TextSize valueOf(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_TextSize valueOf(
    _$jni.JString string,
  ) {
    return _valueOf(_class.reference.pointer, _id_valueOf as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $WebSettings_TextSize$Type());
  }
}

final class $WebSettings_TextSize$Type
    extends _$jni.JObjType<WebSettings_TextSize> {
  @_$jni.internal
  const $WebSettings_TextSize$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/webkit/WebSettings$TextSize;';

  @_$jni.internal
  @_$core.override
  WebSettings_TextSize fromReference(_$jni.JReference reference) =>
      WebSettings_TextSize.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WebSettings_TextSize$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebSettings_TextSize$Type) &&
        other is $WebSettings_TextSize$Type;
  }
}

/// from: `android.webkit.WebSettings$ZoomDensity`
class WebSettings_ZoomDensity extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WebSettings_ZoomDensity> $type;

  @_$jni.internal
  WebSettings_ZoomDensity.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'android/webkit/WebSettings$ZoomDensity');

  /// The type which includes information such as the signature of this class.
  static const type = $WebSettings_ZoomDensity$Type();
  static final _id_FAR = _class.staticFieldId(
    r'FAR',
    r'Landroid/webkit/WebSettings$ZoomDensity;',
  );

  /// from: `static public final android.webkit.WebSettings$ZoomDensity FAR`
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_ZoomDensity get FAR =>
      _id_FAR.get(_class, const $WebSettings_ZoomDensity$Type());

  static final _id_MEDIUM = _class.staticFieldId(
    r'MEDIUM',
    r'Landroid/webkit/WebSettings$ZoomDensity;',
  );

  /// from: `static public final android.webkit.WebSettings$ZoomDensity MEDIUM`
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_ZoomDensity get MEDIUM =>
      _id_MEDIUM.get(_class, const $WebSettings_ZoomDensity$Type());

  static final _id_CLOSE = _class.staticFieldId(
    r'CLOSE',
    r'Landroid/webkit/WebSettings$ZoomDensity;',
  );

  /// from: `static public final android.webkit.WebSettings$ZoomDensity CLOSE`
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_ZoomDensity get CLOSE =>
      _id_CLOSE.get(_class, const $WebSettings_ZoomDensity$Type());

  static final _id_values = _class.staticMethodId(
    r'values',
    r'()[Landroid/webkit/WebSettings$ZoomDensity;',
  );

  static final _values = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public android.webkit.WebSettings$ZoomDensity[] values()`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JArray<WebSettings_ZoomDensity> values() {
    return _values(_class.reference.pointer, _id_values as _$jni.JMethodIDPtr)
        .object(const _$jni.JArrayType($WebSettings_ZoomDensity$Type()));
  }

  static final _id_valueOf = _class.staticMethodId(
    r'valueOf',
    r'(Ljava/lang/String;)Landroid/webkit/WebSettings$ZoomDensity;',
  );

  static final _valueOf = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public android.webkit.WebSettings$ZoomDensity valueOf(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static WebSettings_ZoomDensity valueOf(
    _$jni.JString string,
  ) {
    return _valueOf(_class.reference.pointer, _id_valueOf as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $WebSettings_ZoomDensity$Type());
  }
}

final class $WebSettings_ZoomDensity$Type
    extends _$jni.JObjType<WebSettings_ZoomDensity> {
  @_$jni.internal
  const $WebSettings_ZoomDensity$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/webkit/WebSettings$ZoomDensity;';

  @_$jni.internal
  @_$core.override
  WebSettings_ZoomDensity fromReference(_$jni.JReference reference) =>
      WebSettings_ZoomDensity.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WebSettings_ZoomDensity$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebSettings_ZoomDensity$Type) &&
        other is $WebSettings_ZoomDensity$Type;
  }
}

/// from: `android.webkit.WebSettings`
class WebSettings extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WebSettings> $type;

  @_$jni.internal
  WebSettings.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(r'android/webkit/WebSettings');

  /// The type which includes information such as the signature of this class.
  static const type = $WebSettings$Type();

  /// from: `static public final int FORCE_DARK_AUTO`
  static const FORCE_DARK_AUTO = 1;

  /// from: `static public final int FORCE_DARK_OFF`
  static const FORCE_DARK_OFF = 0;

  /// from: `static public final int FORCE_DARK_ON`
  static const FORCE_DARK_ON = 2;

  /// from: `static public final int LOAD_CACHE_ELSE_NETWORK`
  static const LOAD_CACHE_ELSE_NETWORK = 1;

  /// from: `static public final int LOAD_CACHE_ONLY`
  static const LOAD_CACHE_ONLY = 3;

  /// from: `static public final int LOAD_DEFAULT`
  static const LOAD_DEFAULT = -1;

  /// from: `static public final int LOAD_NORMAL`
  static const LOAD_NORMAL = 0;

  /// from: `static public final int LOAD_NO_CACHE`
  static const LOAD_NO_CACHE = 2;

  /// from: `static public final int MENU_ITEM_NONE`
  static const MENU_ITEM_NONE = 0;

  /// from: `static public final int MENU_ITEM_PROCESS_TEXT`
  static const MENU_ITEM_PROCESS_TEXT = 4;

  /// from: `static public final int MENU_ITEM_SHARE`
  static const MENU_ITEM_SHARE = 1;

  /// from: `static public final int MENU_ITEM_WEB_SEARCH`
  static const MENU_ITEM_WEB_SEARCH = 2;

  /// from: `static public final int MIXED_CONTENT_ALWAYS_ALLOW`
  static const MIXED_CONTENT_ALWAYS_ALLOW = 0;

  /// from: `static public final int MIXED_CONTENT_COMPATIBILITY_MODE`
  static const MIXED_CONTENT_COMPATIBILITY_MODE = 2;

  /// from: `static public final int MIXED_CONTENT_NEVER_ALLOW`
  static const MIXED_CONTENT_NEVER_ALLOW = 1;
  static final _id_setSupportZoom = _class.instanceMethodId(
    r'setSupportZoom',
    r'(Z)V',
  );

  static final _setSupportZoom = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setSupportZoom(boolean z)`
  void setSupportZoom(
    bool z,
  ) {
    _setSupportZoom(reference.pointer, _id_setSupportZoom as _$jni.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_supportZoom = _class.instanceMethodId(
    r'supportZoom',
    r'()Z',
  );

  static final _supportZoom = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean supportZoom()`
  bool supportZoom() {
    return _supportZoom(
            reference.pointer, _id_supportZoom as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setMediaPlaybackRequiresUserGesture =
      _class.instanceMethodId(
    r'setMediaPlaybackRequiresUserGesture',
    r'(Z)V',
  );

  static final _setMediaPlaybackRequiresUserGesture =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setMediaPlaybackRequiresUserGesture(boolean z)`
  void setMediaPlaybackRequiresUserGesture(
    bool z,
  ) {
    _setMediaPlaybackRequiresUserGesture(
            reference.pointer,
            _id_setMediaPlaybackRequiresUserGesture as _$jni.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_getMediaPlaybackRequiresUserGesture =
      _class.instanceMethodId(
    r'getMediaPlaybackRequiresUserGesture',
    r'()Z',
  );

  static final _getMediaPlaybackRequiresUserGesture =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public abstract boolean getMediaPlaybackRequiresUserGesture()`
  bool getMediaPlaybackRequiresUserGesture() {
    return _getMediaPlaybackRequiresUserGesture(reference.pointer,
            _id_getMediaPlaybackRequiresUserGesture as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setBuiltInZoomControls = _class.instanceMethodId(
    r'setBuiltInZoomControls',
    r'(Z)V',
  );

  static final _setBuiltInZoomControls = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setBuiltInZoomControls(boolean z)`
  void setBuiltInZoomControls(
    bool z,
  ) {
    _setBuiltInZoomControls(reference.pointer,
            _id_setBuiltInZoomControls as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_getBuiltInZoomControls = _class.instanceMethodId(
    r'getBuiltInZoomControls',
    r'()Z',
  );

  static final _getBuiltInZoomControls = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean getBuiltInZoomControls()`
  bool getBuiltInZoomControls() {
    return _getBuiltInZoomControls(
            reference.pointer, _id_getBuiltInZoomControls as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setDisplayZoomControls = _class.instanceMethodId(
    r'setDisplayZoomControls',
    r'(Z)V',
  );

  static final _setDisplayZoomControls = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setDisplayZoomControls(boolean z)`
  void setDisplayZoomControls(
    bool z,
  ) {
    _setDisplayZoomControls(reference.pointer,
            _id_setDisplayZoomControls as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_getDisplayZoomControls = _class.instanceMethodId(
    r'getDisplayZoomControls',
    r'()Z',
  );

  static final _getDisplayZoomControls = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean getDisplayZoomControls()`
  bool getDisplayZoomControls() {
    return _getDisplayZoomControls(
            reference.pointer, _id_getDisplayZoomControls as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setAllowFileAccess = _class.instanceMethodId(
    r'setAllowFileAccess',
    r'(Z)V',
  );

  static final _setAllowFileAccess = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setAllowFileAccess(boolean z)`
  void setAllowFileAccess(
    bool z,
  ) {
    _setAllowFileAccess(reference.pointer,
            _id_setAllowFileAccess as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_getAllowFileAccess = _class.instanceMethodId(
    r'getAllowFileAccess',
    r'()Z',
  );

  static final _getAllowFileAccess = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean getAllowFileAccess()`
  bool getAllowFileAccess() {
    return _getAllowFileAccess(
            reference.pointer, _id_getAllowFileAccess as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setAllowContentAccess = _class.instanceMethodId(
    r'setAllowContentAccess',
    r'(Z)V',
  );

  static final _setAllowContentAccess = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setAllowContentAccess(boolean z)`
  void setAllowContentAccess(
    bool z,
  ) {
    _setAllowContentAccess(reference.pointer,
            _id_setAllowContentAccess as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_getAllowContentAccess = _class.instanceMethodId(
    r'getAllowContentAccess',
    r'()Z',
  );

  static final _getAllowContentAccess = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean getAllowContentAccess()`
  bool getAllowContentAccess() {
    return _getAllowContentAccess(
            reference.pointer, _id_getAllowContentAccess as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setLoadWithOverviewMode = _class.instanceMethodId(
    r'setLoadWithOverviewMode',
    r'(Z)V',
  );

  static final _setLoadWithOverviewMode = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setLoadWithOverviewMode(boolean z)`
  void setLoadWithOverviewMode(
    bool z,
  ) {
    _setLoadWithOverviewMode(reference.pointer,
            _id_setLoadWithOverviewMode as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_getLoadWithOverviewMode = _class.instanceMethodId(
    r'getLoadWithOverviewMode',
    r'()Z',
  );

  static final _getLoadWithOverviewMode = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean getLoadWithOverviewMode()`
  bool getLoadWithOverviewMode() {
    return _getLoadWithOverviewMode(reference.pointer,
            _id_getLoadWithOverviewMode as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setEnableSmoothTransition = _class.instanceMethodId(
    r'setEnableSmoothTransition',
    r'(Z)V',
  );

  static final _setEnableSmoothTransition = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setEnableSmoothTransition(boolean z)`
  void setEnableSmoothTransition(
    bool z,
  ) {
    _setEnableSmoothTransition(reference.pointer,
            _id_setEnableSmoothTransition as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_enableSmoothTransition = _class.instanceMethodId(
    r'enableSmoothTransition',
    r'()Z',
  );

  static final _enableSmoothTransition = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean enableSmoothTransition()`
  bool enableSmoothTransition() {
    return _enableSmoothTransition(
            reference.pointer, _id_enableSmoothTransition as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setSaveFormData = _class.instanceMethodId(
    r'setSaveFormData',
    r'(Z)V',
  );

  static final _setSaveFormData = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setSaveFormData(boolean z)`
  void setSaveFormData(
    bool z,
  ) {
    _setSaveFormData(reference.pointer,
            _id_setSaveFormData as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_getSaveFormData = _class.instanceMethodId(
    r'getSaveFormData',
    r'()Z',
  );

  static final _getSaveFormData = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean getSaveFormData()`
  bool getSaveFormData() {
    return _getSaveFormData(
            reference.pointer, _id_getSaveFormData as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setSavePassword = _class.instanceMethodId(
    r'setSavePassword',
    r'(Z)V',
  );

  static final _setSavePassword = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setSavePassword(boolean z)`
  void setSavePassword(
    bool z,
  ) {
    _setSavePassword(reference.pointer,
            _id_setSavePassword as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_getSavePassword = _class.instanceMethodId(
    r'getSavePassword',
    r'()Z',
  );

  static final _getSavePassword = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean getSavePassword()`
  bool getSavePassword() {
    return _getSavePassword(
            reference.pointer, _id_getSavePassword as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setTextZoom = _class.instanceMethodId(
    r'setTextZoom',
    r'(I)V',
  );

  static final _setTextZoom = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setTextZoom(int i)`
  void setTextZoom(
    int i,
  ) {
    _setTextZoom(reference.pointer, _id_setTextZoom as _$jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_getTextZoom = _class.instanceMethodId(
    r'getTextZoom',
    r'()I',
  );

  static final _getTextZoom = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract int getTextZoom()`
  int getTextZoom() {
    return _getTextZoom(
            reference.pointer, _id_getTextZoom as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setTextSize = _class.instanceMethodId(
    r'setTextSize',
    r'(Landroid/webkit/WebSettings$TextSize;)V',
  );

  static final _setTextSize = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setTextSize(android.webkit.WebSettings$TextSize textSize)`
  void setTextSize(
    WebSettings_TextSize textSize,
  ) {
    _setTextSize(reference.pointer, _id_setTextSize as _$jni.JMethodIDPtr,
            textSize.reference.pointer)
        .check();
  }

  static final _id_getTextSize = _class.instanceMethodId(
    r'getTextSize',
    r'()Landroid/webkit/WebSettings$TextSize;',
  );

  static final _getTextSize = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.webkit.WebSettings$TextSize getTextSize()`
  /// The returned object must be released after use, by calling the [release] method.
  WebSettings_TextSize getTextSize() {
    return _getTextSize(
            reference.pointer, _id_getTextSize as _$jni.JMethodIDPtr)
        .object(const $WebSettings_TextSize$Type());
  }

  static final _id_setDefaultZoom = _class.instanceMethodId(
    r'setDefaultZoom',
    r'(Landroid/webkit/WebSettings$ZoomDensity;)V',
  );

  static final _setDefaultZoom = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void setDefaultZoom(android.webkit.WebSettings$ZoomDensity zoomDensity)`
  void setDefaultZoom(
    WebSettings_ZoomDensity zoomDensity,
  ) {
    _setDefaultZoom(reference.pointer, _id_setDefaultZoom as _$jni.JMethodIDPtr,
            zoomDensity.reference.pointer)
        .check();
  }

  static final _id_getDefaultZoom = _class.instanceMethodId(
    r'getDefaultZoom',
    r'()Landroid/webkit/WebSettings$ZoomDensity;',
  );

  static final _getDefaultZoom = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract android.webkit.WebSettings$ZoomDensity getDefaultZoom()`
  /// The returned object must be released after use, by calling the [release] method.
  WebSettings_ZoomDensity getDefaultZoom() {
    return _getDefaultZoom(
            reference.pointer, _id_getDefaultZoom as _$jni.JMethodIDPtr)
        .object(const $WebSettings_ZoomDensity$Type());
  }

  static final _id_setLightTouchEnabled = _class.instanceMethodId(
    r'setLightTouchEnabled',
    r'(Z)V',
  );

  static final _setLightTouchEnabled = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setLightTouchEnabled(boolean z)`
  void setLightTouchEnabled(
    bool z,
  ) {
    _setLightTouchEnabled(reference.pointer,
            _id_setLightTouchEnabled as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_getLightTouchEnabled = _class.instanceMethodId(
    r'getLightTouchEnabled',
    r'()Z',
  );

  static final _getLightTouchEnabled = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean getLightTouchEnabled()`
  bool getLightTouchEnabled() {
    return _getLightTouchEnabled(
            reference.pointer, _id_getLightTouchEnabled as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setUseWideViewPort = _class.instanceMethodId(
    r'setUseWideViewPort',
    r'(Z)V',
  );

  static final _setUseWideViewPort = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setUseWideViewPort(boolean z)`
  void setUseWideViewPort(
    bool z,
  ) {
    _setUseWideViewPort(reference.pointer,
            _id_setUseWideViewPort as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_getUseWideViewPort = _class.instanceMethodId(
    r'getUseWideViewPort',
    r'()Z',
  );

  static final _getUseWideViewPort = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean getUseWideViewPort()`
  bool getUseWideViewPort() {
    return _getUseWideViewPort(
            reference.pointer, _id_getUseWideViewPort as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setSupportMultipleWindows = _class.instanceMethodId(
    r'setSupportMultipleWindows',
    r'(Z)V',
  );

  static final _setSupportMultipleWindows = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setSupportMultipleWindows(boolean z)`
  void setSupportMultipleWindows(
    bool z,
  ) {
    _setSupportMultipleWindows(reference.pointer,
            _id_setSupportMultipleWindows as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_supportMultipleWindows = _class.instanceMethodId(
    r'supportMultipleWindows',
    r'()Z',
  );

  static final _supportMultipleWindows = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean supportMultipleWindows()`
  bool supportMultipleWindows() {
    return _supportMultipleWindows(
            reference.pointer, _id_supportMultipleWindows as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setLayoutAlgorithm = _class.instanceMethodId(
    r'setLayoutAlgorithm',
    r'(Landroid/webkit/WebSettings$LayoutAlgorithm;)V',
  );

  static final _setLayoutAlgorithm = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void setLayoutAlgorithm(android.webkit.WebSettings$LayoutAlgorithm layoutAlgorithm)`
  void setLayoutAlgorithm(
    WebSettings_LayoutAlgorithm layoutAlgorithm,
  ) {
    _setLayoutAlgorithm(
            reference.pointer,
            _id_setLayoutAlgorithm as _$jni.JMethodIDPtr,
            layoutAlgorithm.reference.pointer)
        .check();
  }

  static final _id_getLayoutAlgorithm = _class.instanceMethodId(
    r'getLayoutAlgorithm',
    r'()Landroid/webkit/WebSettings$LayoutAlgorithm;',
  );

  static final _getLayoutAlgorithm = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract android.webkit.WebSettings$LayoutAlgorithm getLayoutAlgorithm()`
  /// The returned object must be released after use, by calling the [release] method.
  WebSettings_LayoutAlgorithm getLayoutAlgorithm() {
    return _getLayoutAlgorithm(
            reference.pointer, _id_getLayoutAlgorithm as _$jni.JMethodIDPtr)
        .object(const $WebSettings_LayoutAlgorithm$Type());
  }

  static final _id_setStandardFontFamily = _class.instanceMethodId(
    r'setStandardFontFamily',
    r'(Ljava/lang/String;)V',
  );

  static final _setStandardFontFamily = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void setStandardFontFamily(java.lang.String string)`
  void setStandardFontFamily(
    _$jni.JString string,
  ) {
    _setStandardFontFamily(
            reference.pointer,
            _id_setStandardFontFamily as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getStandardFontFamily = _class.instanceMethodId(
    r'getStandardFontFamily',
    r'()Ljava/lang/String;',
  );

  static final _getStandardFontFamily = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getStandardFontFamily()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getStandardFontFamily() {
    return _getStandardFontFamily(
            reference.pointer, _id_getStandardFontFamily as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_setFixedFontFamily = _class.instanceMethodId(
    r'setFixedFontFamily',
    r'(Ljava/lang/String;)V',
  );

  static final _setFixedFontFamily = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void setFixedFontFamily(java.lang.String string)`
  void setFixedFontFamily(
    _$jni.JString string,
  ) {
    _setFixedFontFamily(
            reference.pointer,
            _id_setFixedFontFamily as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getFixedFontFamily = _class.instanceMethodId(
    r'getFixedFontFamily',
    r'()Ljava/lang/String;',
  );

  static final _getFixedFontFamily = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getFixedFontFamily()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getFixedFontFamily() {
    return _getFixedFontFamily(
            reference.pointer, _id_getFixedFontFamily as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_setSansSerifFontFamily = _class.instanceMethodId(
    r'setSansSerifFontFamily',
    r'(Ljava/lang/String;)V',
  );

  static final _setSansSerifFontFamily = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void setSansSerifFontFamily(java.lang.String string)`
  void setSansSerifFontFamily(
    _$jni.JString string,
  ) {
    _setSansSerifFontFamily(
            reference.pointer,
            _id_setSansSerifFontFamily as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getSansSerifFontFamily = _class.instanceMethodId(
    r'getSansSerifFontFamily',
    r'()Ljava/lang/String;',
  );

  static final _getSansSerifFontFamily = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getSansSerifFontFamily()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getSansSerifFontFamily() {
    return _getSansSerifFontFamily(
            reference.pointer, _id_getSansSerifFontFamily as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_setSerifFontFamily = _class.instanceMethodId(
    r'setSerifFontFamily',
    r'(Ljava/lang/String;)V',
  );

  static final _setSerifFontFamily = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void setSerifFontFamily(java.lang.String string)`
  void setSerifFontFamily(
    _$jni.JString string,
  ) {
    _setSerifFontFamily(
            reference.pointer,
            _id_setSerifFontFamily as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getSerifFontFamily = _class.instanceMethodId(
    r'getSerifFontFamily',
    r'()Ljava/lang/String;',
  );

  static final _getSerifFontFamily = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getSerifFontFamily()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getSerifFontFamily() {
    return _getSerifFontFamily(
            reference.pointer, _id_getSerifFontFamily as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_setCursiveFontFamily = _class.instanceMethodId(
    r'setCursiveFontFamily',
    r'(Ljava/lang/String;)V',
  );

  static final _setCursiveFontFamily = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void setCursiveFontFamily(java.lang.String string)`
  void setCursiveFontFamily(
    _$jni.JString string,
  ) {
    _setCursiveFontFamily(
            reference.pointer,
            _id_setCursiveFontFamily as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getCursiveFontFamily = _class.instanceMethodId(
    r'getCursiveFontFamily',
    r'()Ljava/lang/String;',
  );

  static final _getCursiveFontFamily = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getCursiveFontFamily()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getCursiveFontFamily() {
    return _getCursiveFontFamily(
            reference.pointer, _id_getCursiveFontFamily as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_setFantasyFontFamily = _class.instanceMethodId(
    r'setFantasyFontFamily',
    r'(Ljava/lang/String;)V',
  );

  static final _setFantasyFontFamily = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void setFantasyFontFamily(java.lang.String string)`
  void setFantasyFontFamily(
    _$jni.JString string,
  ) {
    _setFantasyFontFamily(
            reference.pointer,
            _id_setFantasyFontFamily as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getFantasyFontFamily = _class.instanceMethodId(
    r'getFantasyFontFamily',
    r'()Ljava/lang/String;',
  );

  static final _getFantasyFontFamily = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getFantasyFontFamily()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getFantasyFontFamily() {
    return _getFantasyFontFamily(
            reference.pointer, _id_getFantasyFontFamily as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_setMinimumFontSize = _class.instanceMethodId(
    r'setMinimumFontSize',
    r'(I)V',
  );

  static final _setMinimumFontSize = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setMinimumFontSize(int i)`
  void setMinimumFontSize(
    int i,
  ) {
    _setMinimumFontSize(
            reference.pointer, _id_setMinimumFontSize as _$jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_getMinimumFontSize = _class.instanceMethodId(
    r'getMinimumFontSize',
    r'()I',
  );

  static final _getMinimumFontSize = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract int getMinimumFontSize()`
  int getMinimumFontSize() {
    return _getMinimumFontSize(
            reference.pointer, _id_getMinimumFontSize as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setMinimumLogicalFontSize = _class.instanceMethodId(
    r'setMinimumLogicalFontSize',
    r'(I)V',
  );

  static final _setMinimumLogicalFontSize = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setMinimumLogicalFontSize(int i)`
  void setMinimumLogicalFontSize(
    int i,
  ) {
    _setMinimumLogicalFontSize(reference.pointer,
            _id_setMinimumLogicalFontSize as _$jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_getMinimumLogicalFontSize = _class.instanceMethodId(
    r'getMinimumLogicalFontSize',
    r'()I',
  );

  static final _getMinimumLogicalFontSize = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract int getMinimumLogicalFontSize()`
  int getMinimumLogicalFontSize() {
    return _getMinimumLogicalFontSize(reference.pointer,
            _id_getMinimumLogicalFontSize as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setDefaultFontSize = _class.instanceMethodId(
    r'setDefaultFontSize',
    r'(I)V',
  );

  static final _setDefaultFontSize = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setDefaultFontSize(int i)`
  void setDefaultFontSize(
    int i,
  ) {
    _setDefaultFontSize(
            reference.pointer, _id_setDefaultFontSize as _$jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_getDefaultFontSize = _class.instanceMethodId(
    r'getDefaultFontSize',
    r'()I',
  );

  static final _getDefaultFontSize = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract int getDefaultFontSize()`
  int getDefaultFontSize() {
    return _getDefaultFontSize(
            reference.pointer, _id_getDefaultFontSize as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setDefaultFixedFontSize = _class.instanceMethodId(
    r'setDefaultFixedFontSize',
    r'(I)V',
  );

  static final _setDefaultFixedFontSize = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setDefaultFixedFontSize(int i)`
  void setDefaultFixedFontSize(
    int i,
  ) {
    _setDefaultFixedFontSize(reference.pointer,
            _id_setDefaultFixedFontSize as _$jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_getDefaultFixedFontSize = _class.instanceMethodId(
    r'getDefaultFixedFontSize',
    r'()I',
  );

  static final _getDefaultFixedFontSize = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract int getDefaultFixedFontSize()`
  int getDefaultFixedFontSize() {
    return _getDefaultFixedFontSize(reference.pointer,
            _id_getDefaultFixedFontSize as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setLoadsImagesAutomatically = _class.instanceMethodId(
    r'setLoadsImagesAutomatically',
    r'(Z)V',
  );

  static final _setLoadsImagesAutomatically =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setLoadsImagesAutomatically(boolean z)`
  void setLoadsImagesAutomatically(
    bool z,
  ) {
    _setLoadsImagesAutomatically(reference.pointer,
            _id_setLoadsImagesAutomatically as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_getLoadsImagesAutomatically = _class.instanceMethodId(
    r'getLoadsImagesAutomatically',
    r'()Z',
  );

  static final _getLoadsImagesAutomatically =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public abstract boolean getLoadsImagesAutomatically()`
  bool getLoadsImagesAutomatically() {
    return _getLoadsImagesAutomatically(reference.pointer,
            _id_getLoadsImagesAutomatically as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setBlockNetworkImage = _class.instanceMethodId(
    r'setBlockNetworkImage',
    r'(Z)V',
  );

  static final _setBlockNetworkImage = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setBlockNetworkImage(boolean z)`
  void setBlockNetworkImage(
    bool z,
  ) {
    _setBlockNetworkImage(reference.pointer,
            _id_setBlockNetworkImage as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_getBlockNetworkImage = _class.instanceMethodId(
    r'getBlockNetworkImage',
    r'()Z',
  );

  static final _getBlockNetworkImage = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean getBlockNetworkImage()`
  bool getBlockNetworkImage() {
    return _getBlockNetworkImage(
            reference.pointer, _id_getBlockNetworkImage as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setBlockNetworkLoads = _class.instanceMethodId(
    r'setBlockNetworkLoads',
    r'(Z)V',
  );

  static final _setBlockNetworkLoads = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setBlockNetworkLoads(boolean z)`
  void setBlockNetworkLoads(
    bool z,
  ) {
    _setBlockNetworkLoads(reference.pointer,
            _id_setBlockNetworkLoads as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_getBlockNetworkLoads = _class.instanceMethodId(
    r'getBlockNetworkLoads',
    r'()Z',
  );

  static final _getBlockNetworkLoads = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean getBlockNetworkLoads()`
  bool getBlockNetworkLoads() {
    return _getBlockNetworkLoads(
            reference.pointer, _id_getBlockNetworkLoads as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setJavaScriptEnabled = _class.instanceMethodId(
    r'setJavaScriptEnabled',
    r'(Z)V',
  );

  static final _setJavaScriptEnabled = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setJavaScriptEnabled(boolean z)`
  void setJavaScriptEnabled(
    bool z,
  ) {
    _setJavaScriptEnabled(reference.pointer,
            _id_setJavaScriptEnabled as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setAllowUniversalAccessFromFileURLs =
      _class.instanceMethodId(
    r'setAllowUniversalAccessFromFileURLs',
    r'(Z)V',
  );

  static final _setAllowUniversalAccessFromFileURLs =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setAllowUniversalAccessFromFileURLs(boolean z)`
  void setAllowUniversalAccessFromFileURLs(
    bool z,
  ) {
    _setAllowUniversalAccessFromFileURLs(
            reference.pointer,
            _id_setAllowUniversalAccessFromFileURLs as _$jni.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_setAllowFileAccessFromFileURLs = _class.instanceMethodId(
    r'setAllowFileAccessFromFileURLs',
    r'(Z)V',
  );

  static final _setAllowFileAccessFromFileURLs =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setAllowFileAccessFromFileURLs(boolean z)`
  void setAllowFileAccessFromFileURLs(
    bool z,
  ) {
    _setAllowFileAccessFromFileURLs(reference.pointer,
            _id_setAllowFileAccessFromFileURLs as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setPluginState = _class.instanceMethodId(
    r'setPluginState',
    r'(Landroid/webkit/WebSettings$PluginState;)V',
  );

  static final _setPluginState = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void setPluginState(android.webkit.WebSettings$PluginState pluginState)`
  void setPluginState(
    WebSettings_PluginState pluginState,
  ) {
    _setPluginState(reference.pointer, _id_setPluginState as _$jni.JMethodIDPtr,
            pluginState.reference.pointer)
        .check();
  }

  static final _id_setDatabasePath = _class.instanceMethodId(
    r'setDatabasePath',
    r'(Ljava/lang/String;)V',
  );

  static final _setDatabasePath = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void setDatabasePath(java.lang.String string)`
  void setDatabasePath(
    _$jni.JString string,
  ) {
    _setDatabasePath(reference.pointer,
            _id_setDatabasePath as _$jni.JMethodIDPtr, string.reference.pointer)
        .check();
  }

  static final _id_setGeolocationDatabasePath = _class.instanceMethodId(
    r'setGeolocationDatabasePath',
    r'(Ljava/lang/String;)V',
  );

  static final _setGeolocationDatabasePath =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void setGeolocationDatabasePath(java.lang.String string)`
  void setGeolocationDatabasePath(
    _$jni.JString string,
  ) {
    _setGeolocationDatabasePath(
            reference.pointer,
            _id_setGeolocationDatabasePath as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_setDatabaseEnabled = _class.instanceMethodId(
    r'setDatabaseEnabled',
    r'(Z)V',
  );

  static final _setDatabaseEnabled = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setDatabaseEnabled(boolean z)`
  void setDatabaseEnabled(
    bool z,
  ) {
    _setDatabaseEnabled(reference.pointer,
            _id_setDatabaseEnabled as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setDomStorageEnabled = _class.instanceMethodId(
    r'setDomStorageEnabled',
    r'(Z)V',
  );

  static final _setDomStorageEnabled = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setDomStorageEnabled(boolean z)`
  void setDomStorageEnabled(
    bool z,
  ) {
    _setDomStorageEnabled(reference.pointer,
            _id_setDomStorageEnabled as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_getDomStorageEnabled = _class.instanceMethodId(
    r'getDomStorageEnabled',
    r'()Z',
  );

  static final _getDomStorageEnabled = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean getDomStorageEnabled()`
  bool getDomStorageEnabled() {
    return _getDomStorageEnabled(
            reference.pointer, _id_getDomStorageEnabled as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getDatabasePath = _class.instanceMethodId(
    r'getDatabasePath',
    r'()Ljava/lang/String;',
  );

  static final _getDatabasePath = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getDatabasePath()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getDatabasePath() {
    return _getDatabasePath(
            reference.pointer, _id_getDatabasePath as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getDatabaseEnabled = _class.instanceMethodId(
    r'getDatabaseEnabled',
    r'()Z',
  );

  static final _getDatabaseEnabled = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean getDatabaseEnabled()`
  bool getDatabaseEnabled() {
    return _getDatabaseEnabled(
            reference.pointer, _id_getDatabaseEnabled as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setGeolocationEnabled = _class.instanceMethodId(
    r'setGeolocationEnabled',
    r'(Z)V',
  );

  static final _setGeolocationEnabled = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setGeolocationEnabled(boolean z)`
  void setGeolocationEnabled(
    bool z,
  ) {
    _setGeolocationEnabled(reference.pointer,
            _id_setGeolocationEnabled as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_getJavaScriptEnabled = _class.instanceMethodId(
    r'getJavaScriptEnabled',
    r'()Z',
  );

  static final _getJavaScriptEnabled = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean getJavaScriptEnabled()`
  bool getJavaScriptEnabled() {
    return _getJavaScriptEnabled(
            reference.pointer, _id_getJavaScriptEnabled as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getAllowUniversalAccessFromFileURLs =
      _class.instanceMethodId(
    r'getAllowUniversalAccessFromFileURLs',
    r'()Z',
  );

  static final _getAllowUniversalAccessFromFileURLs =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public abstract boolean getAllowUniversalAccessFromFileURLs()`
  bool getAllowUniversalAccessFromFileURLs() {
    return _getAllowUniversalAccessFromFileURLs(reference.pointer,
            _id_getAllowUniversalAccessFromFileURLs as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getAllowFileAccessFromFileURLs = _class.instanceMethodId(
    r'getAllowFileAccessFromFileURLs',
    r'()Z',
  );

  static final _getAllowFileAccessFromFileURLs =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public abstract boolean getAllowFileAccessFromFileURLs()`
  bool getAllowFileAccessFromFileURLs() {
    return _getAllowFileAccessFromFileURLs(reference.pointer,
            _id_getAllowFileAccessFromFileURLs as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getPluginState = _class.instanceMethodId(
    r'getPluginState',
    r'()Landroid/webkit/WebSettings$PluginState;',
  );

  static final _getPluginState = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract android.webkit.WebSettings$PluginState getPluginState()`
  /// The returned object must be released after use, by calling the [release] method.
  WebSettings_PluginState getPluginState() {
    return _getPluginState(
            reference.pointer, _id_getPluginState as _$jni.JMethodIDPtr)
        .object(const $WebSettings_PluginState$Type());
  }

  static final _id_setJavaScriptCanOpenWindowsAutomatically =
      _class.instanceMethodId(
    r'setJavaScriptCanOpenWindowsAutomatically',
    r'(Z)V',
  );

  static final _setJavaScriptCanOpenWindowsAutomatically =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setJavaScriptCanOpenWindowsAutomatically(boolean z)`
  void setJavaScriptCanOpenWindowsAutomatically(
    bool z,
  ) {
    _setJavaScriptCanOpenWindowsAutomatically(
            reference.pointer,
            _id_setJavaScriptCanOpenWindowsAutomatically as _$jni.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_getJavaScriptCanOpenWindowsAutomatically =
      _class.instanceMethodId(
    r'getJavaScriptCanOpenWindowsAutomatically',
    r'()Z',
  );

  static final _getJavaScriptCanOpenWindowsAutomatically =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public abstract boolean getJavaScriptCanOpenWindowsAutomatically()`
  bool getJavaScriptCanOpenWindowsAutomatically() {
    return _getJavaScriptCanOpenWindowsAutomatically(reference.pointer,
            _id_getJavaScriptCanOpenWindowsAutomatically as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setDefaultTextEncodingName = _class.instanceMethodId(
    r'setDefaultTextEncodingName',
    r'(Ljava/lang/String;)V',
  );

  static final _setDefaultTextEncodingName =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void setDefaultTextEncodingName(java.lang.String string)`
  void setDefaultTextEncodingName(
    _$jni.JString string,
  ) {
    _setDefaultTextEncodingName(
            reference.pointer,
            _id_setDefaultTextEncodingName as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getDefaultTextEncodingName = _class.instanceMethodId(
    r'getDefaultTextEncodingName',
    r'()Ljava/lang/String;',
  );

  static final _getDefaultTextEncodingName =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public abstract java.lang.String getDefaultTextEncodingName()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getDefaultTextEncodingName() {
    return _getDefaultTextEncodingName(reference.pointer,
            _id_getDefaultTextEncodingName as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_setUserAgentString = _class.instanceMethodId(
    r'setUserAgentString',
    r'(Ljava/lang/String;)V',
  );

  static final _setUserAgentString = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void setUserAgentString(java.lang.String string)`
  void setUserAgentString(
    _$jni.JString string,
  ) {
    _setUserAgentString(
            reference.pointer,
            _id_setUserAgentString as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getUserAgentString = _class.instanceMethodId(
    r'getUserAgentString',
    r'()Ljava/lang/String;',
  );

  static final _getUserAgentString = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String getUserAgentString()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getUserAgentString() {
    return _getUserAgentString(
            reference.pointer, _id_getUserAgentString as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getDefaultUserAgent = _class.staticMethodId(
    r'getDefaultUserAgent',
    r'(Landroid/content/Context;)Ljava/lang/String;',
  );

  static final _getDefaultUserAgent = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public java.lang.String getDefaultUserAgent(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString getDefaultUserAgent(
    _$jni.JObject context,
  ) {
    return _getDefaultUserAgent(
            _class.reference.pointer,
            _id_getDefaultUserAgent as _$jni.JMethodIDPtr,
            context.reference.pointer)
        .object(const _$jni.JStringType());
  }

  static final _id_setNeedInitialFocus = _class.instanceMethodId(
    r'setNeedInitialFocus',
    r'(Z)V',
  );

  static final _setNeedInitialFocus = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setNeedInitialFocus(boolean z)`
  void setNeedInitialFocus(
    bool z,
  ) {
    _setNeedInitialFocus(reference.pointer,
            _id_setNeedInitialFocus as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setRenderPriority = _class.instanceMethodId(
    r'setRenderPriority',
    r'(Landroid/webkit/WebSettings$RenderPriority;)V',
  );

  static final _setRenderPriority = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void setRenderPriority(android.webkit.WebSettings$RenderPriority renderPriority)`
  void setRenderPriority(
    WebSettings_RenderPriority renderPriority,
  ) {
    _setRenderPriority(
            reference.pointer,
            _id_setRenderPriority as _$jni.JMethodIDPtr,
            renderPriority.reference.pointer)
        .check();
  }

  static final _id_setCacheMode = _class.instanceMethodId(
    r'setCacheMode',
    r'(I)V',
  );

  static final _setCacheMode = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setCacheMode(int i)`
  void setCacheMode(
    int i,
  ) {
    _setCacheMode(reference.pointer, _id_setCacheMode as _$jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_getCacheMode = _class.instanceMethodId(
    r'getCacheMode',
    r'()I',
  );

  static final _getCacheMode = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract int getCacheMode()`
  int getCacheMode() {
    return _getCacheMode(
            reference.pointer, _id_getCacheMode as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setMixedContentMode = _class.instanceMethodId(
    r'setMixedContentMode',
    r'(I)V',
  );

  static final _setMixedContentMode = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setMixedContentMode(int i)`
  void setMixedContentMode(
    int i,
  ) {
    _setMixedContentMode(
            reference.pointer, _id_setMixedContentMode as _$jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_getMixedContentMode = _class.instanceMethodId(
    r'getMixedContentMode',
    r'()I',
  );

  static final _getMixedContentMode = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract int getMixedContentMode()`
  int getMixedContentMode() {
    return _getMixedContentMode(
            reference.pointer, _id_getMixedContentMode as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setOffscreenPreRaster = _class.instanceMethodId(
    r'setOffscreenPreRaster',
    r'(Z)V',
  );

  static final _setOffscreenPreRaster = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setOffscreenPreRaster(boolean z)`
  void setOffscreenPreRaster(
    bool z,
  ) {
    _setOffscreenPreRaster(reference.pointer,
            _id_setOffscreenPreRaster as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_getOffscreenPreRaster = _class.instanceMethodId(
    r'getOffscreenPreRaster',
    r'()Z',
  );

  static final _getOffscreenPreRaster = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean getOffscreenPreRaster()`
  bool getOffscreenPreRaster() {
    return _getOffscreenPreRaster(
            reference.pointer, _id_getOffscreenPreRaster as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setSafeBrowsingEnabled = _class.instanceMethodId(
    r'setSafeBrowsingEnabled',
    r'(Z)V',
  );

  static final _setSafeBrowsingEnabled = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setSafeBrowsingEnabled(boolean z)`
  void setSafeBrowsingEnabled(
    bool z,
  ) {
    _setSafeBrowsingEnabled(reference.pointer,
            _id_setSafeBrowsingEnabled as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_getSafeBrowsingEnabled = _class.instanceMethodId(
    r'getSafeBrowsingEnabled',
    r'()Z',
  );

  static final _getSafeBrowsingEnabled = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean getSafeBrowsingEnabled()`
  bool getSafeBrowsingEnabled() {
    return _getSafeBrowsingEnabled(
            reference.pointer, _id_getSafeBrowsingEnabled as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setForceDark = _class.instanceMethodId(
    r'setForceDark',
    r'(I)V',
  );

  static final _setForceDark = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void setForceDark(int i)`
  void setForceDark(
    int i,
  ) {
    _setForceDark(reference.pointer, _id_setForceDark as _$jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_getForceDark = _class.instanceMethodId(
    r'getForceDark',
    r'()I',
  );

  static final _getForceDark = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getForceDark()`
  int getForceDark() {
    return _getForceDark(
            reference.pointer, _id_getForceDark as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setAlgorithmicDarkeningAllowed = _class.instanceMethodId(
    r'setAlgorithmicDarkeningAllowed',
    r'(Z)V',
  );

  static final _setAlgorithmicDarkeningAllowed =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void setAlgorithmicDarkeningAllowed(boolean z)`
  void setAlgorithmicDarkeningAllowed(
    bool z,
  ) {
    _setAlgorithmicDarkeningAllowed(reference.pointer,
            _id_setAlgorithmicDarkeningAllowed as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isAlgorithmicDarkeningAllowed = _class.instanceMethodId(
    r'isAlgorithmicDarkeningAllowed',
    r'()Z',
  );

  static final _isAlgorithmicDarkeningAllowed =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public boolean isAlgorithmicDarkeningAllowed()`
  bool isAlgorithmicDarkeningAllowed() {
    return _isAlgorithmicDarkeningAllowed(reference.pointer,
            _id_isAlgorithmicDarkeningAllowed as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setDisabledActionModeMenuItems = _class.instanceMethodId(
    r'setDisabledActionModeMenuItems',
    r'(I)V',
  );

  static final _setDisabledActionModeMenuItems =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void setDisabledActionModeMenuItems(int i)`
  void setDisabledActionModeMenuItems(
    int i,
  ) {
    _setDisabledActionModeMenuItems(reference.pointer,
            _id_setDisabledActionModeMenuItems as _$jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_getDisabledActionModeMenuItems = _class.instanceMethodId(
    r'getDisabledActionModeMenuItems',
    r'()I',
  );

  static final _getDisabledActionModeMenuItems =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallIntMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public abstract int getDisabledActionModeMenuItems()`
  int getDisabledActionModeMenuItems() {
    return _getDisabledActionModeMenuItems(reference.pointer,
            _id_getDisabledActionModeMenuItems as _$jni.JMethodIDPtr)
        .integer;
  }
}

final class $WebSettings$Type extends _$jni.JObjType<WebSettings> {
  @_$jni.internal
  const $WebSettings$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/webkit/WebSettings;';

  @_$jni.internal
  @_$core.override
  WebSettings fromReference(_$jni.JReference reference) =>
      WebSettings.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WebSettings$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebSettings$Type) &&
        other is $WebSettings$Type;
  }
}

/// from: `io.flutter.plugins.webviewflutter.WebViewWrapper`
class WebViewWrapper extends WebView {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WebViewWrapper> $type;

  @_$jni.internal
  WebViewWrapper.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'io/flutter/plugins/webviewflutter/WebViewWrapper');

  /// The type which includes information such as the signature of this class.
  static const type = $WebViewWrapper$Type();
  static final _id_new$ = _class.constructorId(
    r'(Landroid/content/Context;)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  factory WebViewWrapper(
    _$jni.JObject context,
  ) {
    return WebViewWrapper.fromReference(_new$(_class.reference.pointer,
            _id_new$ as _$jni.JMethodIDPtr, context.reference.pointer)
        .reference);
  }
}

final class $WebViewWrapper$Type extends _$jni.JObjType<WebViewWrapper> {
  @_$jni.internal
  const $WebViewWrapper$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Lio/flutter/plugins/webviewflutter/WebViewWrapper;';

  @_$jni.internal
  @_$core.override
  WebViewWrapper fromReference(_$jni.JReference reference) =>
      WebViewWrapper.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const $WebView$Type();

  @_$jni.internal
  @_$core.override
  final superCount = 2;

  @_$core.override
  int get hashCode => ($WebViewWrapper$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebViewWrapper$Type) &&
        other is $WebViewWrapper$Type;
  }
}

/// from: `io.flutter.plugins.webviewflutter.WebViewClientProxy`
class WebViewClientProxy extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WebViewClientProxy> $type;

  @_$jni.internal
  WebViewClientProxy.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'io/flutter/plugins/webviewflutter/WebViewClientProxy');

  /// The type which includes information such as the signature of this class.
  static const type = $WebViewClientProxy$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory WebViewClientProxy() {
    return WebViewClientProxy.fromReference(
        _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr)
            .reference);
  }

  static final _id_setOnProgressChanged = _class.instanceMethodId(
    r'setOnProgressChanged',
    r'(Ljava/util/function/Consumer;)V',
  );

  static final _setOnProgressChanged = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setOnProgressChanged(java.util.function.Consumer consumer)`
  void setOnProgressChanged(
    Consumer<_$jni.JInteger> consumer,
  ) {
    _setOnProgressChanged(
            reference.pointer,
            _id_setOnProgressChanged as _$jni.JMethodIDPtr,
            consumer.reference.pointer)
        .check();
  }

  static final _id_setOnUrlChanged = _class.instanceMethodId(
    r'setOnUrlChanged',
    r'(Ljava/util/function/Consumer;)V',
  );

  static final _setOnUrlChanged = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setOnUrlChanged(java.util.function.Consumer consumer)`
  void setOnUrlChanged(
    Consumer<_$jni.JString> consumer,
  ) {
    _setOnUrlChanged(
            reference.pointer,
            _id_setOnUrlChanged as _$jni.JMethodIDPtr,
            consumer.reference.pointer)
        .check();
  }

  static final _id_onProgressChanged = _class.instanceMethodId(
    r'onProgressChanged',
    r'(Landroid/webkit/WebView;I)V',
  );

  static final _onProgressChanged = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public void onProgressChanged(android.webkit.WebView webView, int i)`
  void onProgressChanged(
    WebView webView,
    int i,
  ) {
    _onProgressChanged(
            reference.pointer,
            _id_onProgressChanged as _$jni.JMethodIDPtr,
            webView.reference.pointer,
            i)
        .check();
  }
}

final class $WebViewClientProxy$Type
    extends _$jni.JObjType<WebViewClientProxy> {
  @_$jni.internal
  const $WebViewClientProxy$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Lio/flutter/plugins/webviewflutter/WebViewClientProxy;';

  @_$jni.internal
  @_$core.override
  WebViewClientProxy fromReference(_$jni.JReference reference) =>
      WebViewClientProxy.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WebViewClientProxy$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WebViewClientProxy$Type) &&
        other is $WebViewClientProxy$Type;
  }
}
